
SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d624  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d9fc  0800d9fc  0001d9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  24000000  0800da04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000059dc  240001ec  0800dbf0  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24005bc8  0800dbf0  00025bc8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00038e70  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000062b1  00000000  00000000  0005908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001da8  00000000  00000000  0005f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001b90  00000000  00000000  000610e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000082fe  00000000  00000000  00062c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002514a  00000000  00000000  0006af76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00166838  00000000  00000000  000900c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001f68f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e5c  00000000  00000000  001f694c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001ec 	.word	0x240001ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d8dc 	.word	0x0800d8dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001f0 	.word	0x240001f0
 800030c:	0800d8dc 	.word	0x0800d8dc

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b5b0      	push	{r4, r5, r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 ff31 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f825 	bl	8000368 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800031e:	f000 f89f 	bl	8000460 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 fa53 	bl	80007cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000326:	f000 f8c7 	bl	80004b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800032a:	f000 f93d 	bl	80005a8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800032e:	f000 f9a1 	bl	8000674 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000332:	f000 fa13 	bl	800075c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Voltmeter_init();
 8000336:	f000 fd9f 	bl	8000e78 <Voltmeter_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <main+0x50>)
 800033c:	1d3c      	adds	r4, r7, #4
 800033e:	461d      	mov	r5, r3
 8000340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000344:	682b      	ldr	r3, [r5, #0]
 8000346:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f00a febc 	bl	800b0ca <osThreadCreate>
 8000352:	4603      	mov	r3, r0
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <main+0x54>)
 8000356:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  vTaskStartScheduler();
 8000358:	f00b fd46 	bl	800bde8 <vTaskStartScheduler>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035c:	e7fe      	b.n	800035c <main+0x4c>
 800035e:	bf00      	nop
 8000360:	0800d900 	.word	0x0800d900
 8000364:	240040f4 	.word	0x240040f4

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b09c      	sub	sp, #112	; 0x70
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000372:	224c      	movs	r2, #76	; 0x4c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f00d faa8 	bl	800d8cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2220      	movs	r2, #32
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f00d faa2 	bl	800d8cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000388:	2002      	movs	r0, #2
 800038a:	f004 faaf 	bl	80048ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800038e:	2300      	movs	r3, #0
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <SystemClock_Config+0xf0>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800039a:	4a2f      	ldr	r2, [pc, #188]	; (8000458 <SystemClock_Config+0xf0>)
 800039c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <SystemClock_Config+0xf0>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ae:	bf00      	nop
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <SystemClock_Config+0xf0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003bc:	d1f8      	bne.n	80003b0 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003be:	4b27      	ldr	r3, [pc, #156]	; (800045c <SystemClock_Config+0xf4>)
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	f023 0303 	bic.w	r3, r3, #3
 80003c6:	4a25      	ldr	r2, [pc, #148]	; (800045c <SystemClock_Config+0xf4>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003ce:	2321      	movs	r3, #33	; 0x21
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	2302      	movs	r3, #2
 80003e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80003e8:	2318      	movs	r3, #24
 80003ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003f0:	2304      	movs	r3, #4
 80003f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f4:	2302      	movs	r3, #2
 80003f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003f8:	230c      	movs	r3, #12
 80003fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	4618      	mov	r0, r3
 800040a:	f004 fab9 	bl	8004980 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000414:	f000 fb06 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	233f      	movs	r3, #63	; 0x3f
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2303      	movs	r3, #3
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000424:	2308      	movs	r3, #8
 8000426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000428:	2340      	movs	r3, #64	; 0x40
 800042a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800042c:	2340      	movs	r3, #64	; 0x40
 800042e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000434:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
 8000438:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f004 fe2c 	bl	800509c <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800044a:	f000 faeb 	bl	8000a24 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3770      	adds	r7, #112	; 0x70
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	58024800 	.word	0x58024800
 800045c:	58024400 	.word	0x58024400

08000460 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b0ae      	sub	sp, #184	; 0xb8
 8000464:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	22b4      	movs	r2, #180	; 0xb4
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00d fa2d 	bl	800d8cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000472:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000476:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800047c:	2318      	movs	r3, #24
 800047e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000480:	2304      	movs	r3, #4
 8000482:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000484:	2302      	movs	r3, #2
 8000486:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800048c:	23c0      	movs	r3, #192	; 0xc0
 800048e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000498:	2300      	movs	r3, #0
 800049a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f005 f9b3 	bl	800580c <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80004ac:	f000 faba 	bl	8000a24 <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	37b8      	adds	r7, #184	; 0xb8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	; 0x30
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2224      	movs	r2, #36	; 0x24
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f00d f9fb 	bl	800d8cc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <MX_ADC1_Init+0xe4>)
 80004d8:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <MX_ADC1_Init+0xe8>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <MX_ADC1_Init+0xe4>)
 80004de:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80004e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_ADC1_Init+0xe4>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ea:	4b2c      	ldr	r3, [pc, #176]	; (800059c <MX_ADC1_Init+0xe4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <MX_ADC1_Init+0xe4>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f6:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_ADC1_Init+0xe4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_ADC1_Init+0xe4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_ADC1_Init+0xe4>)
 8000504:	2201      	movs	r2, #1
 8000506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_ADC1_Init+0xe4>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_ADC1_Init+0xe4>)
 8000512:	2200      	movs	r2, #0
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_ADC1_Init+0xe4>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_ADC1_Init+0xe4>)
 800051e:	2200      	movs	r2, #0
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_ADC1_Init+0xe4>)
 8000524:	2200      	movs	r2, #0
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_ADC1_Init+0xe4>)
 800052a:	2200      	movs	r2, #0
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_ADC1_Init+0xe4>)
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000536:	4819      	ldr	r0, [pc, #100]	; (800059c <MX_ADC1_Init+0xe4>)
 8000538:	f001 f982 	bl	8001840 <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000542:	f000 fa6f 	bl	8000a24 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000546:	2300      	movs	r3, #0
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800054a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054e:	4619      	mov	r1, r3
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <MX_ADC1_Init+0xe4>)
 8000552:	f002 fc6d 	bl	8002e30 <HAL_ADCEx_MultiModeConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800055c:	f000 fa62 	bl	8000a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_ADC1_Init+0xec>)
 8000562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000564:	2306      	movs	r3, #6
 8000566:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800056c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000570:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000572:	2304      	movs	r3, #4
 8000574:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_ADC1_Init+0xe4>)
 8000586:	f001 fc6f 	bl	8001e68 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000590:	f000 fa48 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3730      	adds	r7, #48	; 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	24004168 	.word	0x24004168
 80005a0:	40022000 	.word	0x40022000
 80005a4:	08600004 	.word	0x08600004

080005a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2224      	movs	r2, #36	; 0x24
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f00d f989 	bl	800d8cc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <MX_ADC2_Init+0xc4>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005c2:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80005c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_ADC2_Init+0xc0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_ADC2_Init+0xc0>)
 8000602:	2200      	movs	r2, #0
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_ADC2_Init+0xc0>)
 8000608:	2200      	movs	r2, #0
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_ADC2_Init+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ADC2_Init+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <MX_ADC2_Init+0xc0>)
 800061c:	f001 f910 	bl	8001840 <HAL_ADC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000626:	f000 f9fd 	bl	8000a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC2_Init+0xc8>)
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000636:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800063a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063c:	2304      	movs	r3, #4
 800063e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <MX_ADC2_Init+0xc0>)
 8000650:	f001 fc0a 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800065a:	f000 f9e3 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	240040f8 	.word	0x240040f8
 800066c:	40022100 	.word	0x40022100
 8000670:	08600004 	.word	0x08600004

08000674 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2224      	movs	r2, #36	; 0x24
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00d f923 	bl	800d8cc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <MX_ADC3_Init+0xdc>)
 8000688:	4a32      	ldr	r2, [pc, #200]	; (8000754 <MX_ADC3_Init+0xe0>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <MX_ADC3_Init+0xdc>)
 800068e:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8000692:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_ADC3_Init+0xdc>)
 8000696:	2208      	movs	r2, #8
 8000698:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <MX_ADC3_Init+0xdc>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <MX_ADC3_Init+0xdc>)
 80006fc:	f001 f8a0 	bl	8001840 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000706:	f000 f98d 	bl	8000a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC3_Init+0xe4>)
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070e:	2306      	movs	r3, #6
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800071a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071c:	2304      	movs	r3, #4
 800071e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC3_Init+0xdc>)
 800073a:	f001 fb95 	bl	8001e68 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000744:	f000 f96e 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	240041d8 	.word	0x240041d8
 8000754:	58026000 	.word	0x58026000
 8000758:	04300002 	.word	0x04300002

0800075c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM6_Init+0x68>)
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_TIM6_Init+0x6c>)
 8000770:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2999;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_TIM6_Init+0x68>)
 8000774:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000778:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_TIM6_Init+0x68>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 31999;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_TIM6_Init+0x68>)
 8000782:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000786:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_TIM6_Init+0x68>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM6_Init+0x68>)
 8000790:	f007 f8ce 	bl	8007930 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800079a:	f000 f943 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM6_Init+0x68>)
 80007ac:	f007 fbba 	bl	8007f24 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f935 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24004248 	.word	0x24004248
 80007c8:	40001000 	.word	0x40001000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b7b      	ldr	r3, [pc, #492]	; (80009d0 <MX_GPIO_Init+0x204>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e8:	4a79      	ldr	r2, [pc, #484]	; (80009d0 <MX_GPIO_Init+0x204>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f2:	4b77      	ldr	r3, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x204>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000800:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	4a72      	ldr	r2, [pc, #456]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000810:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a6a      	ldr	r2, [pc, #424]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b68      	ldr	r3, [pc, #416]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083c:	4b64      	ldr	r3, [pc, #400]	; (80009d0 <MX_GPIO_Init+0x204>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	4a63      	ldr	r2, [pc, #396]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084c:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x204>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <MX_GPIO_Init+0x204>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	4a5b      	ldr	r2, [pc, #364]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x204>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <MX_GPIO_Init+0x204>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a54      	ldr	r2, [pc, #336]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <MX_GPIO_Init+0x204>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <MX_GPIO_Init+0x204>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a4c      	ldr	r2, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x204>)
 800089e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x204>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ba:	4846      	ldr	r0, [pc, #280]	; (80009d4 <MX_GPIO_Init+0x208>)
 80008bc:	f002 fe22 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4844      	ldr	r0, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x20c>)
 80008c8:	f002 fe1c 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008dc:	230b      	movs	r3, #11
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	483d      	ldr	r0, [pc, #244]	; (80009dc <MX_GPIO_Init+0x210>)
 80008e8:	f002 fc64 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008ec:	2386      	movs	r3, #134	; 0x86
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fc:	230b      	movs	r3, #11
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4836      	ldr	r0, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x214>)
 8000908:	f002 fc54 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091e:	230b      	movs	r3, #11
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	482a      	ldr	r0, [pc, #168]	; (80009d4 <MX_GPIO_Init+0x208>)
 800092a:	f002 fc43 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800092e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4823      	ldr	r0, [pc, #140]	; (80009d4 <MX_GPIO_Init+0x208>)
 8000948:	f002 fc34 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800094c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095e:	2307      	movs	r3, #7
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x20c>)
 800096a:	f002 fc23 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_GPIO_Init+0x20c>)
 8000988:	f002 fc14 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_GPIO_Init+0x218>)
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80009a0:	f002 fc08 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b6:	230b      	movs	r3, #11
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_GPIO_Init+0x21c>)
 80009c2:	f002 fbf7 	bl	80031b4 <HAL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	58024400 	.word	0x58024400
 80009d4:	58020400 	.word	0x58020400
 80009d8:	58020c00 	.word	0x58020c00
 80009dc:	58020800 	.word	0x58020800
 80009e0:	58020000 	.word	0x58020000
 80009e4:	11110000 	.word	0x11110000
 80009e8:	58021800 	.word	0x58021800

080009ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009f4:	f00c f9d2 	bl	800cd9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f00a fb8d 	bl	800b118 <osDelay>
 80009fe:	e7fb      	b.n	80009f8 <StartDefaultTask+0xc>

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 fbef 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001400 	.word	0x40001400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x38>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_MspInit+0x38>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_MspInit+0x38>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	210f      	movs	r1, #15
 8000a58:	f06f 0001 	mvn.w	r0, #1
 8000a5c:	f002 fb82 	bl	8003164 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58024400 	.word	0x58024400

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a4f      	ldr	r2, [pc, #316]	; (8000bc8 <HAL_ADC_MspInit+0x15c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d134      	bne.n	8000af8 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a8e:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a4d      	ldr	r2, [pc, #308]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000a96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10e      	bne.n	8000abe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa6:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000abe:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000ac6:	f043 0320 	orr.w	r3, r3, #32
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0320 	and.w	r3, r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4838      	ldr	r0, [pc, #224]	; (8000bd4 <HAL_ADC_MspInit+0x168>)
 8000af2:	f002 fb5f 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000af6:	e062      	b.n	8000bbe <HAL_ADC_MspInit+0x152>
  else if(hadc->Instance==ADC2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <HAL_ADC_MspInit+0x16c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d134      	bne.n	8000b6c <HAL_ADC_MspInit+0x100>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b02:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000b0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_ADC_MspInit+0x160>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10e      	bne.n	8000b32 <HAL_ADC_MspInit+0xc6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b1c:	f043 0320 	orr.w	r3, r3, #32
 8000b20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <HAL_ADC_MspInit+0x168>)
 8000b66:	f002 fb25 	bl	80031b4 <HAL_GPIO_Init>
}
 8000b6a:	e028      	b.n	8000bbe <HAL_ADC_MspInit+0x152>
  else if(hadc->Instance==ADC3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_ADC_MspInit+0x170>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d123      	bne.n	8000bbe <HAL_ADC_MspInit+0x152>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_ADC_MspInit+0x164>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000bb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000bb6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000bba:	f000 fb5f 	bl	800127c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	; 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	24000208 	.word	0x24000208
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58021400 	.word	0x58021400
 8000bd8:	40022100 	.word	0x40022100
 8000bdc:	58026000 	.word	0x58026000

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d116      	bne.n	8000c20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_TIM_Base_MspInit+0x4c>)
 8000c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2105      	movs	r1, #5
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f002 faa5 	bl	8003164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c1a:	2036      	movs	r0, #54	; 0x36
 8000c1c:	f002 fabc 	bl	8003198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40001000 	.word	0x40001000
 8000c2c:	58024400 	.word	0x58024400

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b090      	sub	sp, #64	; 0x40
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d827      	bhi.n	8000c8e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	2037      	movs	r0, #55	; 0x37
 8000c44:	f002 fa8e 	bl	8003164 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c48:	2037      	movs	r0, #55	; 0x37
 8000c4a:	f002 faa5 	bl	8003198 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <HAL_InitTick+0xc4>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_InitTick+0xc8>)
 8000c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <HAL_InitTick+0xc8>)
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_InitTick+0xc8>)
 8000c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c72:	f107 0210 	add.w	r2, r7, #16
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fd83 	bl	8005788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d106      	bne.n	8000c9a <HAL_InitTick+0x6a>
 8000c8c:	e001      	b.n	8000c92 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e02b      	b.n	8000cea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c92:	f004 fd63 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 8000c96:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9a:	f004 fd5f 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_InitTick+0xcc>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	0c9b      	lsrs	r3, r3, #18
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cb4:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <HAL_InitTick+0xd4>)
 8000cb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cbe:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_InitTick+0xd0>)
 8000cd4:	f006 fe2c 	bl	8007930 <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d104      	bne.n	8000ce8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_InitTick+0xd0>)
 8000ce0:	f006 fe7e 	bl	80079e0 <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	e000      	b.n	8000cea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3740      	adds	r7, #64	; 0x40
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000008 	.word	0x24000008
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	431bde83 	.word	0x431bde83
 8000d00:	24004294 	.word	0x24004294
 8000d04:	40001400 	.word	0x40001400

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	extern xSemaphoreHandle Delay_Sem;
	xSemaphoreGive(Delay_Sem);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <TIM6_DAC_IRQHandler+0x1c>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	f00a fb6f 	bl	800b424 <xQueueGenericSend>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <TIM6_DAC_IRQHandler+0x20>)
 8000d48:	f006 feff 	bl	8007b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240042e0 	.word	0x240042e0
 8000d54:	24004248 	.word	0x24004248

08000d58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM7_IRQHandler+0x10>)
 8000d5e:	f006 fef4 	bl	8007b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24004294 	.word	0x24004294

08000d6c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <OTG_HS_IRQHandler+0x10>)
 8000d72:	f002 fd37 	bl	80037e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	240057c0 	.word	0x240057c0

08000d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <SystemInit+0xd8>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a33      	ldr	r2, [pc, #204]	; (8000e58 <SystemInit+0xd8>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <SystemInit+0xdc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d807      	bhi.n	8000db0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <SystemInit+0xdc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	4a2c      	ldr	r2, [pc, #176]	; (8000e5c <SystemInit+0xdc>)
 8000daa:	f043 0307 	orr.w	r3, r3, #7
 8000dae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <SystemInit+0xe0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a2a      	ldr	r2, [pc, #168]	; (8000e60 <SystemInit+0xe0>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemInit+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <SystemInit+0xe0>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4926      	ldr	r1, [pc, #152]	; (8000e60 <SystemInit+0xe0>)
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <SystemInit+0xe4>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SystemInit+0xdc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <SystemInit+0xdc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 030f 	bic.w	r3, r3, #15
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <SystemInit+0xdc>)
 8000de4:	f043 0307 	orr.w	r3, r3, #7
 8000de8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <SystemInit+0xe0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemInit+0xe0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SystemInit+0xe0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <SystemInit+0xe0>)
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <SystemInit+0xe8>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <SystemInit+0xe0>)
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <SystemInit+0xec>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <SystemInit+0xe0>)
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <SystemInit+0xf0>)
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <SystemInit+0xe0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <SystemInit+0xe0>)
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <SystemInit+0xf0>)
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <SystemInit+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <SystemInit+0xe0>)
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <SystemInit+0xf0>)
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <SystemInit+0xe0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SystemInit+0xe0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <SystemInit+0xe0>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <SystemInit+0xe0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <SystemInit+0xf4>)
 8000e40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SystemInit+0xd8>)
 8000e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	52002000 	.word	0x52002000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e68:	02020200 	.word	0x02020200
 8000e6c:	01ff0000 	.word	0x01ff0000
 8000e70:	01010280 	.word	0x01010280
 8000e74:	52004000 	.word	0x52004000

08000e78 <Voltmeter_init>:

 xQueueHandle Term_Queue;
 volatile xQueueHandle ADC_Queue;


void Voltmeter_init(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8

	Delay_Sem = xSemaphoreCreateBinary();
 8000e7e:	2203      	movs	r2, #3
 8000e80:	2100      	movs	r1, #0
 8000e82:	2001      	movs	r0, #1
 8000e84:	f00a fa78 	bl	800b378 <xQueueGenericCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <Voltmeter_init+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

	Term_Queue = xQueueCreate( 2, (unsigned portBASE_TYPE) sizeof(uint16_t));
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2102      	movs	r1, #2
 8000e92:	2002      	movs	r0, #2
 8000e94:	f00a fa70 	bl	800b378 <xQueueGenericCreate>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <Voltmeter_init+0x68>)
 8000e9c:	6013      	str	r3, [r2, #0]
	ADC_Queue = xQueueCreate( 2, (unsigned portBASE_TYPE) sizeof(uint8_t));
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f00a fa68 	bl	800b378 <xQueueGenericCreate>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <Voltmeter_init+0x6c>)
 8000eac:	6013      	str	r3, [r2, #0]

	xTaskCreate(vTerminal,"Terminal",configMINIMAL_STACK_SIZE,NULL,IDLE_TaskPriority + 1,NULL);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	490b      	ldr	r1, [pc, #44]	; (8000ee8 <Voltmeter_init+0x70>)
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <Voltmeter_init+0x74>)
 8000ebe:	f00a fe1b 	bl	800baf8 <xTaskCreate>
	xTaskCreate(vADC,"ADC",configMINIMAL_STACK_SIZE,NULL,IDLE_TaskPriority + 1,NULL);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <Voltmeter_init+0x78>)
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <Voltmeter_init+0x7c>)
 8000ed2:	f00a fe11 	bl	800baf8 <xTaskCreate>


}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	240042e0 	.word	0x240042e0
 8000ee0:	240042e4 	.word	0x240042e4
 8000ee4:	240042e8 	.word	0x240042e8
 8000ee8:	0800d914 	.word	0x0800d914
 8000eec:	08000ef9 	.word	0x08000ef9
 8000ef0:	0800d920 	.word	0x0800d920
 8000ef4:	08000f61 	.word	0x08000f61

08000ef8 <vTerminal>:

void vTerminal(void  * argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
uint8_t i;
uint8_t voltage[10] = "0.000 V\n\r";
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <vTerminal+0x5c>)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f08:	c303      	stmia	r3!, {r0, r1}
 8000f0a:	801a      	strh	r2, [r3, #0]
uint16_t tmp =0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	817b      	strh	r3, [r7, #10]

  for(;;)
  {

	if(xQueueReceive(Term_Queue,&tmp,0) == pdTRUE){
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <vTerminal+0x60>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f107 010a 	add.w	r1, r7, #10
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00a fb68 	bl	800b5f0 <xQueueReceive>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d111      	bne.n	8000f4a <vTerminal+0x52>
			tmp = 256*tmp/100/4096;
 8000f26:	897b      	ldrh	r3, [r7, #10]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <vTerminal+0x64>)
 8000f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2e:	1252      	asrs	r2, r2, #9
 8000f30:	17db      	asrs	r3, r3, #31
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	817b      	strh	r3, [r7, #10]
			for(i =4;i<0;i--){
 8000f38:	2304      	movs	r3, #4
 8000f3a:	75fb      	strb	r3, [r7, #23]
 8000f3c:	bf00      	nop
			if(i ==1 ) continue;
			voltage[i] = '0' + tmp%10;
			tmp/=10;
		}

	CDC_Transmit_HS((uint8_t*)voltage,9);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2109      	movs	r1, #9
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c f80b 	bl	800cf60 <CDC_Transmit_HS>
  }
	vTaskDelay(100/portTICK_RATE_MS);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f00a ff18 	bl	800bd80 <vTaskDelay>
	if(xQueueReceive(Term_Queue,&tmp,0) == pdTRUE){
 8000f50:	e7de      	b.n	8000f10 <vTerminal+0x18>
 8000f52:	bf00      	nop
 8000f54:	0800d924 	.word	0x0800d924
 8000f58:	240042e4 	.word	0x240042e4
 8000f5c:	51eb851f 	.word	0x51eb851f

08000f60 <vADC>:
  }
}

void vADC(void  * argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

	uint16_t result;
	uint8_t instr;
	uint8_t zmiana_ADC = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
	uint8_t continous = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
	uint8_t currentADC = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	737b      	strb	r3, [r7, #13]
	HAL_ADC_Start((ADC_HandleTypeDef *) AvailableADC[currentADC-1]);
 8000f74:	7b7b      	ldrb	r3, [r7, #13]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a66      	ldr	r2, [pc, #408]	; (8001114 <vADC+0x1b4>)
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fe66 	bl	8001c50 <HAL_ADC_Start>

  for(;;)
  {

	if( xQueueReceive(ADC_Queue,&instr,1) == pdTRUE || 1){
 8000f84:	4b64      	ldr	r3, [pc, #400]	; (8001118 <vADC+0x1b8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f107 0109 	add.w	r1, r7, #9
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a fb2e 	bl	800b5f0 <xQueueReceive>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000f94:	4861      	ldr	r0, [pc, #388]	; (800111c <vADC+0x1bc>)
 8000f96:	f006 fda9 	bl	8007aec <HAL_TIM_Base_Stop_IT>
		instr = 'c';
 8000f9a:	2363      	movs	r3, #99	; 0x63
 8000f9c:	727b      	strb	r3, [r7, #9]
		continous = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73bb      	strb	r3, [r7, #14]
		switch (instr){
 8000fa2:	7a7b      	ldrb	r3, [r7, #9]
 8000fa4:	2b73      	cmp	r3, #115	; 0x73
 8000fa6:	d061      	beq.n	800106c <vADC+0x10c>
 8000fa8:	2b73      	cmp	r3, #115	; 0x73
 8000faa:	f300 808e 	bgt.w	80010ca <vADC+0x16a>
 8000fae:	2b69      	cmp	r3, #105	; 0x69
 8000fb0:	d070      	beq.n	8001094 <vADC+0x134>
 8000fb2:	2b69      	cmp	r3, #105	; 0x69
 8000fb4:	f300 8089 	bgt.w	80010ca <vADC+0x16a>
 8000fb8:	2b53      	cmp	r3, #83	; 0x53
 8000fba:	dc4f      	bgt.n	800105c <vADC+0xfc>
 8000fbc:	2b31      	cmp	r3, #49	; 0x31
 8000fbe:	f2c0 8084 	blt.w	80010ca <vADC+0x16a>
 8000fc2:	3b31      	subs	r3, #49	; 0x31
 8000fc4:	2b22      	cmp	r3, #34	; 0x22
 8000fc6:	f200 8080 	bhi.w	80010ca <vADC+0x16a>
 8000fca:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <vADC+0x70>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	0800109b 	.word	0x0800109b
 8000fd4:	0800109b 	.word	0x0800109b
 8000fd8:	0800109b 	.word	0x0800109b
 8000fdc:	080010cb 	.word	0x080010cb
 8000fe0:	080010cb 	.word	0x080010cb
 8000fe4:	080010cb 	.word	0x080010cb
 8000fe8:	080010cb 	.word	0x080010cb
 8000fec:	080010cb 	.word	0x080010cb
 8000ff0:	080010cb 	.word	0x080010cb
 8000ff4:	080010cb 	.word	0x080010cb
 8000ff8:	080010cb 	.word	0x080010cb
 8000ffc:	080010cb 	.word	0x080010cb
 8001000:	080010cb 	.word	0x080010cb
 8001004:	080010cb 	.word	0x080010cb
 8001008:	080010cb 	.word	0x080010cb
 800100c:	080010cb 	.word	0x080010cb
 8001010:	080010cb 	.word	0x080010cb
 8001014:	080010cb 	.word	0x080010cb
 8001018:	08001061 	.word	0x08001061
 800101c:	080010cb 	.word	0x080010cb
 8001020:	080010cb 	.word	0x080010cb
 8001024:	080010cb 	.word	0x080010cb
 8001028:	080010cb 	.word	0x080010cb
 800102c:	080010cb 	.word	0x080010cb
 8001030:	08001095 	.word	0x08001095
 8001034:	080010cb 	.word	0x080010cb
 8001038:	080010cb 	.word	0x080010cb
 800103c:	080010cb 	.word	0x080010cb
 8001040:	080010cb 	.word	0x080010cb
 8001044:	080010cb 	.word	0x080010cb
 8001048:	080010cb 	.word	0x080010cb
 800104c:	080010cb 	.word	0x080010cb
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010cb 	.word	0x080010cb
 8001058:	0800106d 	.word	0x0800106d
 800105c:	2b63      	cmp	r3, #99	; 0x63
 800105e:	d134      	bne.n	80010ca <vADC+0x16a>
			case 'C':
			case 'c':{
				HAL_TIM_Base_Start_IT(&htim6);
 8001060:	482e      	ldr	r0, [pc, #184]	; (800111c <vADC+0x1bc>)
 8001062:	f006 fcbd 	bl	80079e0 <HAL_TIM_Base_Start_IT>
				continous = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	73bb      	strb	r3, [r7, #14]
				break;
 800106a:	e02f      	b.n	80010cc <vADC+0x16c>
			}
			case 'S':
			case 's':{
				result = HAL_ADC_GetValue((ADC_HandleTypeDef *) AvailableADC[currentADC-1]);
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	3b01      	subs	r3, #1
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <vADC+0x1b4>)
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fee8 	bl	8001e4c <HAL_ADC_GetValue>
 800107c:	4603      	mov	r3, r0
 800107e:	b29b      	uxth	r3, r3
 8001080:	817b      	strh	r3, [r7, #10]
				xQueueSendToFront(Term_Queue, &result,5);
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <vADC+0x1c0>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	f107 010a 	add.w	r1, r7, #10
 800108a:	2301      	movs	r3, #1
 800108c:	2205      	movs	r2, #5
 800108e:	f00a f9c9 	bl	800b424 <xQueueGenericSend>
				break;
 8001092:	e01b      	b.n	80010cc <vADC+0x16c>
			}
			case 'I':
			case 'i':{
				zmiana_ADC = 1;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
				break;
 8001098:	e018      	b.n	80010cc <vADC+0x16c>
			}
			case '1':
			case '2':
			case '3':{
				if (zmiana_ADC == 1){
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d114      	bne.n	80010ca <vADC+0x16a>
					HAL_ADC_Stop((ADC_HandleTypeDef *) AvailableADC[currentADC-1]);
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <vADC+0x1b4>)
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fe9a 	bl	8001de4 <HAL_ADC_Stop>
					zmiana_ADC = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
					currentADC = instr - '0';
 80010b4:	7a7b      	ldrb	r3, [r7, #9]
 80010b6:	3b30      	subs	r3, #48	; 0x30
 80010b8:	737b      	strb	r3, [r7, #13]
					HAL_ADC_Start((ADC_HandleTypeDef *) AvailableADC[currentADC-1]);
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <vADC+0x1b4>)
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fdc3 	bl	8001c50 <HAL_ADC_Start>
				}
			}
			default:{
				break;
 80010ca:	bf00      	nop
			}
		}
	}

	if(continous == 1 && xSemaphoreTake(Delay_Sem,0) == pdTRUE){
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d11b      	bne.n	800110a <vADC+0x1aa>
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <vADC+0x1c4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00a fb51 	bl	800b780 <xQueueSemaphoreTake>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d112      	bne.n	800110a <vADC+0x1aa>
		result = HAL_ADC_GetValue((ADC_HandleTypeDef *) AvailableADC[currentADC-1]);
 80010e4:	7b7b      	ldrb	r3, [r7, #13]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <vADC+0x1b4>)
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 feac 	bl	8001e4c <HAL_ADC_GetValue>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	817b      	strh	r3, [r7, #10]
		xQueueSendToBack(Term_Queue, &result,5);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <vADC+0x1c0>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f107 010a 	add.w	r1, r7, #10
 8001102:	2300      	movs	r3, #0
 8001104:	2205      	movs	r2, #5
 8001106:	f00a f98d 	bl	800b424 <xQueueGenericSend>
		}
	vTaskDelay(10/portTICK_RATE_MS);
 800110a:	200a      	movs	r0, #10
 800110c:	f00a fe38 	bl	800bd80 <vTaskDelay>
	if( xQueueReceive(ADC_Queue,&instr,1) == pdTRUE || 1){
 8001110:	e738      	b.n	8000f84 <vADC+0x24>
 8001112:	bf00      	nop
 8001114:	0800d990 	.word	0x0800d990
 8001118:	240042e8 	.word	0x240042e8
 800111c:	24004248 	.word	0x24004248
 8001120:	240042e4 	.word	0x240042e4
 8001124:	240042e0 	.word	0x240042e0

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f7ff fe28 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f00c fb87 	bl	800d868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff f8d9 	bl	8000310 <main>
  bx  lr
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001168:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800116c:	0800da04 	.word	0x0800da04
  ldr r2, =_sbss
 8001170:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8001174:	24005bc8 	.word	0x24005bc8

08001178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC3_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f001 ffe3 	bl	800314e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001188:	f004 f93e 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	4913      	ldr	r1, [pc, #76]	; (80011e8 <HAL_Init+0x6c>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_Init+0x68>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_Init+0x6c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_Init+0x70>)
 80011be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	200f      	movs	r0, #15
 80011c8:	f7ff fd32 	bl	8000c30 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e002      	b.n	80011dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fc2b 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58024400 	.word	0x58024400
 80011e8:	0800d980 	.word	0x0800d980
 80011ec:	24000004 	.word	0x24000004
 80011f0:	24000000 	.word	0x24000000

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2400000c 	.word	0x2400000c
 8001218:	240042ec 	.word	0x240042ec

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	240042ec 	.word	0x240042ec

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c

0800127c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	58000400 	.word	0x58000400

080012a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3360      	adds	r3, #96	; 0x60
 8001322:	461a      	mov	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <LL_ADC_SetOffset+0x60>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d10b      	bne.n	800134c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800134a:	e00b      	b.n	8001364 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	430b      	orrs	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58026000 	.word	0x58026000

08001374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3360      	adds	r3, #96	; 0x60
 8001382:	461a      	mov	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	611a      	str	r2, [r3, #16]
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00e      	beq.n	8001406 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3360      	adds	r3, #96	; 0x60
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	431a      	orrs	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	601a      	str	r2, [r3, #0]
  }
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	58026000 	.word	0x58026000

08001418 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001418:	b480      	push	{r7}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <LL_ADC_SetOffsetSaturation+0x40>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d10e      	bne.n	800144a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	58026000 	.word	0x58026000

0800145c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <LL_ADC_SetOffsetSign+0x40>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d10e      	bne.n	800148e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3360      	adds	r3, #96	; 0x60
 8001474:	461a      	mov	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	58026000 	.word	0x58026000

080014a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3360      	adds	r3, #96	; 0x60
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <LL_ADC_SetOffsetState+0x50>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d108      	bne.n	80014d4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80014d2:	e007      	b.n	80014e4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	431a      	orrs	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58026000 	.word	0x58026000

080014f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3330      	adds	r3, #48	; 0x30
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	211f      	movs	r1, #31
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 011f 	and.w	r1, r3, #31
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3314      	adds	r3, #20
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0e5b      	lsrs	r3, r3, #25
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0d1b      	lsrs	r3, r3, #20
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2107      	movs	r1, #7
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0d1b      	lsrs	r3, r3, #20
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <LL_ADC_SetChannelSingleDiff+0x78>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d115      	bne.n	80015e4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015c4:	43db      	mvns	r3, r3
 80015c6:	401a      	ands	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0318 	and.w	r3, r3, #24
 80015ce:	4914      	ldr	r1, [pc, #80]	; (8001620 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015d0:	40d9      	lsrs	r1, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	400b      	ands	r3, r1
 80015d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015da:	431a      	orrs	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015e2:	e014      	b.n	800160e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0318 	and.w	r3, r3, #24
 80015fa:	4909      	ldr	r1, [pc, #36]	; (8001620 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80015fc:	40d9      	lsrs	r1, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	400b      	ands	r3, r1
 8001602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001606:	431a      	orrs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	58026000 	.word	0x58026000
 8001620:	000fffff 	.word	0x000fffff

08001624 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 031f 	and.w	r3, r3, #31
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <LL_ADC_DisableDeepPowerDown+0x20>)
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6093      	str	r3, [r2, #8]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	5fffffc0 	.word	0x5fffffc0

08001664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800169a:	4013      	ands	r3, r2
 800169c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	6fffffc0 	.word	0x6fffffc0

080016b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <LL_ADC_Enable+0x24>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	7fffffc0 	.word	0x7fffffc0

08001704 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <LL_ADC_Disable+0x24>)
 8001712:	4013      	ands	r3, r2
 8001714:	f043 0202 	orr.w	r2, r3, #2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	7fffffc0 	.word	0x7fffffc0

0800172c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <LL_ADC_IsEnabled+0x18>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <LL_ADC_IsEnabled+0x1a>
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d101      	bne.n	800176a <LL_ADC_IsDisableOngoing+0x18>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsDisableOngoing+0x1a>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_REG_StartConversion+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 0204 	orr.w	r2, r3, #4
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LL_ADC_REG_StopConversion+0x24>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	7fffffc0 	.word	0x7fffffc0

080017c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d101      	bne.n	80017e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_ADC_INJ_StopConversion+0x24>)
 80017fe:	4013      	ands	r3, r2
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	7fffffc0 	.word	0x7fffffc0

08001818 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b08      	cmp	r3, #8
 800182a:	d101      	bne.n	8001830 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1ee      	b.n	8001c38 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	2b00      	cmp	r3, #0
 8001866:	d109      	bne.n	800187c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff f8ff 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff feef 	bl	8001664 <LL_ADC_IsDeepPowerDownEnabled>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fed5 	bl	8001640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff0a 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d114      	bne.n	80018d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff feee 	bl	800168c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b0:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_ADC_Init+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	4a8e      	ldr	r2, [pc, #568]	; (8001af0 <HAL_ADC_Init+0x2b0>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	099b      	lsrs	r3, r3, #6
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c2:	e002      	b.n	80018ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f9      	bne.n	80018c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff feed 	bl	80016b4 <LL_ADC_IsInternalRegulatorEnabled>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10d      	bne.n	80018fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	f043 0210 	orr.w	r2, r3, #16
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff61 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001906:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 8188 	bne.w	8001c26 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 8184 	bne.w	8001c26 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fefa 	bl	800172c <LL_ADC_IsEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d136      	bne.n	80019ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6c      	ldr	r2, [pc, #432]	; (8001af4 <HAL_ADC_Init+0x2b4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_ADC_Init+0x112>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_ADC_Init+0x2b8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10e      	bne.n	8001970 <HAL_ADC_Init+0x130>
 8001952:	4868      	ldr	r0, [pc, #416]	; (8001af4 <HAL_ADC_Init+0x2b4>)
 8001954:	f7ff feea 	bl	800172c <LL_ADC_IsEnabled>
 8001958:	4604      	mov	r4, r0
 800195a:	4867      	ldr	r0, [pc, #412]	; (8001af8 <HAL_ADC_Init+0x2b8>)
 800195c:	f7ff fee6 	bl	800172c <LL_ADC_IsEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	4323      	orrs	r3, r4
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e008      	b.n	8001982 <HAL_ADC_Init+0x142>
 8001970:	4862      	ldr	r0, [pc, #392]	; (8001afc <HAL_ADC_Init+0x2bc>)
 8001972:	f7ff fedb 	bl	800172c <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_ADC_Init+0x2b4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d004      	beq.n	800199a <HAL_ADC_Init+0x15a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_ADC_Init+0x2b8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x15e>
 800199a:	4a59      	ldr	r2, [pc, #356]	; (8001b00 <HAL_ADC_Init+0x2c0>)
 800199c:	e000      	b.n	80019a0 <HAL_ADC_Init+0x160>
 800199e:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <HAL_ADC_Init+0x2c4>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4610      	mov	r0, r2
 80019a8:	f7ff fc7e 	bl	80012a8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_ADC_Init+0x2bc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d129      	bne.n	8001a0a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80019c0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80019c6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d013      	beq.n	80019f8 <HAL_ADC_Init+0x1b8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d00d      	beq.n	80019f4 <HAL_ADC_Init+0x1b4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b1c      	cmp	r3, #28
 80019de:	d007      	beq.n	80019f0 <HAL_ADC_Init+0x1b0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b18      	cmp	r3, #24
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_Init+0x1ac>
 80019e8:	2318      	movs	r3, #24
 80019ea:	e006      	b.n	80019fa <HAL_ADC_Init+0x1ba>
 80019ec:	2300      	movs	r3, #0
 80019ee:	e004      	b.n	80019fa <HAL_ADC_Init+0x1ba>
 80019f0:	2310      	movs	r3, #16
 80019f2:	e002      	b.n	80019fa <HAL_ADC_Init+0x1ba>
 80019f4:	2308      	movs	r3, #8
 80019f6:	e000      	b.n	80019fa <HAL_ADC_Init+0x1ba>
 80019f8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80019fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	e00e      	b.n	8001a28 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7e5b      	ldrb	r3, [r3, #25]
 8001a0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d106      	bne.n	8001a40 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	3b01      	subs	r3, #1
 8001a38:	045b      	lsls	r3, r3, #17
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_ADC_Init+0x2bc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d115      	bne.n	8001a92 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_ADC_Init+0x2c8>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	69b9      	ldr	r1, [r7, #24]
 8001a76:	430b      	orrs	r3, r1
 8001a78:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	e009      	b.n	8001aa6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_ADC_Init+0x2cc>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe8c 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001ab0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff feae 	bl	8001818 <LL_ADC_INJ_IsConversionOngoing>
 8001abc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 808e 	bne.w	8001be2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 808a 	bne.w	8001be2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_ADC_Init+0x2bc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d11b      	bne.n	8001b10 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	e018      	b.n	8001b1e <HAL_ADC_Init+0x2de>
 8001aec:	24000000 	.word	0x24000000
 8001af0:	053e2d63 	.word	0x053e2d63
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40022100 	.word	0x40022100
 8001afc:	58026000 	.word	0x58026000
 8001b00:	40022300 	.word	0x40022300
 8001b04:	58026300 	.word	0x58026300
 8001b08:	fff04007 	.word	0xfff04007
 8001b0c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_ADC_Init+0x400>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	69b9      	ldr	r1, [r7, #24]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d137      	bne.n	8001bac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_ADC_Init+0x404>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d116      	bne.n	8001b7a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <HAL_ADC_Init+0x408>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	e020      	b.n	8001bbc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_ADC_Init+0x40c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0411      	lsls	r1, r2, #16
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	e007      	b.n	8001bbc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_ADC_Init+0x404>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d002      	beq.n	8001be2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f815 	bl	8002c0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10c      	bne.n	8001c04 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f023 010f 	bic.w	r1, r3, #15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
 8001c02:	e007      	b.n	8001c14 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020f 	bic.w	r2, r2, #15
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c18:	f023 0303 	bic.w	r3, r3, #3
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
 8001c24:	e007      	b.n	8001c36 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	f043 0210 	orr.w	r2, r3, #16
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3724      	adds	r7, #36	; 0x24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	ffffbffc 	.word	0xffffbffc
 8001c44:	58026000 	.word	0x58026000
 8001c48:	fc00f81f 	.word	0xfc00f81f
 8001c4c:	fc00f81e 	.word	0xfc00f81e

08001c50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <HAL_ADC_Start+0x180>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_ADC_Start+0x1c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a5b      	ldr	r2, [pc, #364]	; (8001dd4 <HAL_ADC_Start+0x184>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_Start+0x20>
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_ADC_Start+0x188>)
 8001c6e:	e000      	b.n	8001c72 <HAL_ADC_Start+0x22>
 8001c70:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_ADC_Start+0x18c>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fcd6 	bl	8001624 <LL_ADC_GetMultimode>
 8001c78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fda2 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 809a 	bne.w	8001dc0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Start+0x4a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e095      	b.n	8001dc6 <HAL_ADC_Start+0x176>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fec8 	bl	8002a38 <ADC_Enable>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8081 	bne.w	8001db6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_ADC_Start+0x190>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_ADC_Start+0x184>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d002      	beq.n	8001cd4 <HAL_ADC_Start+0x84>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e000      	b.n	8001cd6 <HAL_ADC_Start+0x86>
 8001cd4:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_ADC_Start+0x180>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d02:	f023 0206 	bic.w	r2, r3, #6
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	665a      	str	r2, [r3, #100]	; 0x64
 8001d0a:	e002      	b.n	8001d12 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	221c      	movs	r2, #28
 8001d18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2b      	ldr	r2, [pc, #172]	; (8001dd4 <HAL_ADC_Start+0x184>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_Start+0xe2>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_Start+0xe4>
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_ADC_Start+0x180>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d008      	beq.n	8001d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d002      	beq.n	8001d4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	d114      	bne.n	8001d78 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd01 	bl	8001778 <LL_ADC_REG_StartConversion>
 8001d76:	e025      	b.n	8001dc4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_ADC_Start+0x184>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d002      	beq.n	8001d94 <HAL_ADC_Start+0x144>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_Start+0x146>
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_ADC_Start+0x180>)
 8001d96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	661a      	str	r2, [r3, #96]	; 0x60
 8001db4:	e006      	b.n	8001dc4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001dbe:	e001      	b.n	8001dc4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022100 	.word	0x40022100
 8001dd8:	40022300 	.word	0x40022300
 8001ddc:	58026300 	.word	0x58026300
 8001de0:	fffff0fe 	.word	0xfffff0fe

08001de4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Stop+0x16>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e021      	b.n	8001e3e <HAL_ADC_Stop+0x5a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e02:	2103      	movs	r1, #3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fd5b 	bl	80028c0 <ADC_ConversionStop>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fe99 	bl	8002b4c <ADC_Disable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_ADC_Stop+0x64>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	ffffeefe 	.word	0xffffeefe

08001e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0b9      	sub	sp, #228	; 0xe4
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e82:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4ab3      	ldr	r2, [pc, #716]	; (8002158 <HAL_ADC_ConfigChannel+0x2f0>)
 8001e8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x34>
 8001e96:	2302      	movs	r3, #2
 8001e98:	f000 bcfa 	b.w	8002890 <HAL_ADC_ConfigChannel+0xa28>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fc8d 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 84de 	bne.w	8002872 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4aa8      	ldr	r2, [pc, #672]	; (800215c <HAL_ADC_ConfigChannel+0x2f4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d033      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x76>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	e01d      	b.n	8001f1a <HAL_ADC_ConfigChannel+0xb2>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ef2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001efa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8001f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2201      	movs	r2, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	69d1      	ldr	r1, [r2, #28]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff fadd 	bl	80014f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fc42 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 8001f44:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fc63 	bl	8001818 <LL_ADC_INJ_IsConversionOngoing>
 8001f52:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 8270 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 826b 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fae8 	bl	800154c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a76      	ldr	r2, [pc, #472]	; (800215c <HAL_ADC_ConfigChannel+0x2f4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10d      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fa0:	e032      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_ADC_ConfigChannel+0x2f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fae:	d10b      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x160>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	e01d      	b.n	8002004 <HAL_ADC_ConfigChannel+0x19c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10b      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x186>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	e00a      	b.n	8002004 <HAL_ADC_ConfigChannel+0x19c>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d048      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6919      	ldr	r1, [r3, #16]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002020:	f7ff f976 	bl	8001310 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_ADC_ConfigChannel+0x2f4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d119      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6919      	ldr	r1, [r3, #16]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	461a      	mov	r2, r3
 800203c:	f7ff fa0e 	bl	800145c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6919      	ldr	r1, [r3, #16]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d102      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x1f0>
 8002052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002056:	e000      	b.n	800205a <HAL_ADC_ConfigChannel+0x1f2>
 8002058:	2300      	movs	r3, #0
 800205a:	461a      	mov	r2, r3
 800205c:	f7ff f9dc 	bl	8001418 <LL_ADC_SetOffsetSaturation>
 8002060:	e1ee      	b.n	8002440 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002070:	2b01      	cmp	r3, #1
 8002072:	d102      	bne.n	800207a <HAL_ADC_ConfigChannel+0x212>
 8002074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002078:	e000      	b.n	800207c <HAL_ADC_ConfigChannel+0x214>
 800207a:	2300      	movs	r3, #0
 800207c:	461a      	mov	r2, r3
 800207e:	f7ff f9a9 	bl	80013d4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	7e1b      	ldrb	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x230>
 8002092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002096:	e000      	b.n	800209a <HAL_ADC_ConfigChannel+0x232>
 8002098:	2300      	movs	r3, #0
 800209a:	461a      	mov	r2, r3
 800209c:	f7ff f980 	bl	80013a0 <LL_ADC_SetDataRightShift>
 80020a0:	e1ce      	b.n	8002440 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_ADC_ConfigChannel+0x2f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f040 8181 	bne.w	80023b0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f95d 	bl	8001374 <LL_ADC_GetOffsetChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_ADC_ConfigChannel+0x272>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f952 	bl	8001374 <LL_ADC_GetOffsetChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	0e9b      	lsrs	r3, r3, #26
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	e01e      	b.n	8002118 <HAL_ADC_ConfigChannel+0x2b0>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f947 	bl	8001374 <LL_ADC_GetOffsetChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80020f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002100:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e004      	b.n	8002116 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800210c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x2c8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	e01e      	b.n	800216e <HAL_ADC_ConfigChannel+0x306>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800214c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e00a      	b.n	800216e <HAL_ADC_ConfigChannel+0x306>
 8002158:	47ff0000 	.word	0x47ff0000
 800215c:	58026000 	.word	0x58026000
 8002160:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	429a      	cmp	r2, r3
 8002170:	d106      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f990 	bl	80014a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f8f4 	bl	8001374 <LL_ADC_GetOffsetChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x344>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2101      	movs	r1, #1
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f8e9 	bl	8001374 <LL_ADC_GetOffsetChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	e01e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x382>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8de 	bl	8001374 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80021ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e004      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80021de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x39a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	e018      	b.n	8002234 <HAL_ADC_ConfigChannel+0x3cc>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800221a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800221e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e004      	b.n	8002234 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800222a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	429a      	cmp	r2, r3
 8002236:	d106      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f92d 	bl	80014a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2102      	movs	r1, #2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f891 	bl	8001374 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x40a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f886 	bl	8001374 <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	0e9b      	lsrs	r3, r3, #26
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	e01e      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x448>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2102      	movs	r1, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f87b 	bl	8001374 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80022a0:	2320      	movs	r3, #32
 80022a2:	e004      	b.n	80022ae <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80022a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x460>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	e014      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x48a>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80022d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80022dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e004      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80022e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f8ce 	bl	80014a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2103      	movs	r1, #3
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff f832 	bl	8001374 <LL_ADC_GetOffsetChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x4c8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2103      	movs	r1, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f827 	bl	8001374 <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x4f8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2103      	movs	r1, #3
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f81c 	bl	8001374 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800234c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x510>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	e011      	b.n	800239c <HAL_ADC_ConfigChannel+0x534>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800238a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	429a      	cmp	r2, r3
 800239e:	d14f      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2103      	movs	r1, #3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f879 	bl	80014a0 <LL_ADC_SetOffsetState>
 80023ae:	e047      	b.n	8002440 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	069b      	lsls	r3, r3, #26
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d107      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	069b      	lsls	r3, r3, #26
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023f6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	429a      	cmp	r2, r3
 800240a:	d107      	bne.n	800241c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002422:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800243e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f971 	bl	800172c <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8219 	bne.w	8002884 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff f8a0 	bl	80015a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4aa1      	ldr	r2, [pc, #644]	; (80026f0 <HAL_ADC_ConfigChannel+0x888>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 812e 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x630>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b09      	cmp	r3, #9
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e019      	b.n	80024cc <HAL_ADC_ConfigChannel+0x664>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	bf94      	ite	ls
 80024c6:	2301      	movls	r3, #1
 80024c8:	2300      	movhi	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d079      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x684>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	e015      	b.n	8002518 <HAL_ADC_ConfigChannel+0x6b0>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x6d0>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x700>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800254a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x726>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	051b      	lsls	r3, r3, #20
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x758>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	430b      	orrs	r3, r1
 80025c2:	e07e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x778>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x7a4>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x7c4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x7f4>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61bb      	str	r3, [r7, #24]
  return result;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x820>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	3b1e      	subs	r3, #30
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002686:	e01b      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x858>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	60fb      	str	r3, [r7, #12]
  return result;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	051b      	lsls	r3, r3, #20
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	430b      	orrs	r3, r1
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe ff40 	bl	800154c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f280 80d7 	bge.w	8002884 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_ADC_ConfigChannel+0x88c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_ADC_ConfigChannel+0x882>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_ADC_ConfigChannel+0x890>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10a      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x898>
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_ADC_ConfigChannel+0x894>)
 80026ec:	e009      	b.n	8002702 <HAL_ADC_ConfigChannel+0x89a>
 80026ee:	bf00      	nop
 80026f0:	47ff0000 	.word	0x47ff0000
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40022100 	.word	0x40022100
 80026fc:	40022300 	.word	0x40022300
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_ADC_ConfigChannel+0xa30>)
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fdf6 	bl	80012f4 <LL_ADC_GetCommonPathInternalCh>
 8002708:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a62      	ldr	r2, [pc, #392]	; (800289c <HAL_ADC_ConfigChannel+0xa34>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a61      	ldr	r2, [pc, #388]	; (80028a0 <HAL_ADC_ConfigChannel+0xa38>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10e      	bne.n	800273e <HAL_ADC_ConfigChannel+0x8d6>
 8002720:	485e      	ldr	r0, [pc, #376]	; (800289c <HAL_ADC_ConfigChannel+0xa34>)
 8002722:	f7ff f803 	bl	800172c <LL_ADC_IsEnabled>
 8002726:	4604      	mov	r4, r0
 8002728:	485d      	ldr	r0, [pc, #372]	; (80028a0 <HAL_ADC_ConfigChannel+0xa38>)
 800272a:	f7fe ffff 	bl	800172c <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	4323      	orrs	r3, r4
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	e008      	b.n	8002750 <HAL_ADC_ConfigChannel+0x8e8>
 800273e:	4859      	ldr	r0, [pc, #356]	; (80028a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8002740:	f7fe fff4 	bl	800172c <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8084 	beq.w	800285e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_ADC_ConfigChannel+0xa40>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d132      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x95e>
 8002760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d12c      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	f040 8086 	bne.w	8002884 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a47      	ldr	r2, [pc, #284]	; (800289c <HAL_ADC_ConfigChannel+0xa34>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x924>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a46      	ldr	r2, [pc, #280]	; (80028a0 <HAL_ADC_ConfigChannel+0xa38>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x928>
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <HAL_ADC_ConfigChannel+0xa44>)
 800278e:	e000      	b.n	8002792 <HAL_ADC_ConfigChannel+0x92a>
 8002790:	4a41      	ldr	r2, [pc, #260]	; (8002898 <HAL_ADC_ConfigChannel+0xa30>)
 8002792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fe fd96 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_ADC_ConfigChannel+0xa48>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_ADC_ConfigChannel+0xa4c>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	3301      	adds	r3, #1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b6:	e002      	b.n	80027be <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f9      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027c4:	e05e      	b.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <HAL_ADC_ConfigChannel+0xa50>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d120      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x9aa>
 80027d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11a      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_ADC_ConfigChannel+0xa3c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d14e      	bne.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2c      	ldr	r2, [pc, #176]	; (800289c <HAL_ADC_ConfigChannel+0xa34>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_ADC_ConfigChannel+0x992>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_ADC_ConfigChannel+0xa38>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x996>
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <HAL_ADC_ConfigChannel+0xa44>)
 80027fc:	e000      	b.n	8002800 <HAL_ADC_ConfigChannel+0x998>
 80027fe:	4a26      	ldr	r2, [pc, #152]	; (8002898 <HAL_ADC_ConfigChannel+0xa30>)
 8002800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7fe fd5f 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002810:	e038      	b.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a29      	ldr	r2, [pc, #164]	; (80028bc <HAL_ADC_ConfigChannel+0xa54>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d133      	bne.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
 800281c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12d      	bne.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_ADC_ConfigChannel+0xa3c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d128      	bne.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_ADC_ConfigChannel+0xa34>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x9de>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_ADC_ConfigChannel+0xa38>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x9e2>
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_ADC_ConfigChannel+0xa44>)
 8002848:	e000      	b.n	800284c <HAL_ADC_ConfigChannel+0x9e4>
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_ADC_ConfigChannel+0xa30>)
 800284c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f7fe fd39 	bl	80012ce <LL_ADC_SetCommonPathInternalCh>
 800285c:	e012      	b.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002870:	e008      	b.n	8002884 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800288c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002890:	4618      	mov	r0, r3
 8002892:	37e4      	adds	r7, #228	; 0xe4
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	58026300 	.word	0x58026300
 800289c:	40022000 	.word	0x40022000
 80028a0:	40022100 	.word	0x40022100
 80028a4:	58026000 	.word	0x58026000
 80028a8:	c7520000 	.word	0xc7520000
 80028ac:	40022300 	.word	0x40022300
 80028b0:	24000000 	.word	0x24000000
 80028b4:	053e2d63 	.word	0x053e2d63
 80028b8:	c3210000 	.word	0xc3210000
 80028bc:	cb840000 	.word	0xcb840000

080028c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe ff76 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe ff98 	bl	8001818 <LL_ADC_INJ_IsConversionOngoing>
 80028e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d103      	bne.n	80028f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8098 	beq.w	8002a28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02a      	beq.n	800295c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e5b      	ldrb	r3, [r3, #25]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d126      	bne.n	800295c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e1b      	ldrb	r3, [r3, #24]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d122      	bne.n	800295c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800291a:	e014      	b.n	8002946 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <ADC_ConversionStop+0x174>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d90d      	bls.n	8002940 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	f043 0210 	orr.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e074      	b.n	8002a2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	3301      	adds	r3, #1
 8002944:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d1e3      	bne.n	800291c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d014      	beq.n	800298c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe ff2e 	bl	80017c8 <LL_ADC_REG_IsConversionOngoing>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe feeb 	bl	8001752 <LL_ADC_IsDisableOngoing>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ff0a 	bl	80017a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d014      	beq.n	80029bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe ff3e 	bl	8001818 <LL_ADC_INJ_IsConversionOngoing>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fed3 	bl	8001752 <LL_ADC_IsDisableOngoing>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe ff1a 	bl	80017f0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d005      	beq.n	80029ce <ADC_ConversionStop+0x10e>
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d105      	bne.n	80029d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029c8:	230c      	movs	r3, #12
 80029ca:	617b      	str	r3, [r7, #20]
        break;
 80029cc:	e005      	b.n	80029da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80029ce:	2308      	movs	r3, #8
 80029d0:	617b      	str	r3, [r7, #20]
        break;
 80029d2:	e002      	b.n	80029da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80029d4:	2304      	movs	r3, #4
 80029d6:	617b      	str	r3, [r7, #20]
        break;
 80029d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80029da:	f7fe fc1f 	bl	800121c <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029e0:	e01b      	b.n	8002a1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80029e2:	f7fe fc1b 	bl	800121c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d914      	bls.n	8002a1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1dc      	bne.n	80029e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	000cdbff 	.word	0x000cdbff

08002a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fe71 	bl	800172c <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d16e      	bne.n	8002b2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <ADC_Enable+0x100>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00d      	beq.n	8002a7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a62:	f043 0210 	orr.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e05a      	b.n	8002b30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fe2c 	bl	80016dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fbca 	bl	800121c <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <ADC_Enable+0x104>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <ADC_Enable+0x66>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <ADC_Enable+0x108>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <ADC_Enable+0x6a>
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <ADC_Enable+0x10c>)
 8002aa0:	e000      	b.n	8002aa4 <ADC_Enable+0x6c>
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <ADC_Enable+0x110>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fdbd 	bl	8001624 <LL_ADC_GetMultimode>
 8002aaa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <ADC_Enable+0x108>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d002      	beq.n	8002abc <ADC_Enable+0x84>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e000      	b.n	8002abe <ADC_Enable+0x86>
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <ADC_Enable+0x104>)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02c      	beq.n	8002b20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d130      	bne.n	8002b2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002acc:	e028      	b.n	8002b20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fe2a 	bl	800172c <LL_ADC_IsEnabled>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fdfa 	bl	80016dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ae8:	f7fe fb98 	bl	800121c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d914      	bls.n	8002b20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d00d      	beq.n	8002b20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d1cf      	bne.n	8002ace <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	8000003f 	.word	0x8000003f
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40022100 	.word	0x40022100
 8002b44:	40022300 	.word	0x40022300
 8002b48:	58026300 	.word	0x58026300

08002b4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fdfa 	bl	8001752 <LL_ADC_IsDisableOngoing>
 8002b5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fde1 	bl	800172c <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d047      	beq.n	8002c00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d144      	bne.n	8002c00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030d 	and.w	r3, r3, #13
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10c      	bne.n	8002b9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fdbb 	bl	8001704 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2203      	movs	r2, #3
 8002b94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b96:	f7fe fb41 	bl	800121c <HAL_GetTick>
 8002b9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b9c:	e029      	b.n	8002bf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e023      	b.n	8002c02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bba:	f7fe fb2f 	bl	800121c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d914      	bls.n	8002bf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1dc      	bne.n	8002bba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <ADC_ConfigureBoostMode+0x1bc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <ADC_ConfigureBoostMode+0x1c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6a      	ldr	r2, [pc, #424]	; (8002dcc <ADC_ConfigureBoostMode+0x1c0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d109      	bne.n	8002c3c <ADC_ConfigureBoostMode+0x30>
 8002c28:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <ADC_ConfigureBoostMode+0x1c4>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e008      	b.n	8002c4e <ADC_ConfigureBoostMode+0x42>
 8002c3c:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <ADC_ConfigureBoostMode+0x1c8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01c      	beq.n	8002c8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c52:	f002 fd53 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8002c56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c60:	d010      	beq.n	8002c84 <ADC_ConfigureBoostMode+0x78>
 8002c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c66:	d871      	bhi.n	8002d4c <ADC_ConfigureBoostMode+0x140>
 8002c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c6c:	d002      	beq.n	8002c74 <ADC_ConfigureBoostMode+0x68>
 8002c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c72:	d16b      	bne.n	8002d4c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	60fb      	str	r3, [r7, #12]
        break;
 8002c82:	e066      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	60fb      	str	r3, [r7, #12]
        break;
 8002c8a:	e062      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c90:	f003 fcb6 	bl	8006600 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c94:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c9e:	d051      	beq.n	8002d44 <ADC_ConfigureBoostMode+0x138>
 8002ca0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ca4:	d854      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002ca6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002caa:	d047      	beq.n	8002d3c <ADC_ConfigureBoostMode+0x130>
 8002cac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002cb0:	d84e      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cb2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cb6:	d03d      	beq.n	8002d34 <ADC_ConfigureBoostMode+0x128>
 8002cb8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cbc:	d848      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc2:	d033      	beq.n	8002d2c <ADC_ConfigureBoostMode+0x120>
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc8:	d842      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cce:	d029      	beq.n	8002d24 <ADC_ConfigureBoostMode+0x118>
 8002cd0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cd4:	d83c      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cd6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cda:	d01a      	beq.n	8002d12 <ADC_ConfigureBoostMode+0x106>
 8002cdc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ce0:	d836      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002ce2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ce6:	d014      	beq.n	8002d12 <ADC_ConfigureBoostMode+0x106>
 8002ce8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cec:	d830      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf2:	d00e      	beq.n	8002d12 <ADC_ConfigureBoostMode+0x106>
 8002cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cf8:	d82a      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002cfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cfe:	d008      	beq.n	8002d12 <ADC_ConfigureBoostMode+0x106>
 8002d00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d04:	d824      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0x144>
 8002d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0a:	d002      	beq.n	8002d12 <ADC_ConfigureBoostMode+0x106>
 8002d0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d10:	d11e      	bne.n	8002d50 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	60fb      	str	r3, [r7, #12]
        break;
 8002d22:	e016      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
        break;
 8002d2a:	e012      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	60fb      	str	r3, [r7, #12]
        break;
 8002d32:	e00e      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	60fb      	str	r3, [r7, #12]
        break;
 8002d3a:	e00a      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	09db      	lsrs	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
        break;
 8002d42:	e006      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	60fb      	str	r3, [r7, #12]
        break;
 8002d4a:	e002      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
        break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002d50:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <ADC_ConfigureBoostMode+0x1cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d808      	bhi.n	8002d72 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d6e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d70:	e025      	b.n	8002dbe <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <ADC_ConfigureBoostMode+0x1d0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d80a      	bhi.n	8002d90 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	e016      	b.n	8002dbe <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <ADC_ConfigureBoostMode+0x1d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d80a      	bhi.n	8002dae <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	e007      	b.n	8002dbe <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40022100 	.word	0x40022100
 8002dd0:	40022300 	.word	0x40022300
 8002dd4:	58026300 	.word	0x58026300
 8002dd8:	005f5e10 	.word	0x005f5e10
 8002ddc:	00bebc20 	.word	0x00bebc20
 8002de0:	017d7840 	.word	0x017d7840

08002de4 <LL_ADC_IsEnabled>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <LL_ADC_IsEnabled+0x18>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <LL_ADC_IsEnabled+0x1a>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d101      	bne.n	8002e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b0a3      	sub	sp, #140	; 0x8c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e0c1      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5e      	ldr	r2, [pc, #376]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e001      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0a0      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffb9 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8002e98:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ffb2 	bl	8002e0a <LL_ADC_REG_IsConversionOngoing>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 8081 	bne.w	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d17c      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a48      	ldr	r2, [pc, #288]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002eca:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ecc:	e000      	b.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ed0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d039      	beq.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10e      	bne.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002f00:	4836      	ldr	r0, [pc, #216]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f02:	f7ff ff6f 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f06:	4604      	mov	r4, r0
 8002f08:	4835      	ldr	r0, [pc, #212]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f0a:	f7ff ff6b 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4323      	orrs	r3, r4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e008      	b.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002f1e:	4833      	ldr	r0, [pc, #204]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002f20:	f7ff ff60 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d047      	beq.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	6892      	ldr	r2, [r2, #8]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f4a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4c:	e03a      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10e      	bne.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8002f6e:	481b      	ldr	r0, [pc, #108]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f70:	f7ff ff38 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f74:	4604      	mov	r4, r0
 8002f76:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f78:	f7ff ff34 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4323      	orrs	r3, r4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e008      	b.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8002f8c:	4817      	ldr	r0, [pc, #92]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002f8e:	f7ff ff29 	bl	8002de4 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e009      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	378c      	adds	r7, #140	; 0x8c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40022100 	.word	0x40022100
 8002fe4:	40022300 	.word	0x40022300
 8002fe8:	58026300 	.word	0x58026300
 8002fec:	58026000 	.word	0x58026000
 8002ff0:	fffff0e0 	.word	0xfffff0e0

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <__NVIC_SetPriorityGrouping+0x40>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x40>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00
 8003038:	05fa0000 	.word	0x05fa0000

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff4c 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003172:	f7ff ff63 	bl	800303c <__NVIC_GetPriorityGrouping>
 8003176:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	6978      	ldr	r0, [r7, #20]
 800317e:	f7ff ffb3 	bl	80030e8 <NVIC_EncodePriority>
 8003182:	4602      	mov	r2, r0
 8003184:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff82 	bl	8003094 <__NVIC_SetPriority>
}
 8003190:	bf00      	nop
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff56 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031c2:	4b86      	ldr	r3, [pc, #536]	; (80033dc <HAL_GPIO_Init+0x228>)
 80031c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031c6:	e18c      	b.n	80034e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 817e 	beq.w	80034dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d00b      	beq.n	8003200 <HAL_GPIO_Init+0x4c>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	2203      	movs	r2, #3
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0xee>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d123      	bne.n	80032ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	220f      	movs	r2, #15
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	69b9      	ldr	r1, [r7, #24]
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	2203      	movs	r2, #3
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0203 	and.w	r2, r3, #3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80d8 	beq.w	80034dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_GPIO_Init+0x22c>)
 800332e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_GPIO_Init+0x22c>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_GPIO_Init+0x22c>)
 800333e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_GPIO_Init+0x230>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x234>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04a      	beq.n	800340c <HAL_GPIO_Init+0x258>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_GPIO_Init+0x238>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02b      	beq.n	80033d6 <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_GPIO_Init+0x23c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d025      	beq.n	80033d2 <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_GPIO_Init+0x240>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01f      	beq.n	80033ce <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_GPIO_Init+0x244>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d019      	beq.n	80033ca <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a18      	ldr	r2, [pc, #96]	; (80033fc <HAL_GPIO_Init+0x248>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_GPIO_Init+0x24c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00d      	beq.n	80033c2 <HAL_GPIO_Init+0x20e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_GPIO_Init+0x250>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <HAL_GPIO_Init+0x20a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_GPIO_Init+0x254>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_GPIO_Init+0x206>
 80033b6:	2309      	movs	r3, #9
 80033b8:	e029      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033ba:	230a      	movs	r3, #10
 80033bc:	e027      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033be:	2307      	movs	r3, #7
 80033c0:	e025      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033c2:	2306      	movs	r3, #6
 80033c4:	e023      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e021      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e01f      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033ce:	2303      	movs	r3, #3
 80033d0:	e01d      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e01b      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e019      	b.n	800340e <HAL_GPIO_Init+0x25a>
 80033da:	bf00      	nop
 80033dc:	58000080 	.word	0x58000080
 80033e0:	58024400 	.word	0x58024400
 80033e4:	58000400 	.word	0x58000400
 80033e8:	58020000 	.word	0x58020000
 80033ec:	58020400 	.word	0x58020400
 80033f0:	58020800 	.word	0x58020800
 80033f4:	58020c00 	.word	0x58020c00
 80033f8:	58021000 	.word	0x58021000
 80033fc:	58021400 	.word	0x58021400
 8003400:	58021800 	.word	0x58021800
 8003404:	58021c00 	.word	0x58021c00
 8003408:	58022400 	.word	0x58022400
 800340c:	2300      	movs	r3, #0
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341e:	4938      	ldr	r1, [pc, #224]	; (8003500 <HAL_GPIO_Init+0x34c>)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	3302      	adds	r3, #2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3301      	adds	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f ae6b 	bne.w	80031c8 <HAL_GPIO_Init+0x14>
  }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	58000400 	.word	0x58000400

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003538:	b08f      	sub	sp, #60	; 0x3c
 800353a:	af0a      	add	r7, sp, #40	; 0x28
 800353c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e116      	b.n	8003776 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f009 fe44 	bl	800d1f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fea7 	bl	80082da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	687e      	ldr	r6, [r7, #4]
 8003594:	466d      	mov	r5, sp
 8003596:	f106 0410 	add.w	r4, r6, #16
 800359a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035aa:	1d33      	adds	r3, r6, #4
 80035ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	f004 fd72 	bl	8008098 <USB_CoreInit>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0d7      	b.n	8003776 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 fe95 	bl	80082fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e04a      	b.n	800366e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	333d      	adds	r3, #61	; 0x3d
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	333c      	adds	r3, #60	; 0x3c
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	b298      	uxth	r0, r3
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3342      	adds	r3, #66	; 0x42
 8003614:	4602      	mov	r2, r0
 8003616:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	333f      	adds	r3, #63	; 0x3f
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3344      	adds	r3, #68	; 0x44
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003640:	7bfa      	ldrb	r2, [r7, #15]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3348      	adds	r3, #72	; 0x48
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3350      	adds	r3, #80	; 0x50
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	3301      	adds	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	429a      	cmp	r2, r3
 8003676:	d3af      	bcc.n	80035d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e044      	b.n	8003708 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3301      	adds	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3b5      	bcc.n	800367e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	687e      	ldr	r6, [r7, #4]
 800371a:	466d      	mov	r5, sp
 800371c:	f106 0410 	add.w	r4, r6, #16
 8003720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003728:	e894 0003 	ldmia.w	r4, {r0, r1}
 800372c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003730:	1d33      	adds	r3, r6, #4
 8003732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	f004 fe0b 	bl	8008350 <USB_DevInit>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e014      	b.n	8003776 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b01      	cmp	r3, #1
 8003762:	d102      	bne.n	800376a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f001 f891 	bl	800488c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f005 fe8b 	bl	800948a <USB_DevDisconnect>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800377e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_Start+0x1c>
 8003796:	2302      	movs	r3, #2
 8003798:	e020      	b.n	80037dc <HAL_PCD_Start+0x5e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d109      	bne.n	80037be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d005      	beq.n	80037be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fd78 	bl	80082b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f005 fe3b 	bl	8009448 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b08d      	sub	sp, #52	; 0x34
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f005 fef9 	bl	80095f2 <USB_GetMode>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 83ca 	bne.w	8003f9c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f005 fe5d 	bl	80094cc <USB_ReadInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 83c0 	beq.w	8003f9a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f005 fe54 	bl	80094cc <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f002 0202 	and.w	r2, r2, #2
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f005 fe42 	bl	80094cc <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d161      	bne.n	8003916 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0210 	bic.w	r2, r2, #16
 8003860:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	0c5b      	lsrs	r3, r3, #17
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	2b02      	cmp	r3, #2
 800388c:	d124      	bne.n	80038d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d035      	beq.n	8003906 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6a38      	ldr	r0, [r7, #32]
 80038ae:	f005 fc79 	bl	80091a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038be:	441a      	add	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d0:	441a      	add	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	619a      	str	r2, [r3, #24]
 80038d6:	e016      	b.n	8003906 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	0c5b      	lsrs	r3, r3, #17
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d110      	bne.n	8003906 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038ea:	2208      	movs	r2, #8
 80038ec:	4619      	mov	r1, r3
 80038ee:	6a38      	ldr	r0, [r7, #32]
 80038f0:	f005 fc58 	bl	80091a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	441a      	add	r2, r3
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0210 	orr.w	r2, r2, #16
 8003914:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f005 fdd6 	bl	80094cc <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003926:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800392a:	d16e      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f005 fddc 	bl	80094f2 <USB_ReadDevAllOutEpInterrupt>
 800393a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800393c:	e062      	b.n	8003a04 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d057      	beq.n	80039f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f005 fe01 	bl	800955a <USB_ReadDevOutEPInterrupt>
 8003958:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	461a      	mov	r2, r3
 8003972:	2301      	movs	r3, #1
 8003974:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fddd 	bl	8004538 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	2308      	movs	r3, #8
 8003998:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800399a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fed7 	bl	8004750 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	2310      	movs	r3, #16
 80039bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2320      	movs	r3, #32
 80039d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	3301      	adds	r3, #1
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d199      	bne.n	800393e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f005 fd5c 	bl	80094cc <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1e:	f040 80c0 	bne.w	8003ba2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 fd7d 	bl	8009526 <USB_ReadDevAllInEpInterrupt>
 8003a2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a32:	e0b2      	b.n	8003b9a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a7 	beq.w	8003b8e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 fda3 	bl	8009596 <USB_ReadDevInEPInterrupt>
 8003a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d057      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	2201      	movs	r2, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69f9      	ldr	r1, [r7, #28]
 8003a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2301      	movs	r3, #1
 8003a90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d132      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3348      	adds	r3, #72	; 0x48
 8003aaa:	6819      	ldr	r1, [r3, #0]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4403      	add	r3, r0
 8003aba:	3344      	adds	r3, #68	; 0x44
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4419      	add	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4403      	add	r3, r0
 8003ace:	3348      	adds	r3, #72	; 0x48
 8003ad0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d113      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x31c>
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3350      	adds	r3, #80	; 0x50
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af8:	461a      	mov	r2, r3
 8003afa:	2101      	movs	r1, #1
 8003afc:	f005 fdac 	bl	8009658 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f009 fc11 	bl	800d32e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	461a      	mov	r2, r3
 8003b24:	2308      	movs	r3, #8
 8003b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2310      	movs	r3, #16
 8003b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	2302      	movs	r3, #2
 8003b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fc48 	bl	800441e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f af49 	bne.w	8003a34 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f005 fc90 	bl	80094cc <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb6:	d122      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d108      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bde:	2100      	movs	r1, #0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fe77 	bl	80048d4 <HAL_PCDEx_LPM_Callback>
 8003be6:	e002      	b.n	8003bee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f009 fc17 	bl	800d41c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f005 fc62 	bl	80094cc <USB_ReadInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c12:	d112      	bne.n	8003c3a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f009 fbd3 	bl	800d3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f005 fc44 	bl	80094cc <USB_ReadInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4e:	d121      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c5e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d111      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	f003 020f 	and.w	r2, r3, #15
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c84:	2101      	movs	r1, #1
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fe24 	bl	80048d4 <HAL_PCDEx_LPM_Callback>
 8003c8c:	e002      	b.n	8003c94 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f009 fb9e 	bl	800d3d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f005 fc17 	bl	80094cc <USB_ReadInterrupts>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	f040 80c7 	bne.w	8003e3a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fca0 	bl	800860c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd0:	e056      	b.n	8003d80 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d04:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	461a      	mov	r2, r3
 8003d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d38:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d78:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3a3      	bcc.n	8003cd2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db6:	f043 030b 	orr.w	r3, r3, #11
 8003dba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dcc:	f043 030b 	orr.w	r3, r3, #11
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	e015      	b.n	8003e00 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	4619      	mov	r1, r3
 8003de4:	f242 032b 	movw	r3, #8235	; 0x202b
 8003de8:	4313      	orrs	r3, r2
 8003dea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfa:	f043 030b 	orr.w	r3, r3, #11
 8003dfe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e24:	461a      	mov	r2, r3
 8003e26:	f005 fc17 	bl	8009658 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f005 fb44 	bl	80094cc <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	d124      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f005 fbdb 	bl	8009610 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 fc35 	bl	80086ce <USB_GetDevSpeed>
 8003e64:	4603      	mov	r3, r0
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	f001 fc44 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8003e74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f004 f978 	bl	8008174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f009 fa7a 	bl	800d37e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f005 fb14 	bl	80094cc <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d10a      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f009 fa57 	bl	800d362 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f002 0208 	and.w	r2, r2, #8
 8003ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 faff 	bl	80094cc <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed8:	d10f      	bne.n	8003efa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f009 fab9 	bl	800d45c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fae4 	bl	80094cc <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0e:	d10f      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f009 fa8c 	bl	800d438 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 fac9 	bl	80094cc <USB_ReadInterrupts>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d10a      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f009 fa9a 	bl	800d480 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f005 fab3 	bl	80094cc <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d115      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f009 fa8a 	bl	800d49c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	e000      	b.n	8003f9c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003f9a:	bf00      	nop
    }
  }
}
 8003f9c:	3734      	adds	r7, #52	; 0x34
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}

08003fa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_PCD_SetAddress+0x1a>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e013      	b.n	8003fe4 <HAL_PCD_SetAddress+0x42>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f005 fa11 	bl	80093fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	70fb      	strb	r3, [r7, #3]
 8003ffe:	460b      	mov	r3, r1
 8004000:	803b      	strh	r3, [r7, #0]
 8004002:	4613      	mov	r3, r2
 8004004:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800400a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da0f      	bge.n	8004032 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	3338      	adds	r3, #56	; 0x38
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	705a      	strb	r2, [r3, #1]
 8004030:	e00f      	b.n	8004052 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800405e:	883a      	ldrh	r2, [r7, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	78ba      	ldrb	r2, [r7, #2]
 8004068:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800407c:	78bb      	ldrb	r3, [r7, #2]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d102      	bne.n	8004088 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_PCD_EP_Open+0xaa>
 8004092:	2302      	movs	r3, #2
 8004094:	e00e      	b.n	80040b4 <HAL_PCD_EP_Open+0xc8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 fb37 	bl	8008718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da0f      	bge.n	80040f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 020f 	and.w	r2, r3, #15
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	3338      	adds	r3, #56	; 0x38
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	705a      	strb	r2, [r3, #1]
 80040ee:	e00f      	b.n	8004110 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_PCD_EP_Close+0x6e>
 8004126:	2302      	movs	r3, #2
 8004128:	e00e      	b.n	8004148 <HAL_PCD_EP_Close+0x8c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	4618      	mov	r0, r3
 800413a:	f004 fb75 	bl	8008828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	460b      	mov	r3, r1
 800415e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004160:	7afb      	ldrb	r3, [r7, #11]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	f004 fe58 	bl	8008e78 <USB_EP0StartXfer>
 80041c8:	e008      	b.n	80041dc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	f004 fc02 	bl	80089e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004208:	681b      	ldr	r3, [r3, #0]
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	460b      	mov	r3, r1
 8004224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3338      	adds	r3, #56	; 0x38
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2201      	movs	r2, #1
 8004254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004270:	7afb      	ldrb	r3, [r7, #11]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6979      	ldr	r1, [r7, #20]
 8004288:	f004 fdf6 	bl	8008e78 <USB_EP0StartXfer>
 800428c:	e008      	b.n	80042a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6979      	ldr	r1, [r7, #20]
 800429c:	f004 fba0 	bl	80089e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d901      	bls.n	80042c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e050      	b.n	800436a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da0f      	bge.n	80042f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	3338      	adds	r3, #56	; 0x38
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	3304      	adds	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	705a      	strb	r2, [r3, #1]
 80042ee:	e00d      	b.n	800430c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_PCD_EP_SetStall+0x82>
 8004328:	2302      	movs	r3, #2
 800432a:	e01e      	b.n	800436a <HAL_PCD_EP_SetStall+0xc0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68f9      	ldr	r1, [r7, #12]
 800433a:	4618      	mov	r0, r3
 800433c:	f004 ff8a 	bl	8009254 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	b2d9      	uxtb	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800435a:	461a      	mov	r2, r3
 800435c:	f005 f97c 	bl	8009658 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	429a      	cmp	r2, r3
 800438a:	d901      	bls.n	8004390 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e042      	b.n	8004416 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004394:	2b00      	cmp	r3, #0
 8004396:	da0f      	bge.n	80043b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	4613      	mov	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	3338      	adds	r3, #56	; 0x38
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4413      	add	r3, r2
 80043ac:	3304      	adds	r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2201      	movs	r2, #1
 80043b4:	705a      	strb	r2, [r3, #1]
 80043b6:	e00f      	b.n	80043d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_PCD_EP_ClrStall+0x86>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e00e      	b.n	8004416 <HAL_PCD_EP_ClrStall+0xa4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	4618      	mov	r0, r3
 8004408:	f004 ff92 	bl	8009330 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08a      	sub	sp, #40	; 0x28
 8004422:	af02      	add	r7, sp, #8
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	3338      	adds	r3, #56	; 0x38
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	3304      	adds	r3, #4
 8004444:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	429a      	cmp	r2, r3
 8004450:	d901      	bls.n	8004456 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e06c      	b.n	8004530 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	429a      	cmp	r2, r3
 800446a:	d902      	bls.n	8004472 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	3303      	adds	r3, #3
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800447a:	e02b      	b.n	80044d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	429a      	cmp	r2, r3
 8004490:	d902      	bls.n	8004498 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3303      	adds	r3, #3
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68d9      	ldr	r1, [r3, #12]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4603      	mov	r3, r0
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f004 fe36 	bl	8009128 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	441a      	add	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d809      	bhi.n	80044fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d203      	bcs.n	80044fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1be      	bne.n	800447c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	429a      	cmp	r2, r3
 8004508:	d811      	bhi.n	800452e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	2201      	movs	r2, #1
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	43db      	mvns	r3, r3
 8004524:	6939      	ldr	r1, [r7, #16]
 8004526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452a:	4013      	ands	r3, r2
 800452c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 80a0 	bne.w	80046b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d015      	beq.n	80045a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a72      	ldr	r2, [pc, #456]	; (8004748 <PCD_EP_OutXfrComplete_int+0x210>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f240 80dd 	bls.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d7 	beq.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	461a      	mov	r2, r3
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	e0cb      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	2320      	movs	r3, #32
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	e0bc      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80b7 	bne.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <PCD_EP_OutXfrComplete_int+0x210>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d90f      	bls.n	80045f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f4:	6093      	str	r3, [r2, #8]
 80045f6:	e0a2      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800460a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	440b      	add	r3, r1
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800461e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4403      	add	r3, r0
 800462e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004632:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4419      	add	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4403      	add	r3, r0
 800466c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004670:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d114      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800469a:	461a      	mov	r2, r3
 800469c:	2101      	movs	r1, #1
 800469e:	f004 ffdb 	bl	8009658 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f008 fe25 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
 80046ae:	e046      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <PCD_EP_OutXfrComplete_int+0x214>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d124      	bne.n	8004702 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	e032      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2320      	movs	r3, #32
 80046f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f008 fdfc 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
 8004700:	e01d      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d114      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800472a:	461a      	mov	r2, r3
 800472c:	2100      	movs	r1, #0
 800472e:	f004 ff93 	bl	8009658 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f008 fddd 	bl	800d2f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	4f54300a 	.word	0x4f54300a
 800474c:	4f54310a 	.word	0x4f54310a

08004750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d90e      	bls.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f008 fd95 	bl	800d2d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d90c      	bls.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047c4:	461a      	mov	r2, r3
 80047c6:	2101      	movs	r1, #1
 80047c8:	f004 ff46 	bl	8009658 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	4f54300a 	.word	0x4f54300a

080047dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
 80047e8:	4613      	mov	r3, r2
 80047ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047fa:	883b      	ldrh	r3, [r7, #0]
 80047fc:	0419      	lsls	r1, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	430a      	orrs	r2, r1
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
 8004808:	e028      	b.n	800485c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e00d      	b.n	800483a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	3340      	adds	r3, #64	; 0x40
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	3301      	adds	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	3b01      	subs	r3, #1
 8004840:	429a      	cmp	r2, r3
 8004842:	d3ec      	bcc.n	800481e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004844:	883b      	ldrh	r3, [r7, #0]
 8004846:	0418      	lsls	r0, r3, #16
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4302      	orrs	r2, r0
 8004854:	3340      	adds	r3, #64	; 0x40
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	10000003 	.word	0x10000003

080048d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_PWREx_ConfigSupply+0x70>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d00a      	beq.n	8004916 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_PWREx_ConfigSupply+0x70>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e01f      	b.n	8004952 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e01d      	b.n	8004952 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <HAL_PWREx_ConfigSupply+0x70>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 0207 	bic.w	r2, r3, #7
 800491e:	490f      	ldr	r1, [pc, #60]	; (800495c <HAL_PWREx_ConfigSupply+0x70>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4313      	orrs	r3, r2
 8004924:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004926:	f7fc fc79 	bl	800121c <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800492c:	e009      	b.n	8004942 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800492e:	f7fc fc75 	bl	800121c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493c:	d901      	bls.n	8004942 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e007      	b.n	8004952 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_PWREx_ConfigSupply+0x70>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d1ee      	bne.n	800492e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	58024800 	.word	0x58024800

08004960 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	58024800 	.word	0x58024800

08004980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08c      	sub	sp, #48	; 0x30
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e37a      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8087 	beq.w	8004aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a0:	4ba0      	ldr	r3, [pc, #640]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049aa:	4b9e      	ldr	r3, [pc, #632]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d007      	beq.n	80049c6 <HAL_RCC_OscConfig+0x46>
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2b18      	cmp	r3, #24
 80049ba:	d110      	bne.n	80049de <HAL_RCC_OscConfig+0x5e>
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d10b      	bne.n	80049de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c6:	4b97      	ldr	r3, [pc, #604]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06c      	beq.n	8004aac <HAL_RCC_OscConfig+0x12c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d168      	bne.n	8004aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e354      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_OscConfig+0x76>
 80049e8:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a8d      	ldr	r2, [pc, #564]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e02e      	b.n	8004a54 <HAL_RCC_OscConfig+0xd4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x98>
 80049fe:	4b89      	ldr	r3, [pc, #548]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a88      	ldr	r2, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4b86      	ldr	r3, [pc, #536]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a85      	ldr	r2, [pc, #532]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e01d      	b.n	8004a54 <HAL_RCC_OscConfig+0xd4>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCC_OscConfig+0xbc>
 8004a22:	4b80      	ldr	r3, [pc, #512]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7f      	ldr	r2, [pc, #508]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7c      	ldr	r2, [pc, #496]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e00b      	b.n	8004a54 <HAL_RCC_OscConfig+0xd4>
 8004a3c:	4b79      	ldr	r3, [pc, #484]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a78      	ldr	r2, [pc, #480]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	4b76      	ldr	r3, [pc, #472]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a75      	ldr	r2, [pc, #468]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d013      	beq.n	8004a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fc fbde 	bl	800121c <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a64:	f7fc fbda 	bl	800121c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e308      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a76:	4b6b      	ldr	r3, [pc, #428]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0xe4>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fbca 	bl	800121c <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fc fbc6 	bl	800121c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	; 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e2f4      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a9e:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x10c>
 8004aaa:	e000      	b.n	8004aae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d06d      	beq.n	8004b96 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aba:	4b5a      	ldr	r3, [pc, #360]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ac4:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x160>
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b18      	cmp	r3, #24
 8004ad4:	d11b      	bne.n	8004b0e <HAL_RCC_OscConfig+0x18e>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_OscConfig+0x178>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e2c7      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b4a      	ldr	r3, [pc, #296]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	4947      	ldr	r1, [pc, #284]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	e043      	b.n	8004b96 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d026      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b16:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0219 	bic.w	r2, r3, #25
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4940      	ldr	r1, [pc, #256]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc fb78 	bl	800121c <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b30:	f7fc fb74 	bl	800121c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e2a2      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b42:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b35      	ldr	r3, [pc, #212]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	4931      	ldr	r1, [pc, #196]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
 8004b62:	e018      	b.n	8004b96 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b64:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fc fb54 	bl	800121c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fc fb50 	bl	800121c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e27e      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b8a:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0310 	and.w	r3, r3, #16
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d06c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004baa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d007      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x248>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b18      	cmp	r3, #24
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x276>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d116      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_OscConfig+0x260>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e253      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004be0:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	061b      	lsls	r3, r3, #24
 8004bee:	490d      	ldr	r1, [pc, #52]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bf4:	e042      	b.n	8004c7c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d025      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fc fb07 	bl	800121c <HAL_GetTick>
 8004c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c12:	f7fc fb03 	bl	800121c <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d903      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e231      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
 8004c24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c28:	4ba3      	ldr	r3, [pc, #652]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ee      	beq.n	8004c12 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c34:	4ba0      	ldr	r3, [pc, #640]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	499d      	ldr	r1, [pc, #628]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60cb      	str	r3, [r1, #12]
 8004c48:	e018      	b.n	8004c7c <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c4a:	4b9b      	ldr	r3, [pc, #620]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a9a      	ldr	r2, [pc, #616]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fc fae1 	bl	800121c <HAL_GetTick>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c5e:	f7fc fadd 	bl	800121c <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e20b      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c70:	4b91      	ldr	r3, [pc, #580]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d036      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c90:	4b89      	ldr	r3, [pc, #548]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	4a88      	ldr	r2, [pc, #544]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fc fabe 	bl	800121c <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ca4:	f7fc faba 	bl	800121c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1e8      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cb6:	4b80      	ldr	r3, [pc, #512]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x324>
 8004cc2:	e018      	b.n	8004cf6 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cc4:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	4a7b      	ldr	r2, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fc faa4 	bl	800121c <HAL_GetTick>
 8004cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd8:	f7fc faa0 	bl	800121c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1ce      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cea:	4b73      	ldr	r3, [pc, #460]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d036      	beq.n	8004d70 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d019      	beq.n	8004d3e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d0a:	4b6b      	ldr	r3, [pc, #428]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6a      	ldr	r2, [pc, #424]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d16:	f7fc fa81 	bl	800121c <HAL_GetTick>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d1e:	f7fc fa7d 	bl	800121c <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1ab      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d30:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x39e>
 8004d3c:	e018      	b.n	8004d70 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d3e:	4b5e      	ldr	r3, [pc, #376]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5d      	ldr	r2, [pc, #372]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d4a:	f7fc fa67 	bl	800121c <HAL_GetTick>
 8004d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d52:	f7fc fa63 	bl	800121c <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e191      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d64:	4b54      	ldr	r3, [pc, #336]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8081 	beq.w	8004e80 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	; (8004ebc <HAL_RCC_OscConfig+0x53c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4e      	ldr	r2, [pc, #312]	; (8004ebc <HAL_RCC_OscConfig+0x53c>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fa47 	bl	800121c <HAL_GetTick>
 8004d8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fc fa43 	bl	800121c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b64      	cmp	r3, #100	; 0x64
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e171      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <HAL_RCC_OscConfig+0x53c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x446>
 8004db8:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a3e      	ldr	r2, [pc, #248]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e02d      	b.n	8004e22 <HAL_RCC_OscConfig+0x4a2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x468>
 8004dce:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a36      	ldr	r2, [pc, #216]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	e01c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4a2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_OscConfig+0x48a>
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a30      	ldr	r2, [pc, #192]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004df6:	f043 0304 	orr.w	r3, r3, #4
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a2d      	ldr	r2, [pc, #180]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e00b      	b.n	8004e22 <HAL_RCC_OscConfig+0x4a2>
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
 8004e16:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a27      	ldr	r2, [pc, #156]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e1c:	f023 0304 	bic.w	r3, r3, #4
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fc f9f7 	bl	800121c <HAL_GetTick>
 8004e2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fc f9f3 	bl	800121c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e11f      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ee      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4b2>
 8004e54:	e014      	b.n	8004e80 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fc f9e1 	bl	800121c <HAL_GetTick>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fc f9dd 	bl	800121c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e109      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ee      	bne.n	8004e5e <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80fe 	beq.w	8005086 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e92:	2b18      	cmp	r3, #24
 8004e94:	f000 80b9 	beq.w	800500a <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	f040 809a 	bne.w	8004fd6 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fc f9b5 	bl	800121c <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb4:	e00d      	b.n	8004ed2 <HAL_RCC_OscConfig+0x552>
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fc f9ac 	bl	800121c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0da      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ed2:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	4b6c      	ldr	r3, [pc, #432]	; (8005094 <HAL_RCC_OscConfig+0x714>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	4967      	ldr	r1, [pc, #412]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	3b01      	subs	r3, #1
 8004efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	3b01      	subs	r3, #1
 8004f08:	025b      	lsls	r3, r3, #9
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	3b01      	subs	r3, #1
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f28:	4959      	ldr	r1, [pc, #356]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f2e:	4b58      	ldr	r3, [pc, #352]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	4a57      	ldr	r2, [pc, #348]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f3a:	4b55      	ldr	r3, [pc, #340]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x718>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	4951      	ldr	r1, [pc, #324]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f4e:	4b50      	ldr	r3, [pc, #320]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	f023 020c 	bic.w	r2, r3, #12
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	494d      	ldr	r1, [pc, #308]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f60:	4b4b      	ldr	r3, [pc, #300]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f023 0202 	bic.w	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	4948      	ldr	r1, [pc, #288]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a46      	ldr	r2, [pc, #280]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7e:	4b44      	ldr	r3, [pc, #272]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a43      	ldr	r2, [pc, #268]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f8a:	4b41      	ldr	r3, [pc, #260]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	4a40      	ldr	r2, [pc, #256]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f96:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4a3d      	ldr	r2, [pc, #244]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fc f935 	bl	800121c <HAL_GetTick>
 8004fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fc f931 	bl	800121c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e05f      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fc8:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x636>
 8004fd4:	e057      	b.n	8005086 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2d      	ldr	r2, [pc, #180]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fc f91b 	bl	800121c <HAL_GetTick>
 8004fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fc f917 	bl	800121c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e045      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x66a>
 8005008:	e03d      	b.n	8005086 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800500a:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <HAL_RCC_OscConfig+0x710>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b01      	cmp	r3, #1
 800501c:	d031      	beq.n	8005082 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d12a      	bne.n	8005082 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d122      	bne.n	8005082 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d11a      	bne.n	8005082 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	0a5b      	lsrs	r3, r3, #9
 8005050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d111      	bne.n	8005082 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d108      	bne.n	8005082 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	0e1b      	lsrs	r3, r3, #24
 8005074:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	; 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	58024400 	.word	0x58024400
 8005094:	fffffc0c 	.word	0xfffffc0c
 8005098:	ffff0007 	.word	0xffff0007

0800509c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e19c      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b8a      	ldr	r3, [pc, #552]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b87      	ldr	r3, [pc, #540]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	4985      	ldr	r1, [pc, #532]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b83      	ldr	r3, [pc, #524]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e184      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050fc:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	4975      	ldr	r1, [pc, #468]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800510a:	4313      	orrs	r3, r2
 800510c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	4b70      	ldr	r3, [pc, #448]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005126:	429a      	cmp	r2, r3
 8005128:	d908      	bls.n	800513c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800512a:	4b6d      	ldr	r3, [pc, #436]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	496a      	ldr	r1, [pc, #424]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005138:	4313      	orrs	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d010      	beq.n	800516a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	4b64      	ldr	r3, [pc, #400]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005154:	429a      	cmp	r2, r3
 8005156:	d908      	bls.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005158:	4b61      	ldr	r3, [pc, #388]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	495e      	ldr	r1, [pc, #376]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005166:	4313      	orrs	r3, r2
 8005168:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005182:	429a      	cmp	r2, r3
 8005184:	d908      	bls.n	8005198 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005186:	4b56      	ldr	r3, [pc, #344]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4953      	ldr	r1, [pc, #332]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005194:	4313      	orrs	r3, r2
 8005196:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d908      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f023 020f 	bic.w	r2, r3, #15
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4947      	ldr	r1, [pc, #284]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d055      	beq.n	800527e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051d2:	4b43      	ldr	r3, [pc, #268]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4940      	ldr	r1, [pc, #256]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ec:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d121      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0f6      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d107      	bne.n	8005214 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005204:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d115      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0ea      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d107      	bne.n	800522c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0de      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0d6      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f023 0207 	bic.w	r2, r3, #7
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4925      	ldr	r1, [pc, #148]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524e:	f7fb ffe5 	bl	800121c <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005254:	e00a      	b.n	800526c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005256:	f7fb ffe1 	bl	800121c <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e0be      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	429a      	cmp	r2, r3
 800527c:	d1eb      	bne.n	8005256 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d010      	beq.n	80052ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	429a      	cmp	r2, r3
 8005298:	d208      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529a:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f023 020f 	bic.w	r2, r3, #15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	490e      	ldr	r1, [pc, #56]	; (80052e0 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d214      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4906      	ldr	r1, [pc, #24]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <HAL_RCC_ClockConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e086      	b.n	80053ea <HAL_RCC_ClockConfig+0x34e>
 80052dc:	52002000 	.word	0x52002000
 80052e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d208      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005300:	4b3c      	ldr	r3, [pc, #240]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	4939      	ldr	r1, [pc, #228]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800530e:	4313      	orrs	r3, r2
 8005310:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800532a:	429a      	cmp	r2, r3
 800532c:	d208      	bcs.n	8005340 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	492e      	ldr	r1, [pc, #184]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800533c:	4313      	orrs	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d010      	beq.n	800536e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005358:	429a      	cmp	r2, r3
 800535a:	d208      	bcs.n	800536e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4922      	ldr	r1, [pc, #136]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800536a:	4313      	orrs	r3, r2
 800536c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d010      	beq.n	800539c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005386:	429a      	cmp	r2, r3
 8005388:	d208      	bcs.n	800539c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800538a:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	4917      	ldr	r1, [pc, #92]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 8005398:	4313      	orrs	r3, r2
 800539a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800539c:	f000 f834 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	4912      	ldr	r1, [pc, #72]	; (80053f8 <HAL_RCC_ClockConfig+0x35c>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053ba:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_RCC_ClockConfig+0x358>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <HAL_RCC_ClockConfig+0x35c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x360>)
 80053d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053d4:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_RCC_ClockConfig+0x364>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_RCC_ClockConfig+0x368>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fb fc26 	bl	8000c30 <HAL_InitTick>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	58024400 	.word	0x58024400
 80053f8:	0800d980 	.word	0x0800d980
 80053fc:	24000004 	.word	0x24000004
 8005400:	24000000 	.word	0x24000000
 8005404:	24000008 	.word	0x24000008

08005408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	b089      	sub	sp, #36	; 0x24
 800540c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800540e:	4bb3      	ldr	r3, [pc, #716]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005416:	2b18      	cmp	r3, #24
 8005418:	f200 8155 	bhi.w	80056c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_RCC_GetSysClockFreq+0x1c>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005489 	.word	0x08005489
 8005428:	080056c7 	.word	0x080056c7
 800542c:	080056c7 	.word	0x080056c7
 8005430:	080056c7 	.word	0x080056c7
 8005434:	080056c7 	.word	0x080056c7
 8005438:	080056c7 	.word	0x080056c7
 800543c:	080056c7 	.word	0x080056c7
 8005440:	080056c7 	.word	0x080056c7
 8005444:	080054af 	.word	0x080054af
 8005448:	080056c7 	.word	0x080056c7
 800544c:	080056c7 	.word	0x080056c7
 8005450:	080056c7 	.word	0x080056c7
 8005454:	080056c7 	.word	0x080056c7
 8005458:	080056c7 	.word	0x080056c7
 800545c:	080056c7 	.word	0x080056c7
 8005460:	080056c7 	.word	0x080056c7
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080056c7 	.word	0x080056c7
 800546c:	080056c7 	.word	0x080056c7
 8005470:	080056c7 	.word	0x080056c7
 8005474:	080056c7 	.word	0x080056c7
 8005478:	080056c7 	.word	0x080056c7
 800547c:	080056c7 	.word	0x080056c7
 8005480:	080056c7 	.word	0x080056c7
 8005484:	080054bb 	.word	0x080054bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005488:	4b94      	ldr	r3, [pc, #592]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005494:	4b91      	ldr	r3, [pc, #580]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	08db      	lsrs	r3, r3, #3
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	4a90      	ldr	r2, [pc, #576]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054a6:	e111      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054a8:	4b8d      	ldr	r3, [pc, #564]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054aa:	61bb      	str	r3, [r7, #24]
    break;
 80054ac:	e10e      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054b0:	61bb      	str	r3, [r7, #24]
    break;
 80054b2:	e10b      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054b4:	4b8c      	ldr	r3, [pc, #560]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054b6:	61bb      	str	r3, [r7, #24]
    break;
 80054b8:	e108      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054d0:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054da:	4b80      	ldr	r3, [pc, #512]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	08db      	lsrs	r3, r3, #3
 80054e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80e1 	beq.w	80056c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f000 8083 	beq.w	800560c <HAL_RCC_GetSysClockFreq+0x204>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b02      	cmp	r3, #2
 800550a:	f200 80a1 	bhi.w	8005650 <HAL_RCC_GetSysClockFreq+0x248>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x114>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d056      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800551a:	e099      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800551c:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02d      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005528:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005562:	ed97 6a02 	vldr	s12, [r7, #8]
 8005566:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005582:	e087      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c6:	e065      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055da:	4b40      	ldr	r3, [pc, #256]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560a:	e043      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800561a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561e:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005632:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564e:	e021      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800565e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005672:	ed97 6a02 	vldr	s12, [r7, #8]
 8005676:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800567a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005692:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	0a5b      	lsrs	r3, r3, #9
 800569a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569e:	3301      	adds	r3, #1
 80056a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b8:	ee17 3a90 	vmov	r3, s15
 80056bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056be:	e005      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    break;
 80056c4:	e002      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056c8:	61bb      	str	r3, [r7, #24]
    break;
 80056ca:	bf00      	nop
  }

  return sysclockfreq;
 80056cc:	69bb      	ldr	r3, [r7, #24]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	003d0900 	.word	0x003d0900
 80056e8:	007a1200 	.word	0x007a1200
 80056ec:	46000000 	.word	0x46000000
 80056f0:	4c742400 	.word	0x4c742400
 80056f4:	4a742400 	.word	0x4a742400
 80056f8:	4af42400 	.word	0x4af42400

080056fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005702:	f7ff fe81 	bl	8005408 <HAL_RCC_GetSysClockFreq>
 8005706:	4602      	mov	r2, r0
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <HAL_RCC_GetHCLKFreq+0x50>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	490f      	ldr	r1, [pc, #60]	; (8005750 <HAL_RCC_GetHCLKFreq+0x54>)
 8005714:	5ccb      	ldrb	r3, [r1, r3]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	fa22 f303 	lsr.w	r3, r2, r3
 800571e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_RCC_GetHCLKFreq+0x50>)
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_RCC_GetHCLKFreq+0x54>)
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	4a07      	ldr	r2, [pc, #28]	; (8005754 <HAL_RCC_GetHCLKFreq+0x58>)
 8005738:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800573a:	4a07      	ldr	r2, [pc, #28]	; (8005758 <HAL_RCC_GetHCLKFreq+0x5c>)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <HAL_RCC_GetHCLKFreq+0x58>)
 8005742:	681b      	ldr	r3, [r3, #0]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	58024400 	.word	0x58024400
 8005750:	0800d980 	.word	0x0800d980
 8005754:	24000004 	.word	0x24000004
 8005758:	24000000 	.word	0x24000000

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005760:	f7ff ffcc 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	091b      	lsrs	r3, r3, #4
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4904      	ldr	r1, [pc, #16]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	f003 031f 	and.w	r3, r3, #31
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	0800d980 	.word	0x0800d980

08005788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	223f      	movs	r2, #63	; 0x3f
 8005796:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f003 0207 	and.w	r2, r3, #7
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80057a4:	4b17      	ldr	r3, [pc, #92]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 020f 	and.w	r2, r3, #15
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80057c8:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_RCC_GetClockConfig+0x7c>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_GetClockConfig+0x80>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	58024400 	.word	0x58024400
 8005808:	52002000 	.word	0x52002000

0800580c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005818:	2300      	movs	r3, #0
 800581a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d03f      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005830:	d02a      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005832:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005836:	d824      	bhi.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583c:	d018      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800583e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005842:	d81e      	bhi.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584c:	d007      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800584e:	e018      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005850:	4bab      	ldr	r3, [pc, #684]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4aaa      	ldr	r2, [pc, #680]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800585c:	e015      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	2102      	movs	r1, #2
 8005864:	4618      	mov	r0, r3
 8005866:	f001 feff 	bl	8007668 <RCCEx_PLL2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800586e:	e00c      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3324      	adds	r3, #36	; 0x24
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f001 ffa8 	bl	80077cc <RCCEx_PLL3_Config>
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005880:	e003      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
      break;
 8005886:	e000      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d109      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005890:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589c:	4998      	ldr	r1, [pc, #608]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	650b      	str	r3, [r1, #80]	; 0x50
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03d      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d826      	bhi.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d9 	.word	0x080058d9
 80058c8:	080058e7 	.word	0x080058e7
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005911 	.word	0x08005911
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d8:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	4a88      	ldr	r2, [pc, #544]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058e4:	e015      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3304      	adds	r3, #4
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 febb 	bl	8007668 <RCCEx_PLL2_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058f6:	e00c      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 ff64 	bl	80077cc <RCCEx_PLL3_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
      break;
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005918:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591c:	f023 0207 	bic.w	r2, r3, #7
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	4976      	ldr	r1, [pc, #472]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	650b      	str	r3, [r1, #80]	; 0x50
 800592a:	e001      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d051      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005942:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005946:	d036      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005948:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800594c:	d830      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800594e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005952:	d032      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005958:	d82a      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800595a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800595e:	d02e      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005960:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005964:	d824      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800596a:	d018      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800596c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005970:	d81e      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8005976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800597a:	d007      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800597c:	e018      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597e:	4b60      	ldr	r3, [pc, #384]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a5f      	ldr	r2, [pc, #380]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800598a:	e019      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fe68 	bl	8007668 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800599c:	e010      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 ff11 	bl	80077cc <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ae:	e007      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e004      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80059be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059c6:	4b4e      	ldr	r3, [pc, #312]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059d4:	494a      	ldr	r1, [pc, #296]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	658b      	str	r3, [r1, #88]	; 0x58
 80059da:	e001      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d051      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059f2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80059f6:	d036      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80059f8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80059fc:	d830      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80059fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a02:	d032      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a08:	d82a      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a0e:	d02e      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a14:	d824      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1a:	d018      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a20:	d81e      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005a2c:	e018      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2e:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a3a:	e019      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fe10 	bl	8007668 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a4c:	e010      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3324      	adds	r3, #36	; 0x24
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 feb9 	bl	80077cc <RCCEx_PLL3_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5e:	e007      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
      break;
 8005a64:	e004      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a66:	bf00      	nop
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8005a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a84:	491e      	ldr	r1, [pc, #120]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	658b      	str	r3, [r1, #88]	; 0x58
 8005a8a:	e001      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d035      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d01c      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d817      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d813      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005ac4:	e00e      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fdcb 	bl	8007668 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e002      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	4902      	ldr	r1, [pc, #8]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005afc:	e004      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d047      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1c:	d030      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b22:	d82a      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b28:	d02c      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b2e:	d824      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d018      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d81e      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d007      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005b46:	e018      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b48:	4bac      	ldr	r3, [pc, #688]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4aab      	ldr	r2, [pc, #684]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b54:	e017      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 fd83 	bl	8007668 <RCCEx_PLL2_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b66:	e00e      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3324      	adds	r3, #36	; 0x24
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fe2c 	bl	80077cc <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b78:	e005      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7e:	e002      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005b80:	bf00      	nop
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8005b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b8c:	4b9b      	ldr	r3, [pc, #620]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b98:	4998      	ldr	r1, [pc, #608]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005b9e:	e001      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d049      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb8:	d02e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8005bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bbe:	d828      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bc4:	d02a      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bca:	d822      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bd0:	d026      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bd6:	d81c      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bdc:	d010      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be2:	d816      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01d      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d111      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fd37 	bl	8007668 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bfe:	e012      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3324      	adds	r3, #36	; 0x24
 8005c04:	2101      	movs	r1, #1
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 fde0 	bl	80077cc <RCCEx_PLL3_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c10:	e009      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	75fb      	strb	r3, [r7, #23]
      break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c2c:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c38:	4970      	ldr	r1, [pc, #448]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c3e:	e001      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d04b      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c5a:	d02e      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c60:	d828      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d02a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6c:	d822      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c72:	d026      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8005c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c78:	d81c      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d010      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d816      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01d      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8e:	d111      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fce6 	bl	8007668 <RCCEx_PLL2_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005ca0:	e012      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3324      	adds	r3, #36	; 0x24
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fd8f 	bl	80077cc <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb8:	e006      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cce:	4b4b      	ldr	r3, [pc, #300]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cdc:	4947      	ldr	r1, [pc, #284]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ce2:	e001      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02f      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfc:	d00e      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d02:	d814      	bhi.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d015      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0c:	d10f      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d0e:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	4a3a      	ldr	r2, [pc, #232]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d1a:	e00c      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 fca0 	bl	8007668 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
      break;
 8005d32:	e000      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d48:	492c      	ldr	r1, [pc, #176]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d4e:	e001      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
 8005d52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d032      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d81b      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005d68:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005da7 	.word	0x08005da7
 8005d74:	08005d81 	.word	0x08005d81
 8005d78:	08005d8f 	.word	0x08005d8f
 8005d7c:	08005da7 	.word	0x08005da7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d8c:	e00c      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2102      	movs	r1, #2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fc67 	bl	8007668 <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d9e:	e003      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	4910      	ldr	r1, [pc, #64]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dc0:	e001      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 808a 	beq.w	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de0:	f7fb fa1c 	bl	800121c <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de6:	e00d      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de8:	f7fb fa18 	bl	800121c <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d906      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	75fb      	strb	r3, [r7, #23]
        break;
 8005dfa:	e009      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e04:	4bb9      	ldr	r3, [pc, #740]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0eb      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d166      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e16:	4bb6      	ldr	r3, [pc, #728]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e20:	4053      	eors	r3, r2
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2a:	4bb1      	ldr	r3, [pc, #708]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e32:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e34:	4bae      	ldr	r3, [pc, #696]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4aad      	ldr	r2, [pc, #692]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e40:	4bab      	ldr	r3, [pc, #684]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e44:	4aaa      	ldr	r2, [pc, #680]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e4c:	4aa8      	ldr	r2, [pc, #672]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d115      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb f9dd 	bl	800121c <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e64:	e00b      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fb f9d9 	bl	800121c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d902      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	75fb      	strb	r3, [r7, #23]
            break;
 8005e7c:	e005      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e7e:	4b9c      	ldr	r3, [pc, #624]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0ed      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d126      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9e:	d10d      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005ea0:	4b93      	ldr	r3, [pc, #588]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005eae:	0919      	lsrs	r1, r3, #4
 8005eb0:	4b90      	ldr	r3, [pc, #576]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	498e      	ldr	r1, [pc, #568]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]
 8005eba:	e005      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005ebc:	4b8c      	ldr	r3, [pc, #560]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	4a8b      	ldr	r2, [pc, #556]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ec2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ec6:	6113      	str	r3, [r2, #16]
 8005ec8:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed6:	4986      	ldr	r1, [pc, #536]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	670b      	str	r3, [r1, #112]	; 0x70
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	75bb      	strb	r3, [r7, #22]
 8005ee2:	e001      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d07e      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef8:	2b28      	cmp	r3, #40	; 0x28
 8005efa:	d867      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005fd3 	.word	0x08005fd3
 8005f08:	08005fcd 	.word	0x08005fcd
 8005f0c:	08005fcd 	.word	0x08005fcd
 8005f10:	08005fcd 	.word	0x08005fcd
 8005f14:	08005fcd 	.word	0x08005fcd
 8005f18:	08005fcd 	.word	0x08005fcd
 8005f1c:	08005fcd 	.word	0x08005fcd
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08005fa9 	.word	0x08005fa9
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005fcd 	.word	0x08005fcd
 8005f30:	08005fcd 	.word	0x08005fcd
 8005f34:	08005fcd 	.word	0x08005fcd
 8005f38:	08005fcd 	.word	0x08005fcd
 8005f3c:	08005fcd 	.word	0x08005fcd
 8005f40:	08005fcd 	.word	0x08005fcd
 8005f44:	08005fbb 	.word	0x08005fbb
 8005f48:	08005fcd 	.word	0x08005fcd
 8005f4c:	08005fcd 	.word	0x08005fcd
 8005f50:	08005fcd 	.word	0x08005fcd
 8005f54:	08005fcd 	.word	0x08005fcd
 8005f58:	08005fcd 	.word	0x08005fcd
 8005f5c:	08005fcd 	.word	0x08005fcd
 8005f60:	08005fcd 	.word	0x08005fcd
 8005f64:	08005fd3 	.word	0x08005fd3
 8005f68:	08005fcd 	.word	0x08005fcd
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	08005fcd 	.word	0x08005fcd
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fcd 	.word	0x08005fcd
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005fcd 	.word	0x08005fcd
 8005f8c:	08005fcd 	.word	0x08005fcd
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fcd 	.word	0x08005fcd
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08005fcd 	.word	0x08005fcd
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fd3 	.word	0x08005fd3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2101      	movs	r1, #1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fb5a 	bl	8007668 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fc03 	bl	80077cc <RCCEx_PLL3_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	4942      	ldr	r1, [pc, #264]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	654b      	str	r3, [r1, #84]	; 0x54
 8005fec:	e001      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d037      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	2b05      	cmp	r3, #5
 8006004:	d820      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800604f 	.word	0x0800604f
 8006010:	08006025 	.word	0x08006025
 8006014:	08006037 	.word	0x08006037
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800604f 	.word	0x0800604f
 8006020:	0800604f 	.word	0x0800604f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	2101      	movs	r1, #1
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fb1c 	bl	8007668 <RCCEx_PLL2_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006034:	e00c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fbc5 	bl	80077cc <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	75fb      	strb	r3, [r7, #23]
      break;
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800604e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f023 0207 	bic.w	r2, r3, #7
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4923      	ldr	r1, [pc, #140]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006064:	4313      	orrs	r3, r2
 8006066:	654b      	str	r3, [r1, #84]	; 0x54
 8006068:	e001      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d040      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006080:	2b05      	cmp	r3, #5
 8006082:	d821      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060cf 	.word	0x080060cf
 8006090:	080060a5 	.word	0x080060a5
 8006094:	080060b7 	.word	0x080060b7
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	2101      	movs	r1, #1
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fadc 	bl	8007668 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060b4:	e00c      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 fb85 	bl	80077cc <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e000      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80060ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d110      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f023 0207 	bic.w	r2, r3, #7
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e4:	4902      	ldr	r1, [pc, #8]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	658b      	str	r3, [r1, #88]	; 0x58
 80060ea:	e007      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80060ec:	58024800 	.word	0x58024800
 80060f0:	58024400 	.word	0x58024400
 80060f4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d04b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006112:	d02e      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006118:	d828      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d02a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006124:	d822      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800612a:	d026      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800612c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006130:	d81c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006136:	d010      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800613c:	d816      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01d      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006146:	d111      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fa8a 	bl	8007668 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006158:	e012      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3324      	adds	r3, #36	; 0x24
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f001 fb33 	bl	80077cc <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800616a:	e009      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	e006      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006172:	bf00      	nop
 8006174:	e004      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006176:	bf00      	nop
 8006178:	e002      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800617a:	bf00      	nop
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006186:	4bb2      	ldr	r3, [pc, #712]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	49ae      	ldr	r1, [pc, #696]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006196:	4313      	orrs	r3, r2
 8006198:	654b      	str	r3, [r1, #84]	; 0x54
 800619a:	e001      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d04b      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061b6:	d02e      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80061b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061bc:	d828      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d02a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d822      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80061ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ce:	d026      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061d4:	d81c      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	d010      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e0:	d816      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01d      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ea:	d111      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fa38 	bl	8007668 <RCCEx_PLL2_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061fc:	e012      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3324      	adds	r3, #36	; 0x24
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fae1 	bl	80077cc <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800620e:	e009      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e006      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006216:	bf00      	nop
 8006218:	e004      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800621a:	bf00      	nop
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800622a:	4b89      	ldr	r3, [pc, #548]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006238:	4985      	ldr	r1, [pc, #532]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800623a:	4313      	orrs	r3, r2
 800623c:	658b      	str	r3, [r1, #88]	; 0x58
 800623e:	e001      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624c:	2b00      	cmp	r3, #0
 800624e:	d04b      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006256:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800625a:	d02e      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800625c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006260:	d828      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d02a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626c:	d822      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800626e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006272:	d026      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006274:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006278:	d81c      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627e:	d010      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006284:	d816      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01d      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	d111      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f9e6 	bl	8007668 <RCCEx_PLL2_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062a0:	e012      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3324      	adds	r3, #36	; 0x24
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fa8f 	bl	80077cc <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062b2:	e009      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
      break;
 80062b8:	e006      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80062ba:	bf00      	nop
 80062bc:	e004      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80062be:	bf00      	nop
 80062c0:	e002      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80062c2:	bf00      	nop
 80062c4:	e000      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80062c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062ce:	4b60      	ldr	r3, [pc, #384]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062dc:	495c      	ldr	r1, [pc, #368]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	658b      	str	r3, [r1, #88]	; 0x58
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d018      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d10a      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3324      	adds	r3, #36	; 0x24
 8006302:	2102      	movs	r1, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fa61 	bl	80077cc <RCCEx_PLL3_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006314:	4b4e      	ldr	r3, [pc, #312]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006318:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006320:	494b      	ldr	r1, [pc, #300]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006322:	4313      	orrs	r3, r2
 8006324:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633c:	d10a      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3324      	adds	r3, #36	; 0x24
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fa41 	bl	80077cc <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006354:	4b3e      	ldr	r3, [pc, #248]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006362:	493b      	ldr	r1, [pc, #236]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006364:	4313      	orrs	r3, r2
 8006366:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d034      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800637a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637e:	d01d      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006384:	d817      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800638a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638e:	d009      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006390:	e011      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3304      	adds	r3, #4
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f965 	bl	8007668 <RCCEx_PLL2_Config>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063a2:	e00c      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	2102      	movs	r1, #2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fa0e 	bl	80077cc <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ba:	e000      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80063bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063c4:	4b22      	ldr	r3, [pc, #136]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80063c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063d2:	491f      	ldr	r1, [pc, #124]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	658b      	str	r3, [r1, #88]	; 0x58
 80063d8:	e001      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f4:	d01c      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80063f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063fa:	d816      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80063fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006400:	d003      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006406:	d007      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006416:	e00c      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	2101      	movs	r1, #1
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f9d4 	bl	80077cc <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006428:	e003      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	75fb      	strb	r3, [r7, #23]
      break;
 800642e:	e000      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10d      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006446:	4902      	ldr	r1, [pc, #8]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006448:	4313      	orrs	r3, r2
 800644a:	654b      	str	r3, [r1, #84]	; 0x54
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d029      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d007      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006472:	e00f      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4a60      	ldr	r2, [pc, #384]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800647a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800647e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006480:	e00b      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	2102      	movs	r1, #2
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f8ed 	bl	8007668 <RCCEx_PLL2_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006492:	e002      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064a0:	4b56      	ldr	r3, [pc, #344]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80064a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ac:	4953      	ldr	r1, [pc, #332]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064b2:	e001      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b4:	7dfb      	ldrb	r3, [r7, #23]
 80064b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 f97e 	bl	80077cc <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d030      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ee:	d017      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80064f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f4:	d811      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fa:	d013      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d80b      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a3a      	ldr	r2, [pc, #232]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006518:	e007      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	e004      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006520:	bf00      	nop
 8006522:	e002      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006530:	4b32      	ldr	r3, [pc, #200]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653c:	492f      	ldr	r1, [pc, #188]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	654b      	str	r3, [r1, #84]	; 0x54
 8006542:	e001      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006554:	4b29      	ldr	r3, [pc, #164]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006560:	4926      	ldr	r1, [pc, #152]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006562:	4313      	orrs	r3, r2
 8006564:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657e:	491f      	ldr	r1, [pc, #124]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006580:	4313      	orrs	r3, r2
 8006582:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00d      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006590:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4a19      	ldr	r2, [pc, #100]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800659a:	6113      	str	r3, [r2, #16]
 800659c:	4b17      	ldr	r3, [pc, #92]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065a6:	4915      	ldr	r1, [pc, #84]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da08      	bge.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	490e      	ldr	r1, [pc, #56]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e0:	4906      	ldr	r1, [pc, #24]	; (80065fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	58024400 	.word	0x58024400

08006600 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b090      	sub	sp, #64	; 0x40
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660e:	f040 8089 	bne.w	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006612:	4b95      	ldr	r3, [pc, #596]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	2b04      	cmp	r3, #4
 8006620:	d87d      	bhi.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006622:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	0800663d 	.word	0x0800663d
 800662c:	08006661 	.word	0x08006661
 8006630:	08006685 	.word	0x08006685
 8006634:	08006719 	.word	0x08006719
 8006638:	080066a9 	.word	0x080066a9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800663c:	4b8a      	ldr	r3, [pc, #552]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006648:	d107      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800664a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800664e:	4618      	mov	r0, r3
 8006650:	f000 feb8 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006658:	e3ed      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800665e:	e3ea      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006660:	4b81      	ldr	r3, [pc, #516]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800666c:	d107      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666e:	f107 0318 	add.w	r3, r7, #24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fbfe 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800667c:	e3db      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006682:	e3d8      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006684:	4b78      	ldr	r3, [pc, #480]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d107      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006692:	f107 030c 	add.w	r3, r7, #12
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fd40 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066a0:	e3c9      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a6:	e3c6      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066a8:	4b6f      	ldr	r3, [pc, #444]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066b2:	4b6d      	ldr	r3, [pc, #436]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d10c      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80066be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066c4:	4b68      	ldr	r3, [pc, #416]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	08db      	lsrs	r3, r3, #3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	4a67      	ldr	r2, [pc, #412]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d6:	e01e      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066d8:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e4:	d106      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80066e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ec:	d102      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066ee:	4b60      	ldr	r3, [pc, #384]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f2:	e010      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066f4:	4b5c      	ldr	r3, [pc, #368]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006700:	d106      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006708:	d102      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800670a:	4b5a      	ldr	r3, [pc, #360]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800670c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670e:	e002      	b.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006714:	e38f      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006716:	e38e      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006718:	4b57      	ldr	r3, [pc, #348]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671c:	e38b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006722:	e388      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672a:	f040 80a7 	bne.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800672e:	4b4e      	ldr	r3, [pc, #312]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006736:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800673e:	d054      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006746:	f200 808b 	bhi.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006750:	f000 8083 	beq.w	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800675a:	f200 8081 	bhi.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d02f      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676c:	d878      	bhi.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800677a:	d012      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800677c:	e070      	b.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800677e:	4b3a      	ldr	r3, [pc, #232]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800678a:	d107      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800678c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fe17 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800679a:	e34c      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a0:	e349      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067a2:	4b31      	ldr	r3, [pc, #196]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b0:	f107 0318 	add.w	r3, r7, #24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fb5d 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067be:	e33a      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c4:	e337      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067c6:	4b28      	ldr	r3, [pc, #160]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d2:	d107      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d4:	f107 030c 	add.w	r3, r7, #12
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fc9f 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067e2:	e328      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e8:	e325      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067ea:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067f4:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d10c      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	4a16      	ldr	r2, [pc, #88]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006818:	e01e      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006830:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006834:	e010      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006842:	d106      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684a:	d102      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006850:	e002      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006856:	e2ee      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006858:	e2ed      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685e:	e2ea      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006864:	e2e7      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006866:	bf00      	nop
 8006868:	58024400 	.word	0x58024400
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
 8006874:	007a1200 	.word	0x007a1200
 8006878:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006882:	f040 809c 	bne.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006886:	4b9e      	ldr	r3, [pc, #632]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800688e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006896:	d054      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800689e:	f200 808b 	bhi.w	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068a8:	f000 8083 	beq.w	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068b2:	f200 8081 	bhi.w	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068bc:	d02f      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068c4:	d878      	bhi.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068d2:	d012      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80068d4:	e070      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068d6:	4b8a      	ldr	r3, [pc, #552]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068e2:	d107      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fd6b 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f2:	e2a0      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068f8:	e29d      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068fa:	4b81      	ldr	r3, [pc, #516]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006908:	f107 0318 	add.w	r3, r7, #24
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fab1 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006916:	e28e      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691c:	e28b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800691e:	4b78      	ldr	r3, [pc, #480]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692a:	d107      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fbf3 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800693a:	e27c      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006940:	e279      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006942:	4b6f      	ldr	r3, [pc, #444]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800694a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800694c:	4b6c      	ldr	r3, [pc, #432]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d10c      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800695e:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	08db      	lsrs	r3, r3, #3
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	4a66      	ldr	r2, [pc, #408]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800696a:	fa22 f303 	lsr.w	r3, r2, r3
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006970:	e01e      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006972:	4b63      	ldr	r3, [pc, #396]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d106      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8006980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006988:	4b5f      	ldr	r3, [pc, #380]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698c:	e010      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800698e:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800699a:	d106      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a2:	d102      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80069a4:	4b59      	ldr	r3, [pc, #356]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a8:	e002      	b.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80069ae:	e242      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80069b0:	e241      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069b2:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b6:	e23e      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069bc:	e23b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	f040 80a6 	bne.w	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80069c8:	4b4d      	ldr	r3, [pc, #308]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d8:	d054      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	f200 808b 	bhi.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ea:	f000 8083 	beq.w	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069f4:	f200 8081 	bhi.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fe:	d02f      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a06:	d878      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d012      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006a16:	e070      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a18:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a24:	d107      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fcca 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a34:	e1ff      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3a:	e1fc      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a3c:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a48:	d107      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4a:	f107 0318 	add.w	r3, r7, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fa10 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a58:	e1ed      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5e:	e1ea      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fb52 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a7c:	e1db      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a82:	e1d8      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a84:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a8e:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d10c      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aa0:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	08db      	lsrs	r3, r3, #3
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab2:	e01e      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006aca:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ace:	e010      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006adc:	d106      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae4:	d102      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aea:	e002      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006af0:	e1a1      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006af2:	e1a0      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af8:	e19d      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006afe:	e19a      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006b00:	58024400 	.word	0x58024400
 8006b04:	03d09000 	.word	0x03d09000
 8006b08:	003d0900 	.word	0x003d0900
 8006b0c:	007a1200 	.word	0x007a1200
 8006b10:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b1a:	d173      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006b1c:	4b9a      	ldr	r3, [pc, #616]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b2c:	d02f      	beq.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b34:	d863      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b42:	d012      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006b44:	e05b      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b46:	4b90      	ldr	r3, [pc, #576]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b52:	d107      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b54:	f107 0318 	add.w	r3, r7, #24
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f98b 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b62:	e168      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b68:	e165      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b6a:	4b87      	ldr	r3, [pc, #540]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b76:	d107      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 facd 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b86:	e156      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b8c:	e153      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b8e:	4b7e      	ldr	r3, [pc, #504]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b98:	4b7b      	ldr	r3, [pc, #492]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006baa:	4b77      	ldr	r3, [pc, #476]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	08db      	lsrs	r3, r3, #3
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	4a75      	ldr	r2, [pc, #468]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bbc:	e01e      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bbe:	4b72      	ldr	r3, [pc, #456]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bca:	d106      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd2:	d102      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006bd4:	4b6e      	ldr	r3, [pc, #440]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd8:	e010      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bda:	4b6b      	ldr	r3, [pc, #428]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006bf0:	4b68      	ldr	r3, [pc, #416]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	e002      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bfa:	e11c      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006bfc:	e11b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c02:	e118      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0a:	d133      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006c0c:	4b5e      	ldr	r3, [pc, #376]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c22:	d012      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006c24:	e023      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c26:	4b58      	ldr	r3, [pc, #352]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c32:	d107      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fbc3 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c42:	e0f8      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c48:	e0f5      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c56:	d107      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c58:	f107 0318 	add.w	r3, r7, #24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f909 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006c66:	e0e6      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c6c:	e0e3      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c72:	e0e0      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7a:	f040 808d 	bne.w	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006c7e:	4b42      	ldr	r3, [pc, #264]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c82:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c8e:	d06b      	beq.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c96:	d874      	bhi.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9e:	d056      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d86c      	bhi.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cae:	d03b      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cb6:	d864      	bhi.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cbe:	d021      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc6:	d85c      	bhi.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd4:	d004      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006cd6:	e054      	b.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cd8:	f000 f8b6 	bl	8006e48 <HAL_RCCEx_GetD3PCLK1Freq>
 8006cdc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006cde:	e0aa      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce0:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cee:	f107 0318 	add.w	r3, r7, #24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f8be 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cfc:	e09b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d02:	e098      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d04:	4b20      	ldr	r3, [pc, #128]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d12:	f107 030c 	add.w	r3, r7, #12
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fa00 	bl	800711c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d20:	e089      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d26:	e086      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d28:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d109      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d46:	e076      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4c:	e073      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d102      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d60:	e069      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d66:	e066      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d74:	d102      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d7a:	e05c      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d80:	e059      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d86:	e056      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9e:	d148      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006da8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db0:	d02a      	beq.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db8:	d838      	bhi.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dc6:	d00d      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006dc8:	e030      	b.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006dca:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd6:	d102      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006dd8:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ddc:	e02b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006de2:	e028      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fae4 	bl	80073c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e00:	e019      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e06:	e016      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e16:	f107 0318 	add.w	r3, r7, #24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f82a 	bl	8006e74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e24:	e007      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e30:	e001      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3740      	adds	r7, #64	; 0x40
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	58024400 	.word	0x58024400
 8006e44:	007a1200 	.word	0x007a1200

08006e48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e4c:	f7fe fc56 	bl	80056fc <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4904      	ldr	r1, [pc, #16]	; (8006e70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	58024400 	.word	0x58024400
 8006e70:	0800d980 	.word	0x0800d980

08006e74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	; 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e7c:	4ba1      	ldr	r3, [pc, #644]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e86:	4b9f      	ldr	r3, [pc, #636]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	0b1b      	lsrs	r3, r3, #12
 8006e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e92:	4b9c      	ldr	r3, [pc, #624]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e9e:	4b99      	ldr	r3, [pc, #612]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	08db      	lsrs	r3, r3, #3
 8006ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8111 	beq.w	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	f000 8083 	beq.w	8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	f200 80a1 	bhi.w	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d003      	beq.n	8006ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d056      	beq.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ede:	e099      	b.n	8007014 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee0:	4b88      	ldr	r3, [pc, #544]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02d      	beq.n	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eec:	4b85      	ldr	r3, [pc, #532]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	08db      	lsrs	r3, r3, #3
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	4a84      	ldr	r2, [pc, #528]	; (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b7b      	ldr	r3, [pc, #492]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f46:	e087      	b.n	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b6a      	ldr	r3, [pc, #424]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f8a:	e065      	b.n	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	4b59      	ldr	r3, [pc, #356]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fce:	e043      	b.n	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe2:	4b48      	ldr	r3, [pc, #288]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800700e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007012:	e021      	b.n	8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007026:	4b37      	ldr	r3, [pc, #220]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	ed97 6a03 	vldr	s12, [r7, #12]
 800703a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800703e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800704a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007056:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007058:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	0a5b      	lsrs	r3, r3, #9
 800705e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007072:	edd7 6a07 	vldr	s13, [r7, #28]
 8007076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707e:	ee17 2a90 	vmov	r2, s15
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007086:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800709c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ac:	ee17 2a90 	vmov	r2, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80070b4:	4b13      	ldr	r3, [pc, #76]	; (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070da:	ee17 2a90 	vmov	r2, s15
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070e2:	e008      	b.n	80070f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	609a      	str	r2, [r3, #8]
}
 80070f6:	bf00      	nop
 80070f8:	3724      	adds	r7, #36	; 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	03d09000 	.word	0x03d09000
 800710c:	46000000 	.word	0x46000000
 8007110:	4c742400 	.word	0x4c742400
 8007114:	4a742400 	.word	0x4a742400
 8007118:	4af42400 	.word	0x4af42400

0800711c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800711c:	b480      	push	{r7}
 800711e:	b089      	sub	sp, #36	; 0x24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007124:	4ba1      	ldr	r3, [pc, #644]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800712e:	4b9f      	ldr	r3, [pc, #636]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	0d1b      	lsrs	r3, r3, #20
 8007134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007138:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800713a:	4b9c      	ldr	r3, [pc, #624]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007146:	4b99      	ldr	r3, [pc, #612]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	08db      	lsrs	r3, r3, #3
 800714c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	fb02 f303 	mul.w	r3, r2, r3
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8111 	beq.w	800738c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f000 8083 	beq.w	8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f200 80a1 	bhi.w	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d056      	beq.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007186:	e099      	b.n	80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007188:	4b88      	ldr	r3, [pc, #544]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02d      	beq.n	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007194:	4b85      	ldr	r3, [pc, #532]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	08db      	lsrs	r3, r3, #3
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	4a84      	ldr	r2, [pc, #528]	; (80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
 80071a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b7b      	ldr	r3, [pc, #492]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071ee:	e087      	b.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b6a      	ldr	r3, [pc, #424]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007232:	e065      	b.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b59      	ldr	r3, [pc, #356]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a03 	vldr	s12, [r7, #12]
 800725a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007276:	e043      	b.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b48      	ldr	r3, [pc, #288]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a03 	vldr	s12, [r7, #12]
 800729e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ba:	e021      	b.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ce:	4b37      	ldr	r3, [pc, #220]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072de:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007300:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	0a5b      	lsrs	r3, r3, #9
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731a:	edd7 6a07 	vldr	s13, [r7, #28]
 800731e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007326:	ee17 2a90 	vmov	r2, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800732e:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007348:	edd7 6a07 	vldr	s13, [r7, #28]
 800734c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007354:	ee17 2a90 	vmov	r2, s15
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800735c:	4b13      	ldr	r3, [pc, #76]	; (80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	0e1b      	lsrs	r3, r3, #24
 8007362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007376:	edd7 6a07 	vldr	s13, [r7, #28]
 800737a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007382:	ee17 2a90 	vmov	r2, s15
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800738a:	e008      	b.n	800739e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	609a      	str	r2, [r3, #8]
}
 800739e:	bf00      	nop
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	03d09000 	.word	0x03d09000
 80073b4:	46000000 	.word	0x46000000
 80073b8:	4c742400 	.word	0x4c742400
 80073bc:	4a742400 	.word	0x4a742400
 80073c0:	4af42400 	.word	0x4af42400

080073c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073cc:	4ba0      	ldr	r3, [pc, #640]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073d6:	4b9e      	ldr	r3, [pc, #632]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	091b      	lsrs	r3, r3, #4
 80073dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073e2:	4b9b      	ldr	r3, [pc, #620]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073ec:	4b98      	ldr	r3, [pc, #608]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80073ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007404:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8111 	beq.w	8007632 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b02      	cmp	r3, #2
 8007414:	f000 8083 	beq.w	800751e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b02      	cmp	r3, #2
 800741c:	f200 80a1 	bhi.w	8007562 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d056      	beq.n	80074da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800742c:	e099      	b.n	8007562 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800742e:	4b88      	ldr	r3, [pc, #544]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d02d      	beq.n	8007496 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800743a:	4b85      	ldr	r3, [pc, #532]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	08db      	lsrs	r3, r3, #3
 8007440:	f003 0303 	and.w	r3, r3, #3
 8007444:	4a83      	ldr	r2, [pc, #524]	; (8007654 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007446:	fa22 f303 	lsr.w	r3, r2, r3
 800744a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	ee07 3a90 	vmov	s15, r3
 800745c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007464:	4b7a      	ldr	r3, [pc, #488]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007474:	ed97 6a03 	vldr	s12, [r7, #12]
 8007478:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800747c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007490:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007494:	e087      	b.n	80075a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800765c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80074a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a8:	4b69      	ldr	r3, [pc, #420]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d8:	e065      	b.n	80075a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007660 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80074e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ec:	4b58      	ldr	r3, [pc, #352]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f4:	ee07 3a90 	vmov	s15, r3
 80074f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007500:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751c:	e043      	b.n	80075a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007528:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007664 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800752c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007530:	4b47      	ldr	r3, [pc, #284]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007540:	ed97 6a03 	vldr	s12, [r7, #12]
 8007544:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007560:	e021      	b.n	80075a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800765c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007574:	4b36      	ldr	r3, [pc, #216]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757c:	ee07 3a90 	vmov	s15, r3
 8007580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007584:	ed97 6a03 	vldr	s12, [r7, #12]
 8007588:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007658 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800758c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80075a6:	4b2a      	ldr	r3, [pc, #168]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	0a5b      	lsrs	r3, r3, #9
 80075ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075cc:	ee17 2a90 	vmov	r2, s15
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075d4:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fa:	ee17 2a90 	vmov	r2, s15
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	0e1b      	lsrs	r3, r3, #24
 8007608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800761c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007628:	ee17 2a90 	vmov	r2, s15
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007630:	e008      	b.n	8007644 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	3724      	adds	r7, #36	; 0x24
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	58024400 	.word	0x58024400
 8007654:	03d09000 	.word	0x03d09000
 8007658:	46000000 	.word	0x46000000
 800765c:	4c742400 	.word	0x4c742400
 8007660:	4a742400 	.word	0x4a742400
 8007664:	4af42400 	.word	0x4af42400

08007668 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007676:	4b53      	ldr	r3, [pc, #332]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d101      	bne.n	8007686 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e099      	b.n	80077ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007686:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4e      	ldr	r2, [pc, #312]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800768c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007692:	f7f9 fdc3 	bl	800121c <HAL_GetTick>
 8007696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007698:	e008      	b.n	80076ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800769a:	f7f9 fdbf 	bl	800121c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e086      	b.n	80077ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ac:	4b45      	ldr	r3, [pc, #276]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076b8:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	031b      	lsls	r3, r3, #12
 80076c6:	493f      	ldr	r1, [pc, #252]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	628b      	str	r3, [r1, #40]	; 0x28
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	3b01      	subs	r3, #1
 80076dc:	025b      	lsls	r3, r3, #9
 80076de:	b29b      	uxth	r3, r3
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	061b      	lsls	r3, r3, #24
 80076f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076fc:	4931      	ldr	r1, [pc, #196]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007702:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	492d      	ldr	r1, [pc, #180]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007714:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	f023 0220 	bic.w	r2, r3, #32
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	4928      	ldr	r1, [pc, #160]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007726:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a26      	ldr	r2, [pc, #152]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800772c:	f023 0310 	bic.w	r3, r3, #16
 8007730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <RCCEx_PLL2_Config+0x160>)
 8007738:	4013      	ands	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	69d2      	ldr	r2, [r2, #28]
 800773e:	00d2      	lsls	r2, r2, #3
 8007740:	4920      	ldr	r1, [pc, #128]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007746:	4b1f      	ldr	r3, [pc, #124]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800774c:	f043 0310 	orr.w	r3, r3, #16
 8007750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800775e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007764:	e00f      	b.n	8007786 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d106      	bne.n	800777a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007778:	e005      	b.n	8007786 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800777a:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4a11      	ldr	r2, [pc, #68]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800778c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007792:	f7f9 fd43 	bl	800121c <HAL_GetTick>
 8007796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007798:	e008      	b.n	80077ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800779a:	f7f9 fd3f 	bl	800121c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e006      	b.n	80077ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	ffff0007 	.word	0xffff0007

080077cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077da:	4b53      	ldr	r3, [pc, #332]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d101      	bne.n	80077ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e099      	b.n	800791e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077ea:	4b4f      	ldr	r3, [pc, #316]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a4e      	ldr	r2, [pc, #312]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f6:	f7f9 fd11 	bl	800121c <HAL_GetTick>
 80077fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077fc:	e008      	b.n	8007810 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077fe:	f7f9 fd0d 	bl	800121c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e086      	b.n	800791e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007810:	4b45      	ldr	r3, [pc, #276]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800781c:	4b42      	ldr	r3, [pc, #264]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	051b      	lsls	r3, r3, #20
 800782a:	493f      	ldr	r1, [pc, #252]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800782c:	4313      	orrs	r3, r2
 800782e:	628b      	str	r3, [r1, #40]	; 0x28
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	3b01      	subs	r3, #1
 8007836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	025b      	lsls	r3, r3, #9
 8007842:	b29b      	uxth	r3, r3
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	3b01      	subs	r3, #1
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	3b01      	subs	r3, #1
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007860:	4931      	ldr	r1, [pc, #196]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007866:	4b30      	ldr	r3, [pc, #192]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	492d      	ldr	r1, [pc, #180]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007874:	4313      	orrs	r3, r2
 8007876:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	4928      	ldr	r1, [pc, #160]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800788a:	4b27      	ldr	r3, [pc, #156]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a26      	ldr	r2, [pc, #152]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <RCCEx_PLL3_Config+0x160>)
 800789c:	4013      	ands	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	69d2      	ldr	r2, [r2, #28]
 80078a2:	00d2      	lsls	r2, r2, #3
 80078a4:	4920      	ldr	r1, [pc, #128]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078aa:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a19      	ldr	r2, [pc, #100]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078c8:	e00f      	b.n	80078ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d106      	bne.n	80078de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078dc:	e005      	b.n	80078ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	4a11      	ldr	r2, [pc, #68]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f6:	f7f9 fc91 	bl	800121c <HAL_GetTick>
 80078fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078fc:	e008      	b.n	8007910 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078fe:	f7f9 fc8d 	bl	800121c <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e006      	b.n	800791e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	58024400 	.word	0x58024400
 800792c:	ffff0007 	.word	0xffff0007

08007930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e049      	b.n	80079d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7f9 f942 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f000 fa32 	bl	8007dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d001      	beq.n	80079f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e05e      	b.n	8007ab6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2b      	ldr	r2, [pc, #172]	; (8007ac4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d02c      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d027      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a26      	ldr	r2, [pc, #152]	; (8007acc <HAL_TIM_Base_Start_IT+0xec>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d01d      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xf0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xf4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a21      	ldr	r2, [pc, #132]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xf8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a20      	ldr	r2, [pc, #128]	; (8007adc <HAL_TIM_Base_Start_IT+0xfc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <HAL_TIM_Base_Start_IT+0x100>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x94>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_TIM_Base_Start_IT+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d115      	bne.n	8007aa0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <HAL_TIM_Base_Start_IT+0x108>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d015      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xd2>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d011      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	e008      	b.n	8007ab2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e000      	b.n	8007ab4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40001800 	.word	0x40001800
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	4000e000 	.word	0x4000e000
 8007ae4:	4000e400 	.word	0x4000e400
 8007ae8:	00010007 	.word	0x00010007

08007aec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10f      	bne.n	8007b34 <HAL_TIM_Base_Stop_IT+0x48>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d107      	bne.n	8007b34 <HAL_TIM_Base_Stop_IT+0x48>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d122      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d11b      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f06f 0202 	mvn.w	r2, #2
 8007b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f905 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007b92:	e005      	b.n	8007ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8f7 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f908 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d122      	bne.n	8007bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d11b      	bne.n	8007bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f06f 0204 	mvn.w	r2, #4
 8007bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8db 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007be6:	e005      	b.n	8007bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8cd 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8de 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d122      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d11b      	bne.n	8007c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0208 	mvn.w	r2, #8
 8007c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f8b1 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007c3a:	e005      	b.n	8007c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f8a3 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8b4 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d122      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0310 	and.w	r3, r3, #16
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d11b      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f06f 0210 	mvn.w	r2, #16
 8007c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2208      	movs	r2, #8
 8007c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f887 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007c8e:	e005      	b.n	8007c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f879 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f88a 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10e      	bne.n	8007cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f06f 0201 	mvn.w	r2, #1
 8007cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f8 fe99 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b80      	cmp	r3, #128	; 0x80
 8007cda:	d10e      	bne.n	8007cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d107      	bne.n	8007cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9bb 	bl	8008070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9ae 	bl	8008084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f838 	bl	8007dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d10e      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d107      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0220 	mvn.w	r2, #32
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f96e 	bl	800805c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a44      	ldr	r2, [pc, #272]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d00f      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a41      	ldr	r2, [pc, #260]	; (8007f00 <TIM_Base_SetConfig+0x128>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00b      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a40      	ldr	r2, [pc, #256]	; (8007f04 <TIM_Base_SetConfig+0x12c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d007      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <TIM_Base_SetConfig+0x130>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a3e      	ldr	r2, [pc, #248]	; (8007f0c <TIM_Base_SetConfig+0x134>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d108      	bne.n	8007e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a33      	ldr	r2, [pc, #204]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d027      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e38:	d023      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a30      	ldr	r2, [pc, #192]	; (8007f00 <TIM_Base_SetConfig+0x128>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01f      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2f      	ldr	r2, [pc, #188]	; (8007f04 <TIM_Base_SetConfig+0x12c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01b      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2e      	ldr	r2, [pc, #184]	; (8007f08 <TIM_Base_SetConfig+0x130>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d017      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2d      	ldr	r2, [pc, #180]	; (8007f0c <TIM_Base_SetConfig+0x134>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2c      	ldr	r2, [pc, #176]	; (8007f10 <TIM_Base_SetConfig+0x138>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00f      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2b      	ldr	r2, [pc, #172]	; (8007f14 <TIM_Base_SetConfig+0x13c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00b      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <TIM_Base_SetConfig+0x140>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d007      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <TIM_Base_SetConfig+0x144>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d003      	beq.n	8007e82 <TIM_Base_SetConfig+0xaa>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <TIM_Base_SetConfig+0x148>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d108      	bne.n	8007e94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a10      	ldr	r2, [pc, #64]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00f      	beq.n	8007ee0 <TIM_Base_SetConfig+0x108>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <TIM_Base_SetConfig+0x134>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <TIM_Base_SetConfig+0x108>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a11      	ldr	r2, [pc, #68]	; (8007f10 <TIM_Base_SetConfig+0x138>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_Base_SetConfig+0x108>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <TIM_Base_SetConfig+0x13c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_Base_SetConfig+0x108>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <TIM_Base_SetConfig+0x140>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d103      	bne.n	8007ee8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	615a      	str	r2, [r3, #20]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40000400 	.word	0x40000400
 8007f04:	40000800 	.word	0x40000800
 8007f08:	40000c00 	.word	0x40000c00
 8007f0c:	40010400 	.word	0x40010400
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40014400 	.word	0x40014400
 8007f18:	40014800 	.word	0x40014800
 8007f1c:	4000e000 	.word	0x4000e000
 8007f20:	4000e400 	.word	0x4000e400

08007f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e077      	b.n	800802c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a35      	ldr	r2, [pc, #212]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a34      	ldr	r2, [pc, #208]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d108      	bne.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a25      	ldr	r2, [pc, #148]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d02c      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fae:	d027      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a22      	ldr	r2, [pc, #136]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d022      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a21      	ldr	r2, [pc, #132]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d01d      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d018      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1a      	ldr	r2, [pc, #104]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d013      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1b      	ldr	r2, [pc, #108]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00e      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d009      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a18      	ldr	r2, [pc, #96]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10c      	bne.n	800801a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	4313      	orrs	r3, r2
 8008010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	40010000 	.word	0x40010000
 800803c:	40010400 	.word	0x40010400
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40001800 	.word	0x40001800
 8008050:	40014000 	.word	0x40014000
 8008054:	4000e000 	.word	0x4000e000
 8008058:	4000e400 	.word	0x4000e400

0800805c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008098:	b084      	sub	sp, #16
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	f107 001c 	add.w	r0, r7, #28
 80080a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d120      	bne.n	80080f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	4b2a      	ldr	r3, [pc, #168]	; (800816c <USB_CoreInit+0xd4>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d105      	bne.n	80080e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 fb14 	bl	8009714 <USB_CoreReset>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e01a      	b.n	8008128 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fb08 	bl	8009714 <USB_CoreReset>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
 800811a:	e005      	b.n	8008128 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	2b01      	cmp	r3, #1
 800812c:	d116      	bne.n	800815c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800813c:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <USB_CoreInit+0xd8>)
 800813e:	4313      	orrs	r3, r2
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f043 0206 	orr.w	r2, r3, #6
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f043 0220 	orr.w	r2, r3, #32
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008168:	b004      	add	sp, #16
 800816a:	4770      	bx	lr
 800816c:	ffbdffbf 	.word	0xffbdffbf
 8008170:	03ee0000 	.word	0x03ee0000

08008174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008182:	79fb      	ldrb	r3, [r7, #7]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d165      	bne.n	8008254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4a41      	ldr	r2, [pc, #260]	; (8008290 <USB_SetTurnaroundTime+0x11c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d906      	bls.n	800819e <USB_SetTurnaroundTime+0x2a>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4a40      	ldr	r2, [pc, #256]	; (8008294 <USB_SetTurnaroundTime+0x120>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d202      	bcs.n	800819e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008198:	230f      	movs	r3, #15
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e062      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a3c      	ldr	r2, [pc, #240]	; (8008294 <USB_SetTurnaroundTime+0x120>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d306      	bcc.n	80081b4 <USB_SetTurnaroundTime+0x40>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a3b      	ldr	r2, [pc, #236]	; (8008298 <USB_SetTurnaroundTime+0x124>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d202      	bcs.n	80081b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081ae:	230e      	movs	r3, #14
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e057      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4a38      	ldr	r2, [pc, #224]	; (8008298 <USB_SetTurnaroundTime+0x124>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d306      	bcc.n	80081ca <USB_SetTurnaroundTime+0x56>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4a37      	ldr	r2, [pc, #220]	; (800829c <USB_SetTurnaroundTime+0x128>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d202      	bcs.n	80081ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081c4:	230d      	movs	r3, #13
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e04c      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4a33      	ldr	r2, [pc, #204]	; (800829c <USB_SetTurnaroundTime+0x128>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d306      	bcc.n	80081e0 <USB_SetTurnaroundTime+0x6c>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4a32      	ldr	r2, [pc, #200]	; (80082a0 <USB_SetTurnaroundTime+0x12c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d802      	bhi.n	80081e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081da:	230c      	movs	r3, #12
 80081dc:	617b      	str	r3, [r7, #20]
 80081de:	e041      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <USB_SetTurnaroundTime+0x12c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d906      	bls.n	80081f6 <USB_SetTurnaroundTime+0x82>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4a2e      	ldr	r2, [pc, #184]	; (80082a4 <USB_SetTurnaroundTime+0x130>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d802      	bhi.n	80081f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081f0:	230b      	movs	r3, #11
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e036      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4a2a      	ldr	r2, [pc, #168]	; (80082a4 <USB_SetTurnaroundTime+0x130>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d906      	bls.n	800820c <USB_SetTurnaroundTime+0x98>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4a29      	ldr	r2, [pc, #164]	; (80082a8 <USB_SetTurnaroundTime+0x134>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d802      	bhi.n	800820c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008206:	230a      	movs	r3, #10
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e02b      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4a26      	ldr	r2, [pc, #152]	; (80082a8 <USB_SetTurnaroundTime+0x134>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d906      	bls.n	8008222 <USB_SetTurnaroundTime+0xae>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4a25      	ldr	r2, [pc, #148]	; (80082ac <USB_SetTurnaroundTime+0x138>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d202      	bcs.n	8008222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800821c:	2309      	movs	r3, #9
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e020      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4a21      	ldr	r2, [pc, #132]	; (80082ac <USB_SetTurnaroundTime+0x138>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d306      	bcc.n	8008238 <USB_SetTurnaroundTime+0xc4>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <USB_SetTurnaroundTime+0x13c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d802      	bhi.n	8008238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008232:	2308      	movs	r3, #8
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	e015      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <USB_SetTurnaroundTime+0x13c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d906      	bls.n	800824e <USB_SetTurnaroundTime+0xda>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <USB_SetTurnaroundTime+0x140>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d202      	bcs.n	800824e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008248:	2307      	movs	r3, #7
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	e00a      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800824e:	2306      	movs	r3, #6
 8008250:	617b      	str	r3, [r7, #20]
 8008252:	e007      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800825a:	2309      	movs	r3, #9
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e001      	b.n	8008264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008260:	2309      	movs	r3, #9
 8008262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	029b      	lsls	r3, r3, #10
 8008278:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800827c:	431a      	orrs	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	00d8acbf 	.word	0x00d8acbf
 8008294:	00e4e1c0 	.word	0x00e4e1c0
 8008298:	00f42400 	.word	0x00f42400
 800829c:	01067380 	.word	0x01067380
 80082a0:	011a499f 	.word	0x011a499f
 80082a4:	01312cff 	.word	0x01312cff
 80082a8:	014ca43f 	.word	0x014ca43f
 80082ac:	016e3600 	.word	0x016e3600
 80082b0:	01a6ab1f 	.word	0x01a6ab1f
 80082b4:	01e84800 	.word	0x01e84800

080082b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f043 0201 	orr.w	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f023 0201 	bic.w	r2, r3, #1
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d106      	bne.n	8008328 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e00b      	b.n	8008340 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d106      	bne.n	800833c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	e001      	b.n	8008340 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e003      	b.n	8008348 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008340:	2032      	movs	r0, #50	; 0x32
 8008342:	f7f8 ff77 	bl	8001234 <HAL_Delay>

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008350:	b084      	sub	sp, #16
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800835e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800836a:	2300      	movs	r3, #0
 800836c:	613b      	str	r3, [r7, #16]
 800836e:	e009      	b.n	8008384 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3340      	adds	r3, #64	; 0x40
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	3301      	adds	r3, #1
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b0e      	cmp	r3, #14
 8008388:	d9f2      	bls.n	8008370 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800838a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d11c      	bne.n	80083ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800839e:	f043 0302 	orr.w	r3, r3, #2
 80083a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	e005      	b.n	80083d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083dc:	461a      	mov	r2, r3
 80083de:	2300      	movs	r3, #0
 80083e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e8:	4619      	mov	r1, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	461a      	mov	r2, r3
 80083f2:	680b      	ldr	r3, [r1, #0]
 80083f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d10c      	bne.n	8008416 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f949 	bl	800869c <USB_SetDevSpeed>
 800840a:	e008      	b.n	800841e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800840c:	2101      	movs	r1, #1
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f944 	bl	800869c <USB_SetDevSpeed>
 8008414:	e003      	b.n	800841e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008416:	2103      	movs	r1, #3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f93f 	bl	800869c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800841e:	2110      	movs	r1, #16
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8f3 	bl	800860c <USB_FlushTxFifo>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f911 	bl	8008658 <USB_FlushRxFifo>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	461a      	mov	r2, r3
 8008460:	2300      	movs	r3, #0
 8008462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	e043      	b.n	80084f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008480:	d118      	bne.n	80084b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	461a      	mov	r2, r3
 8008496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	e013      	b.n	80084c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	461a      	mov	r2, r3
 80084ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e008      	b.n	80084c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	461a      	mov	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3301      	adds	r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3b7      	bcc.n	800846a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fa:	2300      	movs	r3, #0
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	e043      	b.n	8008588 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008516:	d118      	bne.n	800854a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	461a      	mov	r2, r3
 800852c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e013      	b.n	800855c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	461a      	mov	r2, r3
 8008542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	e008      	b.n	800855c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	461a      	mov	r2, r3
 8008558:	2300      	movs	r3, #0
 800855a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	461a      	mov	r2, r3
 800857c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3301      	adds	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d3b7      	bcc.n	8008500 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800859e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f043 0210 	orr.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <USB_DevInit+0x2b4>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f043 0208 	orr.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d105      	bne.n	80085f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <USB_DevInit+0x2b8>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008600:	b004      	add	sp, #16
 8008602:	4770      	bx	lr
 8008604:	803c3800 	.word	0x803c3800
 8008608:	40000004 	.word	0x40000004

0800860c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	019b      	lsls	r3, r3, #6
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3301      	adds	r3, #1
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <USB_FlushTxFifo+0x48>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d901      	bls.n	8008638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e006      	b.n	8008646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b20      	cmp	r3, #32
 8008642:	d0f0      	beq.n	8008626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	00030d40 	.word	0x00030d40

08008658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2210      	movs	r2, #16
 8008668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <USB_FlushRxFifo+0x40>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d901      	bls.n	800867c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e006      	b.n	800868a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b10      	cmp	r3, #16
 8008686:	d0f0      	beq.n	800866a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	00030d40 	.word	0x00030d40

0800869c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086bc:	4313      	orrs	r3, r2
 80086be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f003 0306 	and.w	r3, r3, #6
 80086e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	e00a      	b.n	800870a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d002      	beq.n	8008700 <USB_GetDevSpeed+0x32>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b06      	cmp	r3, #6
 80086fe:	d102      	bne.n	8008706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008700:	2302      	movs	r3, #2
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e001      	b.n	800870a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008706:	230f      	movs	r3, #15
 8008708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d139      	bne.n	80087a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	f003 030f 	and.w	r3, r3, #15
 8008744:	2101      	movs	r1, #1
 8008746:	fa01 f303 	lsl.w	r3, r1, r3
 800874a:	b29b      	uxth	r3, r3
 800874c:	68f9      	ldr	r1, [r7, #12]
 800874e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008752:	4313      	orrs	r3, r2
 8008754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d153      	bne.n	8008814 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	78db      	ldrb	r3, [r3, #3]
 8008786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008790:	431a      	orrs	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	0159      	lsls	r1, r3, #5
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	440b      	add	r3, r1
 800879a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879e:	4619      	mov	r1, r3
 80087a0:	4b20      	ldr	r3, [pc, #128]	; (8008824 <USB_ActivateEndpoint+0x10c>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	600b      	str	r3, [r1, #0]
 80087a6:	e035      	b.n	8008814 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	2101      	movs	r1, #1
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	041b      	lsls	r3, r3, #16
 80087c0:	68f9      	ldr	r1, [r7, #12]
 80087c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c6:	4313      	orrs	r3, r2
 80087c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d119      	bne.n	8008814 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	78db      	ldrb	r3, [r3, #3]
 80087fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087fc:	430b      	orrs	r3, r1
 80087fe:	431a      	orrs	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	0159      	lsls	r1, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	440b      	add	r3, r1
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	4619      	mov	r1, r3
 800880e:	4b05      	ldr	r3, [pc, #20]	; (8008824 <USB_ActivateEndpoint+0x10c>)
 8008810:	4313      	orrs	r3, r2
 8008812:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	10008000 	.word	0x10008000

08008828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d161      	bne.n	8008908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800885a:	d11f      	bne.n	800889c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008876:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800887a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800889a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	2101      	movs	r1, #1
 80088ae:	fa01 f303 	lsl.w	r3, r1, r3
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	68f9      	ldr	r1, [r7, #12]
 80088b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088bc:	4013      	ands	r3, r2
 80088be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	69da      	ldr	r2, [r3, #28]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	43db      	mvns	r3, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e0:	4013      	ands	r3, r2
 80088e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	0159      	lsls	r1, r3, #5
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	440b      	add	r3, r1
 80088fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fe:	4619      	mov	r1, r3
 8008900:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <USB_DeactivateEndpoint+0x1b0>)
 8008902:	4013      	ands	r3, r2
 8008904:	600b      	str	r3, [r1, #0]
 8008906:	e060      	b.n	80089ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800891a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800891e:	d11f      	bne.n	8008960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	440a      	add	r2, r1
 8008936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800893e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800895e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f303 	lsl.w	r3, r1, r3
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	43db      	mvns	r3, r3
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008980:	4013      	ands	r3, r2
 8008982:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	69da      	ldr	r2, [r3, #28]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	43db      	mvns	r3, r3
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a4:	4013      	ands	r3, r2
 80089a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	0159      	lsls	r1, r3, #5
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	440b      	add	r3, r1
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	4619      	mov	r1, r3
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <USB_DeactivateEndpoint+0x1b4>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	ec337800 	.word	0xec337800
 80089dc:	eff37800 	.word	0xeff37800

080089e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	f040 8163 	bne.w	8008cc8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d132      	bne.n	8008a70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	0159      	lsls	r1, r3, #5
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	440b      	add	r3, r1
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	4619      	mov	r1, r3
 8008a26:	4ba5      	ldr	r3, [pc, #660]	; (8008cbc <USB_EPStartXfer+0x2dc>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	0159      	lsls	r1, r3, #5
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	440b      	add	r3, r1
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	4619      	mov	r1, r3
 8008a68:	4b95      	ldr	r3, [pc, #596]	; (8008cc0 <USB_EPStartXfer+0x2e0>)
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	610b      	str	r3, [r1, #16]
 8008a6e:	e074      	b.n	8008b5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	0159      	lsls	r1, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	440b      	add	r3, r1
 8008a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4b8c      	ldr	r3, [pc, #560]	; (8008cc0 <USB_EPStartXfer+0x2e0>)
 8008a8e:	4013      	ands	r3, r2
 8008a90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	0159      	lsls	r1, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	4619      	mov	r1, r3
 8008aae:	4b83      	ldr	r3, [pc, #524]	; (8008cbc <USB_EPStartXfer+0x2dc>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6959      	ldr	r1, [r3, #20]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	440b      	add	r3, r1
 8008acc:	1e59      	subs	r1, r3, #1
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ad6:	04d9      	lsls	r1, r3, #19
 8008ad8:	4b7a      	ldr	r3, [pc, #488]	; (8008cc4 <USB_EPStartXfer+0x2e4>)
 8008ada:	400b      	ands	r3, r1
 8008adc:	69b9      	ldr	r1, [r7, #24]
 8008ade:	0148      	lsls	r0, r1, #5
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	0148      	lsls	r0, r1, #5
 8008b06:	69f9      	ldr	r1, [r7, #28]
 8008b08:	4401      	add	r1, r0
 8008b0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	78db      	ldrb	r3, [r3, #3]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d11f      	bne.n	8008b5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d14b      	bne.n	8008bf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	461a      	mov	r2, r3
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	78db      	ldrb	r3, [r3, #3]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d128      	bne.n	8008bd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d110      	bne.n	8008bb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e00f      	b.n	8008bd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	e133      	b.n	8008e60 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	78db      	ldrb	r3, [r3, #3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d015      	beq.n	8008c4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 811b 	beq.w	8008e60 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c40:	69f9      	ldr	r1, [r7, #28]
 8008c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c46:	4313      	orrs	r3, r2
 8008c48:	634b      	str	r3, [r1, #52]	; 0x34
 8008c4a:	e109      	b.n	8008e60 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d110      	bne.n	8008c7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	e00f      	b.n	8008c9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	68d9      	ldr	r1, [r3, #12]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	b298      	uxth	r0, r3
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 fa38 	bl	8009128 <USB_WritePacket>
 8008cb8:	e0d2      	b.n	8008e60 <USB_EPStartXfer+0x480>
 8008cba:	bf00      	nop
 8008cbc:	e007ffff 	.word	0xe007ffff
 8008cc0:	fff80000 	.word	0xfff80000
 8008cc4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	0159      	lsls	r1, r3, #5
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4b61      	ldr	r3, [pc, #388]	; (8008e6c <USB_EPStartXfer+0x48c>)
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	0159      	lsls	r1, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	440b      	add	r3, r1
 8008d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d04:	4619      	mov	r1, r3
 8008d06:	4b5a      	ldr	r3, [pc, #360]	; (8008e70 <USB_EPStartXfer+0x490>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d123      	bne.n	8008d5c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2a:	69b9      	ldr	r1, [r7, #24]
 8008d2c:	0148      	lsls	r0, r1, #5
 8008d2e:	69f9      	ldr	r1, [r7, #28]
 8008d30:	4401      	add	r1, r0
 8008d32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d36:	4313      	orrs	r3, r2
 8008d38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d58:	6113      	str	r3, [r2, #16]
 8008d5a:	e033      	b.n	8008dc4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	1e5a      	subs	r2, r3, #1
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d70:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	8afb      	ldrh	r3, [r7, #22]
 8008d82:	04d9      	lsls	r1, r3, #19
 8008d84:	4b3b      	ldr	r3, [pc, #236]	; (8008e74 <USB_EPStartXfer+0x494>)
 8008d86:	400b      	ands	r3, r1
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	0148      	lsls	r0, r1, #5
 8008d8c:	69f9      	ldr	r1, [r7, #28]
 8008d8e:	4401      	add	r1, r0
 8008d90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d94:	4313      	orrs	r3, r2
 8008d96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	8af9      	ldrh	r1, [r7, #22]
 8008dac:	fb01 f303 	mul.w	r3, r1, r3
 8008db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008db4:	69b9      	ldr	r1, [r7, #24]
 8008db6:	0148      	lsls	r0, r1, #5
 8008db8:	69f9      	ldr	r1, [r7, #28]
 8008dba:	4401      	add	r1, r0
 8008dbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d10d      	bne.n	8008de6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	68d9      	ldr	r1, [r3, #12]
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	460a      	mov	r2, r1
 8008de4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d128      	bne.n	8008e40 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d110      	bne.n	8008e20 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	0151      	lsls	r1, r2, #5
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	440a      	add	r2, r1
 8008e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e00f      	b.n	8008e40 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	0151      	lsls	r1, r2, #5
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	440a      	add	r2, r1
 8008e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	fff80000 	.word	0xfff80000
 8008e70:	e007ffff 	.word	0xe007ffff
 8008e74:	1ff80000 	.word	0x1ff80000

08008e78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	f040 80cd 	bne.w	8009034 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d132      	bne.n	8008f08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	0159      	lsls	r1, r3, #5
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	440b      	add	r3, r1
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4b98      	ldr	r3, [pc, #608]	; (8009120 <USB_EP0StartXfer+0x2a8>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	0159      	lsls	r1, r3, #5
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	440b      	add	r3, r1
 8008efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efe:	4619      	mov	r1, r3
 8008f00:	4b88      	ldr	r3, [pc, #544]	; (8009124 <USB_EP0StartXfer+0x2ac>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	610b      	str	r3, [r1, #16]
 8008f06:	e04e      	b.n	8008fa6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	691a      	ldr	r2, [r3, #16]
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	0159      	lsls	r1, r3, #5
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	4619      	mov	r1, r3
 8008f24:	4b7f      	ldr	r3, [pc, #508]	; (8009124 <USB_EP0StartXfer+0x2ac>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	0159      	lsls	r1, r3, #5
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	440b      	add	r3, r1
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	4619      	mov	r1, r3
 8008f46:	4b76      	ldr	r3, [pc, #472]	; (8009120 <USB_EP0StartXfer+0x2a8>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d903      	bls.n	8008f60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8c:	691a      	ldr	r2, [r3, #16]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f96:	6939      	ldr	r1, [r7, #16]
 8008f98:	0148      	lsls	r0, r1, #5
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	4401      	add	r1, r0
 8008f9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d11e      	bne.n	8008fea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	e092      	b.n	8009110 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009004:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009008:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d07e      	beq.n	8009110 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	2101      	movs	r1, #1
 8009024:	fa01 f303 	lsl.w	r3, r1, r3
 8009028:	6979      	ldr	r1, [r7, #20]
 800902a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800902e:	4313      	orrs	r3, r2
 8009030:	634b      	str	r3, [r1, #52]	; 0x34
 8009032:	e06d      	b.n	8009110 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	0159      	lsls	r1, r3, #5
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	440b      	add	r3, r1
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	4619      	mov	r1, r3
 8009050:	4b34      	ldr	r3, [pc, #208]	; (8009124 <USB_EP0StartXfer+0x2ac>)
 8009052:	4013      	ands	r3, r2
 8009054:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	0159      	lsls	r1, r3, #5
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	440b      	add	r3, r1
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	4619      	mov	r1, r3
 8009072:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <USB_EP0StartXfer+0x2a8>)
 8009074:	4013      	ands	r3, r2
 8009076:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	440a      	add	r2, r1
 800909e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	691a      	ldr	r2, [r3, #16]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090be:	6939      	ldr	r1, [r7, #16]
 80090c0:	0148      	lsls	r0, r1, #5
 80090c2:	6979      	ldr	r1, [r7, #20]
 80090c4:	4401      	add	r1, r0
 80090c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090ca:	4313      	orrs	r3, r2
 80090cc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d10d      	bne.n	80090f0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	68d9      	ldr	r1, [r3, #12]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	460a      	mov	r2, r1
 80090ee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800910e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	e007ffff 	.word	0xe007ffff
 8009124:	fff80000 	.word	0xfff80000

08009128 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009128:	b480      	push	{r7}
 800912a:	b089      	sub	sp, #36	; 0x24
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	460b      	mov	r3, r1
 8009138:	71fb      	strb	r3, [r7, #7]
 800913a:	4613      	mov	r3, r2
 800913c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	d123      	bne.n	8009196 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800914e:	88bb      	ldrh	r3, [r7, #4]
 8009150:	3303      	adds	r3, #3
 8009152:	089b      	lsrs	r3, r3, #2
 8009154:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009156:	2300      	movs	r3, #0
 8009158:	61bb      	str	r3, [r7, #24]
 800915a:	e018      	b.n	800918e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	031a      	lsls	r2, r3, #12
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	4413      	add	r3, r2
 8009164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009168:	461a      	mov	r2, r3
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	3301      	adds	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3301      	adds	r3, #1
 800917a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	3301      	adds	r3, #1
 8009180:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	3301      	adds	r3, #1
 8009186:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	3301      	adds	r3, #1
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	429a      	cmp	r2, r3
 8009194:	d3e2      	bcc.n	800915c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3724      	adds	r7, #36	; 0x24
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b08b      	sub	sp, #44	; 0x2c
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	089b      	lsrs	r3, r3, #2
 80091be:	b29b      	uxth	r3, r3
 80091c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	f003 0303 	and.w	r3, r3, #3
 80091c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	623b      	str	r3, [r7, #32]
 80091ce:	e014      	b.n	80091fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	601a      	str	r2, [r3, #0]
    pDest++;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	3301      	adds	r3, #1
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	3301      	adds	r3, #1
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	3301      	adds	r3, #1
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	3301      	adds	r3, #1
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	3301      	adds	r3, #1
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	6a3a      	ldr	r2, [r7, #32]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d3e6      	bcc.n	80091d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009202:	8bfb      	ldrh	r3, [r7, #30]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01e      	beq.n	8009246 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009208:	2300      	movs	r3, #0
 800920a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009212:	461a      	mov	r2, r3
 8009214:	f107 0310 	add.w	r3, r7, #16
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	b2da      	uxtb	r2, r3
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	701a      	strb	r2, [r3, #0]
      i++;
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	3301      	adds	r3, #1
 8009232:	623b      	str	r3, [r7, #32]
      pDest++;
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	3301      	adds	r3, #1
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800923a:	8bfb      	ldrh	r3, [r7, #30]
 800923c:	3b01      	subs	r3, #1
 800923e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009240:	8bfb      	ldrh	r3, [r7, #30]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1ea      	bne.n	800921c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009248:	4618      	mov	r0, r3
 800924a:	372c      	adds	r7, #44	; 0x2c
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d12c      	bne.n	80092ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	db12      	blt.n	80092a8 <USB_EPSetStall+0x54>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00f      	beq.n	80092a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	0151      	lsls	r1, r2, #5
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	440a      	add	r2, r1
 80092be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	e02b      	b.n	8009322 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	db12      	blt.n	8009302 <USB_EPSetStall+0xae>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00f      	beq.n	8009302 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009300:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009320:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d128      	bne.n	800939e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	0151      	lsls	r1, r2, #5
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	440a      	add	r2, r1
 8009362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800936a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	78db      	ldrb	r3, [r3, #3]
 8009370:	2b03      	cmp	r3, #3
 8009372:	d003      	beq.n	800937c <USB_EPClearStall+0x4c>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	78db      	ldrb	r3, [r3, #3]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d138      	bne.n	80093ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	0151      	lsls	r1, r2, #5
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	440a      	add	r2, r1
 8009392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e027      	b.n	80093ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	0151      	lsls	r1, r2, #5
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	78db      	ldrb	r3, [r3, #3]
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d003      	beq.n	80093ce <USB_EPClearStall+0x9e>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	78db      	ldrb	r3, [r3, #3]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d10f      	bne.n	80093ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800941e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009430:	68f9      	ldr	r1, [r7, #12]
 8009432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009436:	4313      	orrs	r3, r2
 8009438:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009476:	f023 0302 	bic.w	r3, r3, #2
 800947a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094a4:	f023 0303 	bic.w	r3, r3, #3
 80094a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	4013      	ands	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094e4:	68fb      	ldr	r3, [r7, #12]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	4013      	ands	r3, r2
 8009514:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	0c1b      	lsrs	r3, r3, #16
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4013      	ands	r3, r2
 8009548:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	b29b      	uxth	r3, r3
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	4013      	ands	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009588:	68bb      	ldr	r3, [r7, #8]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009596:	b480      	push	{r7}
 8009598:	b087      	sub	sp, #28
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	fa22 f303 	lsr.w	r3, r2, r3
 80095c6:	01db      	lsls	r3, r3, #7
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	4013      	ands	r3, r2
 80095e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095e4:	68bb      	ldr	r3, [r7, #8]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	f003 0301 	and.w	r3, r3, #1
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800962a:	4619      	mov	r1, r3
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <USB_ActivateSetup+0x44>)
 800962e:	4013      	ands	r3, r2
 8009630:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	fffff800 	.word	0xfffff800

08009658 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	460b      	mov	r3, r1
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	333c      	adds	r3, #60	; 0x3c
 800966e:	3304      	adds	r3, #4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	4a26      	ldr	r2, [pc, #152]	; (8009710 <USB_EP0_OutStart+0xb8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d90a      	bls.n	8009692 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800968c:	d101      	bne.n	8009692 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e037      	b.n	8009702 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	461a      	mov	r2, r3
 800969a:	2300      	movs	r3, #0
 800969c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c0:	f043 0318 	orr.w	r3, r3, #24
 80096c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d10f      	bne.n	8009700 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	4f54300a 	.word	0x4f54300a

08009714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3301      	adds	r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4a13      	ldr	r2, [pc, #76]	; (8009778 <USB_CoreReset+0x64>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d901      	bls.n	8009732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e01b      	b.n	800976a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	daf2      	bge.n	8009720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f043 0201 	orr.w	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3301      	adds	r3, #1
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4a09      	ldr	r2, [pc, #36]	; (8009778 <USB_CoreReset+0x64>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d901      	bls.n	800975c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e006      	b.n	800976a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b01      	cmp	r3, #1
 8009766:	d0f0      	beq.n	800974a <USB_CoreReset+0x36>

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	00030d40 	.word	0x00030d40

0800977c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009788:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800978c:	f004 f828 	bl	800d7e0 <USBD_static_malloc>
 8009790:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80097a0:	2302      	movs	r3, #2
 80097a2:	e066      	b.n	8009872 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7c1b      	ldrb	r3, [r3, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d119      	bne.n	80097e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097b8:	2202      	movs	r2, #2
 80097ba:	2181      	movs	r1, #129	; 0x81
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f003 feec 	bl	800d59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097cc:	2202      	movs	r2, #2
 80097ce:	2101      	movs	r1, #1
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f003 fee2 	bl	800d59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2210      	movs	r2, #16
 80097e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80097e6:	e016      	b.n	8009816 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	2202      	movs	r2, #2
 80097ec:	2181      	movs	r1, #129	; 0x81
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f003 fed3 	bl	800d59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097fa:	2340      	movs	r3, #64	; 0x40
 80097fc:	2202      	movs	r2, #2
 80097fe:	2101      	movs	r1, #1
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f003 feca 	bl	800d59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2210      	movs	r2, #16
 8009812:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009816:	2308      	movs	r3, #8
 8009818:	2203      	movs	r2, #3
 800981a:	2182      	movs	r1, #130	; 0x82
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f003 febc 	bl	800d59a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7c1b      	ldrb	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f003 ff8d 	bl	800d778 <USBD_LL_PrepareReceive>
 800985e:	e007      	b.n	8009870 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009866:	2340      	movs	r3, #64	; 0x40
 8009868:	2101      	movs	r1, #1
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f003 ff84 	bl	800d778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009886:	2181      	movs	r1, #129	; 0x81
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f003 feac 	bl	800d5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009894:	2101      	movs	r1, #1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f003 fea5 	bl	800d5e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80098a4:	2182      	movs	r1, #130	; 0x82
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f003 fe9d 	bl	800d5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098d6:	4618      	mov	r0, r3
 80098d8:	f003 ff90 	bl	800d7fc <USBD_static_free>
    pdev->pClassData = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009900:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	e0af      	b.n	8009a78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009920:	2b00      	cmp	r3, #0
 8009922:	d03f      	beq.n	80099a4 <USBD_CDC_Setup+0xb4>
 8009924:	2b20      	cmp	r3, #32
 8009926:	f040 809f 	bne.w	8009a68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	88db      	ldrh	r3, [r3, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d02e      	beq.n	8009990 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b25b      	sxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	da16      	bge.n	800996a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009948:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	88d2      	ldrh	r2, [r2, #6]
 800994e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	88db      	ldrh	r3, [r3, #6]
 8009954:	2b07      	cmp	r3, #7
 8009956:	bf28      	it	cs
 8009958:	2307      	movcs	r3, #7
 800995a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	89fa      	ldrh	r2, [r7, #14]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 fb19 	bl	800af9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009968:	e085      	b.n	8009a76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	785a      	ldrb	r2, [r3, #1]
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	b2da      	uxtb	r2, r3
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009980:	6939      	ldr	r1, [r7, #16]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	461a      	mov	r2, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 fb32 	bl	800aff2 <USBD_CtlPrepareRx>
      break;
 800998e:	e072      	b.n	8009a76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	7850      	ldrb	r0, [r2, #1]
 800999c:	2200      	movs	r2, #0
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	4798      	blx	r3
      break;
 80099a2:	e068      	b.n	8009a76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	785b      	ldrb	r3, [r3, #1]
 80099a8:	2b0b      	cmp	r3, #11
 80099aa:	d852      	bhi.n	8009a52 <USBD_CDC_Setup+0x162>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <USBD_CDC_Setup+0xc4>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099e5 	.word	0x080099e5
 80099b8:	08009a61 	.word	0x08009a61
 80099bc:	08009a53 	.word	0x08009a53
 80099c0:	08009a53 	.word	0x08009a53
 80099c4:	08009a53 	.word	0x08009a53
 80099c8:	08009a53 	.word	0x08009a53
 80099cc:	08009a53 	.word	0x08009a53
 80099d0:	08009a53 	.word	0x08009a53
 80099d4:	08009a53 	.word	0x08009a53
 80099d8:	08009a53 	.word	0x08009a53
 80099dc:	08009a0f 	.word	0x08009a0f
 80099e0:	08009a39 	.word	0x08009a39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d107      	bne.n	8009a00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099f0:	f107 030a 	add.w	r3, r7, #10
 80099f4:	2202      	movs	r2, #2
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 face 	bl	800af9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099fe:	e032      	b.n	8009a66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fa58 	bl	800aeb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	75fb      	strb	r3, [r7, #23]
          break;
 8009a0c:	e02b      	b.n	8009a66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d107      	bne.n	8009a2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a1a:	f107 030d 	add.w	r3, r7, #13
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f001 fab9 	bl	800af9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a28:	e01d      	b.n	8009a66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fa43 	bl	800aeb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a32:	2303      	movs	r3, #3
 8009a34:	75fb      	strb	r3, [r7, #23]
          break;
 8009a36:	e016      	b.n	8009a66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d00f      	beq.n	8009a64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fa36 	bl	800aeb8 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a50:	e008      	b.n	8009a64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fa2f 	bl	800aeb8 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a5e:	e002      	b.n	8009a66 <USBD_CDC_Setup+0x176>
          break;
 8009a60:	bf00      	nop
 8009a62:	e008      	b.n	8009a76 <USBD_CDC_Setup+0x186>
          break;
 8009a64:	bf00      	nop
      }
      break;
 8009a66:	e006      	b.n	8009a76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 fa24 	bl	800aeb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8009a70:	2303      	movs	r3, #3
 8009a72:	75fb      	strb	r3, [r7, #23]
      break;
 8009a74:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e04f      	b.n	8009b42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	3318      	adds	r3, #24
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d029      	beq.n	8009b14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	3318      	adds	r3, #24
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	78f9      	ldrb	r1, [r7, #3]
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	1a5b      	subs	r3, r3, r1
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4403      	add	r3, r0
 8009ae0:	3344      	adds	r3, #68	; 0x44
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ae8:	fb03 f301 	mul.w	r3, r3, r1
 8009aec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d110      	bne.n	8009b14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	3318      	adds	r3, #24
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b06:	78f9      	ldrb	r1, [r7, #3]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f003 fe12 	bl	800d736 <USBD_LL_Transmit>
 8009b12:	e015      	b.n	8009b40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009b3c:	78fa      	ldrb	r2, [r7, #3]
 8009b3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e015      	b.n	8009b98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b6c:	78fb      	ldrb	r3, [r7, #3]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f003 fe22 	bl	800d7ba <USBD_LL_GetRxDataSize>
 8009b76:	4602      	mov	r2, r0
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b92:	4611      	mov	r1, r2
 8009b94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e01b      	b.n	8009bf2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d015      	beq.n	8009bf0 <USBD_CDC_EP0_RxReady+0x50>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009bca:	2bff      	cmp	r3, #255	; 0xff
 8009bcc:	d010      	beq.n	8009bf0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009bdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009be4:	b292      	uxth	r2, r2
 8009be6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	22ff      	movs	r2, #255	; 0xff
 8009bec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2243      	movs	r2, #67	; 0x43
 8009c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c0a:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	24000098 	.word	0x24000098

08009c1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2243      	movs	r2, #67	; 0x43
 8009c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009c2a:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	24000054 	.word	0x24000054

08009c3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2243      	movs	r2, #67	; 0x43
 8009c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009c4a:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	240000dc 	.word	0x240000dc

08009c5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	220a      	movs	r2, #10
 8009c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c6a:	4b03      	ldr	r3, [pc, #12]	; (8009c78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	24000010 	.word	0x24000010

08009c7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e004      	b.n	8009c9a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b087      	sub	sp, #28
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cb8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e008      	b.n	8009cd6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	371c      	adds	r7, #28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e004      	b.n	8009d08 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d24:	2301      	movs	r3, #1
 8009d26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e01a      	b.n	8009d6c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d114      	bne.n	8009d6a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009d5e:	2181      	movs	r1, #129	; 0x81
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f003 fce8 	bl	800d736 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e016      	b.n	8009dc0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7c1b      	ldrb	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d109      	bne.n	8009dae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da4:	2101      	movs	r1, #1
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f003 fce6 	bl	800d778 <USBD_LL_PrepareReceive>
 8009dac:	e007      	b.n	8009dbe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009db4:	2340      	movs	r3, #64	; 0x40
 8009db6:	2101      	movs	r1, #1
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f003 fcdd 	bl	800d778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e01f      	b.n	8009e20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	79fa      	ldrb	r2, [r7, #7]
 8009e12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f003 fb4f 	bl	800d4b8 <USBD_LL_Init>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e016      	b.n	8009e6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	f107 020e 	add.w	r2, r7, #14
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f003 fb70 	bl	800d564 <USBD_LL_Start>
 8009e84:	4603      	mov	r3, r0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	4798      	blx	r3
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	4611      	mov	r1, r2
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
  }

  return USBD_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 ff90 	bl	800ae44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f40:	f003 031f 	and.w	r3, r3, #31
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d01a      	beq.n	8009f7e <USBD_LL_SetupStage+0x72>
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d822      	bhi.n	8009f92 <USBD_LL_SetupStage+0x86>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <USBD_LL_SetupStage+0x4a>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d00a      	beq.n	8009f6a <USBD_LL_SetupStage+0x5e>
 8009f54:	e01d      	b.n	8009f92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa62 	bl	800a428 <USBD_StdDevReq>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]
      break;
 8009f68:	e020      	b.n	8009fac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fac6 	bl	800a504 <USBD_StdItfReq>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f7c:	e016      	b.n	8009fac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fb05 	bl	800a596 <USBD_StdEPReq>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f90:	e00c      	b.n	8009fac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f003 fb3f 	bl	800d624 <USBD_LL_StallEP>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8009faa:	bf00      	nop
  }

  return ret;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d138      	bne.n	800a03c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009fd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d14a      	bne.n	800a072 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d913      	bls.n	800a010 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	1ad2      	subs	r2, r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	bf28      	it	cs
 800a002:	4613      	movcs	r3, r2
 800a004:	461a      	mov	r2, r3
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f001 f80f 	bl	800b02c <USBD_CtlContinueRx>
 800a00e:	e030      	b.n	800a072 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d10b      	bne.n	800a034 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f001 f80a 	bl	800b04e <USBD_CtlSendStatus>
 800a03a:	e01a      	b.n	800a072 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b03      	cmp	r3, #3
 800a046:	d114      	bne.n	800a072 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00e      	beq.n	800a072 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	7afa      	ldrb	r2, [r7, #11]
 800a05e:	4611      	mov	r1, r2
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	4798      	blx	r3
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	e000      	b.n	800a074 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	460b      	mov	r3, r1
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d16b      	bne.n	800a168 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3314      	adds	r3, #20
 800a094:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d156      	bne.n	800a14e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d914      	bls.n	800a0d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 ff84 	bl	800afd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f003 fb52 	bl	800d778 <USBD_LL_PrepareReceive>
 800a0d4:	e03b      	b.n	800a14e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	68da      	ldr	r2, [r3, #12]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d11c      	bne.n	800a11c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d316      	bcc.n	800a11c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d20f      	bcs.n	800a11c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2100      	movs	r1, #0
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 ff65 	bl	800afd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a10e:	2300      	movs	r3, #0
 800a110:	2200      	movs	r2, #0
 800a112:	2100      	movs	r1, #0
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f003 fb2f 	bl	800d778 <USBD_LL_PrepareReceive>
 800a11a:	e018      	b.n	800a14e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b03      	cmp	r3, #3
 800a126:	d10b      	bne.n	800a140 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a140:	2180      	movs	r1, #128	; 0x80
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f003 fa6e 	bl	800d624 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 ff93 	bl	800b074 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a154:	2b01      	cmp	r3, #1
 800a156:	d122      	bne.n	800a19e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fe98 	bl	8009e8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a166:	e01a      	b.n	800a19e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b03      	cmp	r3, #3
 800a172:	d114      	bne.n	800a19e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00e      	beq.n	800a19e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	7afa      	ldrb	r2, [r7, #11]
 800a18a:	4611      	mov	r1, r2
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	4798      	blx	r3
 800a190:	4603      	mov	r3, r0
 800a192:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	e000      	b.n	800a1a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e02f      	b.n	800a23c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00f      	beq.n	800a206 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6852      	ldr	r2, [r2, #4]
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	4611      	mov	r1, r2
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a206:	2340      	movs	r3, #64	; 0x40
 800a208:	2200      	movs	r2, #0
 800a20a:	2100      	movs	r1, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f003 f9c4 	bl	800d59a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2240      	movs	r2, #64	; 0x40
 800a21e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	2200      	movs	r2, #0
 800a226:	2180      	movs	r1, #128	; 0x80
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f003 f9b6 	bl	800d59a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2240      	movs	r2, #64	; 0x40
 800a238:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a272:	b2da      	uxtb	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2204      	movs	r2, #4
 800a27e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d106      	bne.n	800a2b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e012      	b.n	800a2fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d10b      	bne.n	800a2fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d005      	beq.n	800a2fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e014      	b.n	800a348 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b03      	cmp	r3, #3
 800a328:	d10d      	bne.n	800a346 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d007      	beq.n	800a346 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4611      	mov	r1, r2
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	e014      	b.n	800a394 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b03      	cmp	r3, #3
 800a374:	d10d      	bne.n	800a392 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d009      	beq.n	800a3e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6852      	ldr	r2, [r2, #4]
 800a3d8:	b2d2      	uxtb	r2, r2
 800a3da:	4611      	mov	r1, r2
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	4798      	blx	r3
  }

  return USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b087      	sub	sp, #28
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3301      	adds	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a408:	8a3b      	ldrh	r3, [r7, #16]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	b21a      	sxth	r2, r3
 800a40e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a412:	4313      	orrs	r3, r2
 800a414:	b21b      	sxth	r3, r3
 800a416:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a418:	89fb      	ldrh	r3, [r7, #14]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
	...

0800a428 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a43e:	2b40      	cmp	r3, #64	; 0x40
 800a440:	d005      	beq.n	800a44e <USBD_StdDevReq+0x26>
 800a442:	2b40      	cmp	r3, #64	; 0x40
 800a444:	d853      	bhi.n	800a4ee <USBD_StdDevReq+0xc6>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00b      	beq.n	800a462 <USBD_StdDevReq+0x3a>
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d14f      	bne.n	800a4ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
      break;
 800a460:	e04a      	b.n	800a4f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	785b      	ldrb	r3, [r3, #1]
 800a466:	2b09      	cmp	r3, #9
 800a468:	d83b      	bhi.n	800a4e2 <USBD_StdDevReq+0xba>
 800a46a:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <USBD_StdDevReq+0x48>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a4d9 	.word	0x0800a4d9
 800a478:	0800a4e3 	.word	0x0800a4e3
 800a47c:	0800a4cf 	.word	0x0800a4cf
 800a480:	0800a4e3 	.word	0x0800a4e3
 800a484:	0800a4a3 	.word	0x0800a4a3
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a4e3 	.word	0x0800a4e3
 800a490:	0800a4bb 	.word	0x0800a4bb
 800a494:	0800a4ad 	.word	0x0800a4ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f9de 	bl	800a85c <USBD_GetDescriptor>
          break;
 800a4a0:	e024      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb43 	bl	800ab30 <USBD_SetAddress>
          break;
 800a4aa:	e01f      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fb82 	bl	800abb8 <USBD_SetConfig>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
          break;
 800a4b8:	e018      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fc21 	bl	800ad04 <USBD_GetConfig>
          break;
 800a4c2:	e013      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fc52 	bl	800ad70 <USBD_GetStatus>
          break;
 800a4cc:	e00e      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fc81 	bl	800add8 <USBD_SetFeature>
          break;
 800a4d6:	e009      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fc90 	bl	800ae00 <USBD_ClrFeature>
          break;
 800a4e0:	e004      	b.n	800a4ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fce7 	bl	800aeb8 <USBD_CtlError>
          break;
 800a4ea:	bf00      	nop
      }
      break;
 800a4ec:	e004      	b.n	800a4f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fce1 	bl	800aeb8 <USBD_CtlError>
      break;
 800a4f6:	bf00      	nop
  }

  return ret;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop

0800a504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a51a:	2b40      	cmp	r3, #64	; 0x40
 800a51c:	d005      	beq.n	800a52a <USBD_StdItfReq+0x26>
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	d82f      	bhi.n	800a582 <USBD_StdItfReq+0x7e>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <USBD_StdItfReq+0x26>
 800a526:	2b20      	cmp	r3, #32
 800a528:	d12b      	bne.n	800a582 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a530:	b2db      	uxtb	r3, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	2b02      	cmp	r3, #2
 800a536:	d81d      	bhi.n	800a574 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	889b      	ldrh	r3, [r3, #4]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d813      	bhi.n	800a56a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	4798      	blx	r3
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	88db      	ldrh	r3, [r3, #6]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d110      	bne.n	800a57e <USBD_StdItfReq+0x7a>
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10d      	bne.n	800a57e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fd73 	bl	800b04e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a568:	e009      	b.n	800a57e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fca3 	bl	800aeb8 <USBD_CtlError>
          break;
 800a572:	e004      	b.n	800a57e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fc9e 	bl	800aeb8 <USBD_CtlError>
          break;
 800a57c:	e000      	b.n	800a580 <USBD_StdItfReq+0x7c>
          break;
 800a57e:	bf00      	nop
      }
      break;
 800a580:	e004      	b.n	800a58c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fc97 	bl	800aeb8 <USBD_CtlError>
      break;
 800a58a:	bf00      	nop
  }

  return ret;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	889b      	ldrh	r3, [r3, #4]
 800a5a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b2:	2b40      	cmp	r3, #64	; 0x40
 800a5b4:	d007      	beq.n	800a5c6 <USBD_StdEPReq+0x30>
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	f200 8145 	bhi.w	800a846 <USBD_StdEPReq+0x2b0>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00c      	beq.n	800a5da <USBD_StdEPReq+0x44>
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	f040 8140 	bne.w	800a846 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d8:	e13a      	b.n	800a850 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d007      	beq.n	800a5f2 <USBD_StdEPReq+0x5c>
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	f300 8129 	bgt.w	800a83a <USBD_StdEPReq+0x2a4>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d07f      	beq.n	800a6ec <USBD_StdEPReq+0x156>
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d03c      	beq.n	800a66a <USBD_StdEPReq+0xd4>
 800a5f0:	e123      	b.n	800a83a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d002      	beq.n	800a604 <USBD_StdEPReq+0x6e>
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d016      	beq.n	800a630 <USBD_StdEPReq+0x9a>
 800a602:	e02c      	b.n	800a65e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00d      	beq.n	800a626 <USBD_StdEPReq+0x90>
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	2b80      	cmp	r3, #128	; 0x80
 800a60e:	d00a      	beq.n	800a626 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f003 f805 	bl	800d624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a61a:	2180      	movs	r1, #128	; 0x80
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f003 f801 	bl	800d624 <USBD_LL_StallEP>
 800a622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a624:	e020      	b.n	800a668 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fc45 	bl	800aeb8 <USBD_CtlError>
              break;
 800a62e:	e01b      	b.n	800a668 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	885b      	ldrh	r3, [r3, #2]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10e      	bne.n	800a656 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00b      	beq.n	800a656 <USBD_StdEPReq+0xc0>
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b80      	cmp	r3, #128	; 0x80
 800a642:	d008      	beq.n	800a656 <USBD_StdEPReq+0xc0>
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	88db      	ldrh	r3, [r3, #6]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f002 ffe7 	bl	800d624 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fcf9 	bl	800b04e <USBD_CtlSendStatus>

              break;
 800a65c:	e004      	b.n	800a668 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc29 	bl	800aeb8 <USBD_CtlError>
              break;
 800a666:	bf00      	nop
          }
          break;
 800a668:	e0ec      	b.n	800a844 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d002      	beq.n	800a67c <USBD_StdEPReq+0xe6>
 800a676:	2b03      	cmp	r3, #3
 800a678:	d016      	beq.n	800a6a8 <USBD_StdEPReq+0x112>
 800a67a:	e030      	b.n	800a6de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00d      	beq.n	800a69e <USBD_StdEPReq+0x108>
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b80      	cmp	r3, #128	; 0x80
 800a686:	d00a      	beq.n	800a69e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f002 ffc9 	bl	800d624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a692:	2180      	movs	r1, #128	; 0x80
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f002 ffc5 	bl	800d624 <USBD_LL_StallEP>
 800a69a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a69c:	e025      	b.n	800a6ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fc09 	bl	800aeb8 <USBD_CtlError>
              break;
 800a6a6:	e020      	b.n	800a6ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	885b      	ldrh	r3, [r3, #2]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d11b      	bne.n	800a6e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d004      	beq.n	800a6c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f002 ffcf 	bl	800d662 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fcc2 	bl	800b04e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
 800a6d8:	4603      	mov	r3, r0
 800a6da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a6dc:	e004      	b.n	800a6e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fbe9 	bl	800aeb8 <USBD_CtlError>
              break;
 800a6e6:	e000      	b.n	800a6ea <USBD_StdEPReq+0x154>
              break;
 800a6e8:	bf00      	nop
          }
          break;
 800a6ea:	e0ab      	b.n	800a844 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d002      	beq.n	800a6fe <USBD_StdEPReq+0x168>
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d032      	beq.n	800a762 <USBD_StdEPReq+0x1cc>
 800a6fc:	e097      	b.n	800a82e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <USBD_StdEPReq+0x17e>
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	2b80      	cmp	r3, #128	; 0x80
 800a708:	d004      	beq.n	800a714 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fbd3 	bl	800aeb8 <USBD_CtlError>
                break;
 800a712:	e091      	b.n	800a838 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da0b      	bge.n	800a734 <USBD_StdEPReq+0x19e>
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	3310      	adds	r3, #16
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	4413      	add	r3, r2
 800a730:	3304      	adds	r3, #4
 800a732:	e00b      	b.n	800a74c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4413      	add	r3, r2
 800a74a:	3304      	adds	r3, #4
 800a74c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2202      	movs	r2, #2
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fc1d 	bl	800af9a <USBD_CtlSendData>
              break;
 800a760:	e06a      	b.n	800a838 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a766:	2b00      	cmp	r3, #0
 800a768:	da11      	bge.n	800a78e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	3324      	adds	r3, #36	; 0x24
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d117      	bne.n	800a7b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fb96 	bl	800aeb8 <USBD_CtlError>
                  break;
 800a78c:	e054      	b.n	800a838 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	f003 020f 	and.w	r2, r3, #15
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	440b      	add	r3, r1
 800a7a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d104      	bne.n	800a7b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fb83 	bl	800aeb8 <USBD_CtlError>
                  break;
 800a7b2:	e041      	b.n	800a838 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da0b      	bge.n	800a7d4 <USBD_StdEPReq+0x23e>
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	3310      	adds	r3, #16
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	e00b      	b.n	800a7ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <USBD_StdEPReq+0x264>
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	2b80      	cmp	r3, #128	; 0x80
 800a7f8:	d103      	bne.n	800a802 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e00e      	b.n	800a820 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	4619      	mov	r1, r3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f002 ff4a 	bl	800d6a0 <USBD_LL_IsStallEP>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2201      	movs	r2, #1
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e002      	b.n	800a820 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2202      	movs	r2, #2
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fbb7 	bl	800af9a <USBD_CtlSendData>
              break;
 800a82c:	e004      	b.n	800a838 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fb41 	bl	800aeb8 <USBD_CtlError>
              break;
 800a836:	bf00      	nop
          }
          break;
 800a838:	e004      	b.n	800a844 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fb3b 	bl	800aeb8 <USBD_CtlError>
          break;
 800a842:	bf00      	nop
      }
      break;
 800a844:	e004      	b.n	800a850 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fb35 	bl	800aeb8 <USBD_CtlError>
      break;
 800a84e:	bf00      	nop
  }

  return ret;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	885b      	ldrh	r3, [r3, #2]
 800a876:	0a1b      	lsrs	r3, r3, #8
 800a878:	b29b      	uxth	r3, r3
 800a87a:	3b01      	subs	r3, #1
 800a87c:	2b06      	cmp	r3, #6
 800a87e:	f200 8128 	bhi.w	800aad2 <USBD_GetDescriptor+0x276>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <USBD_GetDescriptor+0x2c>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8a5 	.word	0x0800a8a5
 800a88c:	0800a8bd 	.word	0x0800a8bd
 800a890:	0800a8fd 	.word	0x0800a8fd
 800a894:	0800aad3 	.word	0x0800aad3
 800a898:	0800aad3 	.word	0x0800aad3
 800a89c:	0800aa73 	.word	0x0800aa73
 800a8a0:	0800aa9f 	.word	0x0800aa9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	7c12      	ldrb	r2, [r2, #16]
 800a8b0:	f107 0108 	add.w	r1, r7, #8
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4798      	blx	r3
 800a8b8:	60f8      	str	r0, [r7, #12]
      break;
 800a8ba:	e112      	b.n	800aae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	7c1b      	ldrb	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10d      	bne.n	800a8e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8cc:	f107 0208 	add.w	r2, r7, #8
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	2202      	movs	r2, #2
 800a8dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8de:	e100      	b.n	800aae2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	f107 0208 	add.w	r2, r7, #8
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	4798      	blx	r3
 800a8f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	701a      	strb	r2, [r3, #0]
      break;
 800a8fa:	e0f2      	b.n	800aae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	885b      	ldrh	r3, [r3, #2]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b05      	cmp	r3, #5
 800a904:	f200 80ac 	bhi.w	800aa60 <USBD_GetDescriptor+0x204>
 800a908:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <USBD_GetDescriptor+0xb4>)
 800a90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90e:	bf00      	nop
 800a910:	0800a929 	.word	0x0800a929
 800a914:	0800a95d 	.word	0x0800a95d
 800a918:	0800a991 	.word	0x0800a991
 800a91c:	0800a9c5 	.word	0x0800a9c5
 800a920:	0800a9f9 	.word	0x0800a9f9
 800a924:	0800aa2d 	.word	0x0800aa2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7c12      	ldrb	r2, [r2, #16]
 800a940:	f107 0108 	add.w	r1, r7, #8
 800a944:	4610      	mov	r0, r2
 800a946:	4798      	blx	r3
 800a948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a94a:	e091      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fab2 	bl	800aeb8 <USBD_CtlError>
            err++;
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	3301      	adds	r3, #1
 800a958:	72fb      	strb	r3, [r7, #11]
          break;
 800a95a:	e089      	b.n	800aa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00b      	beq.n	800a980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	7c12      	ldrb	r2, [r2, #16]
 800a974:	f107 0108 	add.w	r1, r7, #8
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
 800a97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a97e:	e077      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fa98 	bl	800aeb8 <USBD_CtlError>
            err++;
 800a988:	7afb      	ldrb	r3, [r7, #11]
 800a98a:	3301      	adds	r3, #1
 800a98c:	72fb      	strb	r3, [r7, #11]
          break;
 800a98e:	e06f      	b.n	800aa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00b      	beq.n	800a9b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	7c12      	ldrb	r2, [r2, #16]
 800a9a8:	f107 0108 	add.w	r1, r7, #8
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4798      	blx	r3
 800a9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9b2:	e05d      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fa7e 	bl	800aeb8 <USBD_CtlError>
            err++;
 800a9bc:	7afb      	ldrb	r3, [r7, #11]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9c2:	e055      	b.n	800aa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	7c12      	ldrb	r2, [r2, #16]
 800a9dc:	f107 0108 	add.w	r1, r7, #8
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e6:	e043      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 fa64 	bl	800aeb8 <USBD_CtlError>
            err++;
 800a9f0:	7afb      	ldrb	r3, [r7, #11]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9f6:	e03b      	b.n	800aa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00b      	beq.n	800aa1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	7c12      	ldrb	r2, [r2, #16]
 800aa10:	f107 0108 	add.w	r1, r7, #8
 800aa14:	4610      	mov	r0, r2
 800aa16:	4798      	blx	r3
 800aa18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa1a:	e029      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fa4a 	bl	800aeb8 <USBD_CtlError>
            err++;
 800aa24:	7afb      	ldrb	r3, [r7, #11]
 800aa26:	3301      	adds	r3, #1
 800aa28:	72fb      	strb	r3, [r7, #11]
          break;
 800aa2a:	e021      	b.n	800aa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00b      	beq.n	800aa50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	7c12      	ldrb	r2, [r2, #16]
 800aa44:	f107 0108 	add.w	r1, r7, #8
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4798      	blx	r3
 800aa4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa4e:	e00f      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fa30 	bl	800aeb8 <USBD_CtlError>
            err++;
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa5e:	e007      	b.n	800aa70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fa28 	bl	800aeb8 <USBD_CtlError>
          err++;
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aa6e:	bf00      	nop
      }
      break;
 800aa70:	e037      	b.n	800aae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7c1b      	ldrb	r3, [r3, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d109      	bne.n	800aa8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa82:	f107 0208 	add.w	r2, r7, #8
 800aa86:	4610      	mov	r0, r2
 800aa88:	4798      	blx	r3
 800aa8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa8c:	e029      	b.n	800aae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fa11 	bl	800aeb8 <USBD_CtlError>
        err++;
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa9c:	e021      	b.n	800aae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7c1b      	ldrb	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10d      	bne.n	800aac2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	f107 0208 	add.w	r2, r7, #8
 800aab2:	4610      	mov	r0, r2
 800aab4:	4798      	blx	r3
 800aab6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	2207      	movs	r2, #7
 800aabe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aac0:	e00f      	b.n	800aae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f9f7 	bl	800aeb8 <USBD_CtlError>
        err++;
 800aaca:	7afb      	ldrb	r3, [r7, #11]
 800aacc:	3301      	adds	r3, #1
 800aace:	72fb      	strb	r3, [r7, #11]
      break;
 800aad0:	e007      	b.n	800aae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f9ef 	bl	800aeb8 <USBD_CtlError>
      err++;
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	3301      	adds	r3, #1
 800aade:	72fb      	strb	r3, [r7, #11]
      break;
 800aae0:	bf00      	nop
  }

  if (err != 0U)
 800aae2:	7afb      	ldrb	r3, [r7, #11]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d11e      	bne.n	800ab26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	88db      	ldrh	r3, [r3, #6]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d016      	beq.n	800ab1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aaf0:	893b      	ldrh	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00e      	beq.n	800ab14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	88da      	ldrh	r2, [r3, #6]
 800aafa:	893b      	ldrh	r3, [r7, #8]
 800aafc:	4293      	cmp	r3, r2
 800aafe:	bf28      	it	cs
 800ab00:	4613      	movcs	r3, r2
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab06:	893b      	ldrh	r3, [r7, #8]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	68f9      	ldr	r1, [r7, #12]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fa44 	bl	800af9a <USBD_CtlSendData>
 800ab12:	e009      	b.n	800ab28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f9ce 	bl	800aeb8 <USBD_CtlError>
 800ab1c:	e004      	b.n	800ab28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fa95 	bl	800b04e <USBD_CtlSendStatus>
 800ab24:	e000      	b.n	800ab28 <USBD_GetDescriptor+0x2cc>
    return;
 800ab26:	bf00      	nop
  }
}
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop

0800ab30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	889b      	ldrh	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d131      	bne.n	800aba6 <USBD_SetAddress+0x76>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d12d      	bne.n	800aba6 <USBD_SetAddress+0x76>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	885b      	ldrh	r3, [r3, #2]
 800ab4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab50:	d829      	bhi.n	800aba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	885b      	ldrh	r3, [r3, #2]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d104      	bne.n	800ab74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f9a3 	bl	800aeb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab72:	e01d      	b.n	800abb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	7bfa      	ldrb	r2, [r7, #15]
 800ab78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f002 fdb9 	bl	800d6f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa61 	bl	800b04e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2202      	movs	r2, #2
 800ab96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab9a:	e009      	b.n	800abb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba4:	e004      	b.n	800abb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f985 	bl	800aeb8 <USBD_CtlError>
  }
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	885b      	ldrh	r3, [r3, #2]
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	4b4c      	ldr	r3, [pc, #304]	; (800ad00 <USBD_SetConfig+0x148>)
 800abce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abd0:	4b4b      	ldr	r3, [pc, #300]	; (800ad00 <USBD_SetConfig+0x148>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d905      	bls.n	800abe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f96c 	bl	800aeb8 <USBD_CtlError>
    return USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e088      	b.n	800acf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b02      	cmp	r3, #2
 800abee:	d002      	beq.n	800abf6 <USBD_SetConfig+0x3e>
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d025      	beq.n	800ac40 <USBD_SetConfig+0x88>
 800abf4:	e071      	b.n	800acda <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800abf6:	4b42      	ldr	r3, [pc, #264]	; (800ad00 <USBD_SetConfig+0x148>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d01c      	beq.n	800ac38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800abfe:	4b40      	ldr	r3, [pc, #256]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac08:	4b3d      	ldr	r3, [pc, #244]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff f948 	bl	8009ea4 <USBD_SetClassConfig>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f949 	bl	800aeb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac26:	e065      	b.n	800acf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fa10 	bl	800b04e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2203      	movs	r2, #3
 800ac32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac36:	e05d      	b.n	800acf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fa08 	bl	800b04e <USBD_CtlSendStatus>
      break;
 800ac3e:	e059      	b.n	800acf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac40:	4b2f      	ldr	r3, [pc, #188]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d112      	bne.n	800ac6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac50:	4b2b      	ldr	r3, [pc, #172]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac5a:	4b29      	ldr	r3, [pc, #164]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff f93b 	bl	8009edc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f9f1 	bl	800b04e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac6c:	e042      	b.n	800acf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ac6e:	4b24      	ldr	r3, [pc, #144]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d02a      	beq.n	800acd2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff f929 	bl	8009edc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac94:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <USBD_SetConfig+0x148>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff f902 	bl	8009ea4 <USBD_SetClassConfig>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00f      	beq.n	800acca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f903 	bl	800aeb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff f90e 	bl	8009edc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acc8:	e014      	b.n	800acf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f9bf 	bl	800b04e <USBD_CtlSendStatus>
      break;
 800acd0:	e010      	b.n	800acf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f9bb 	bl	800b04e <USBD_CtlSendStatus>
      break;
 800acd8:	e00c      	b.n	800acf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f8eb 	bl	800aeb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ace2:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <USBD_SetConfig+0x148>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff f8f7 	bl	8009edc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800acee:	2303      	movs	r3, #3
 800acf0:	73fb      	strb	r3, [r7, #15]
      break;
 800acf2:	bf00      	nop
  }

  return ret;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	2400020c 	.word	0x2400020c

0800ad04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	88db      	ldrh	r3, [r3, #6]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d004      	beq.n	800ad20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f8cd 	bl	800aeb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad1e:	e023      	b.n	800ad68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	dc02      	bgt.n	800ad32 <USBD_GetConfig+0x2e>
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dc03      	bgt.n	800ad38 <USBD_GetConfig+0x34>
 800ad30:	e015      	b.n	800ad5e <USBD_GetConfig+0x5a>
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d00b      	beq.n	800ad4e <USBD_GetConfig+0x4a>
 800ad36:	e012      	b.n	800ad5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3308      	adds	r3, #8
 800ad42:	2201      	movs	r2, #1
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f927 	bl	800af9a <USBD_CtlSendData>
        break;
 800ad4c:	e00c      	b.n	800ad68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	3304      	adds	r3, #4
 800ad52:	2201      	movs	r2, #1
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f91f 	bl	800af9a <USBD_CtlSendData>
        break;
 800ad5c:	e004      	b.n	800ad68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f8a9 	bl	800aeb8 <USBD_CtlError>
        break;
 800ad66:	bf00      	nop
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	3b01      	subs	r3, #1
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d81e      	bhi.n	800adc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	88db      	ldrh	r3, [r3, #6]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d004      	beq.n	800ad9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f890 	bl	800aeb8 <USBD_CtlError>
        break;
 800ad98:	e01a      	b.n	800add0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f043 0202 	orr.w	r2, r3, #2
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	330c      	adds	r3, #12
 800adba:	2202      	movs	r2, #2
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f8eb 	bl	800af9a <USBD_CtlSendData>
      break;
 800adc4:	e004      	b.n	800add0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f875 	bl	800aeb8 <USBD_CtlError>
      break;
 800adce:	bf00      	nop
  }
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	885b      	ldrh	r3, [r3, #2]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d106      	bne.n	800adf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f92b 	bl	800b04e <USBD_CtlSendStatus>
  }
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d80b      	bhi.n	800ae30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	885b      	ldrh	r3, [r3, #2]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10c      	bne.n	800ae3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f910 	bl	800b04e <USBD_CtlSendStatus>
      }
      break;
 800ae2e:	e004      	b.n	800ae3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f840 	bl	800aeb8 <USBD_CtlError>
      break;
 800ae38:	e000      	b.n	800ae3c <USBD_ClrFeature+0x3c>
      break;
 800ae3a:	bf00      	nop
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	781a      	ldrb	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f7ff fabb 	bl	800a3ea <SWAPBYTE>
 800ae74:	4603      	mov	r3, r0
 800ae76:	461a      	mov	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff faae 	bl	800a3ea <SWAPBYTE>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	461a      	mov	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff faa1 	bl	800a3ea <SWAPBYTE>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461a      	mov	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	80da      	strh	r2, [r3, #6]
}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aec2:	2180      	movs	r1, #128	; 0x80
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 fbad 	bl	800d624 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aeca:	2100      	movs	r1, #0
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f002 fba9 	bl	800d624 <USBD_LL_StallEP>
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b086      	sub	sp, #24
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d036      	beq.n	800af5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aef4:	6938      	ldr	r0, [r7, #16]
 800aef6:	f000 f836 	bl	800af66 <USBD_GetLen>
 800aefa:	4603      	mov	r3, r0
 800aefc:	3301      	adds	r3, #1
 800aefe:	b29b      	uxth	r3, r3
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	b29a      	uxth	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	4413      	add	r3, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	7812      	ldrb	r2, [r2, #0]
 800af12:	701a      	strb	r2, [r3, #0]
  idx++;
 800af14:	7dfb      	ldrb	r3, [r7, #23]
 800af16:	3301      	adds	r3, #1
 800af18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	4413      	add	r3, r2
 800af20:	2203      	movs	r2, #3
 800af22:	701a      	strb	r2, [r3, #0]
  idx++;
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	3301      	adds	r3, #1
 800af28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af2a:	e013      	b.n	800af54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	4413      	add	r3, r2
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	7812      	ldrb	r2, [r2, #0]
 800af36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	613b      	str	r3, [r7, #16]
    idx++;
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
 800af40:	3301      	adds	r3, #1
 800af42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
    idx++;
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	3301      	adds	r3, #1
 800af52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e7      	bne.n	800af2c <USBD_GetString+0x52>
 800af5c:	e000      	b.n	800af60 <USBD_GetString+0x86>
    return;
 800af5e:	bf00      	nop
  }
}
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af76:	e005      	b.n	800af84 <USBD_GetLen+0x1e>
  {
    len++;
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	3301      	adds	r3, #1
 800af7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	3301      	adds	r3, #1
 800af82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f5      	bne.n	800af78 <USBD_GetLen+0x12>
  }

  return len;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	2100      	movs	r1, #0
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f002 fbb8 	bl	800d736 <USBD_LL_Transmit>

  return USBD_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	2100      	movs	r1, #0
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f002 fba7 	bl	800d736 <USBD_LL_Transmit>

  return USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2203      	movs	r2, #3
 800b002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	2100      	movs	r1, #0
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f002 fbab 	bl	800d778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	2100      	movs	r1, #0
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f002 fb9a 	bl	800d778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2204      	movs	r2, #4
 800b05a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b05e:	2300      	movs	r3, #0
 800b060:	2200      	movs	r2, #0
 800b062:	2100      	movs	r1, #0
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f002 fb66 	bl	800d736 <USBD_LL_Transmit>

  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2205      	movs	r2, #5
 800b080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b084:	2300      	movs	r3, #0
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f002 fb74 	bl	800d778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b0a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0ac:	2b84      	cmp	r3, #132	; 0x84
 800b0ae:	d005      	beq.n	800b0bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b0b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3303      	adds	r3, #3
 800b0ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b0ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0cc:	b087      	sub	sp, #28
 800b0ce:	af02      	add	r7, sp, #8
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685c      	ldr	r4, [r3, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0e0:	b29e      	uxth	r6, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff ffd6 	bl	800b09a <makeFreeRtosPriority>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	f107 030c 	add.w	r3, r7, #12
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	9200      	str	r2, [sp, #0]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	4632      	mov	r2, r6
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fcfa 	bl	800baf8 <xTaskCreate>
 800b104:	4603      	mov	r3, r0
 800b106:	2b01      	cmp	r3, #1
 800b108:	d001      	beq.n	800b10e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	e000      	b.n	800b110 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800b10e:	68fb      	ldr	r3, [r7, #12]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b118 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <osDelay+0x16>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	e000      	b.n	800b130 <osDelay+0x18>
 800b12e:	2301      	movs	r3, #1
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fe25 	bl	800bd80 <vTaskDelay>
  
  return osOK;
 800b136:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f103 0208 	add.w	r2, r3, #8
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f04f 32ff 	mov.w	r2, #4294967295
 800b158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 0208 	add.w	r2, r3, #8
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f103 0208 	add.w	r2, r3, #8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b18e:	bf00      	nop
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	601a      	str	r2, [r3, #0]
}
 800b1d6:	bf00      	nop
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f8:	d103      	bne.n	800b202 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e00c      	b.n	800b21c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3308      	adds	r3, #8
 800b206:	60fb      	str	r3, [r7, #12]
 800b208:	e002      	b.n	800b210 <vListInsert+0x2e>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d2f6      	bcs.n	800b20a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]
}
 800b248:	bf00      	nop
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	6892      	ldr	r2, [r2, #8]
 800b26a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	6852      	ldr	r2, [r2, #4]
 800b274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d103      	bne.n	800b288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	1e5a      	subs	r2, r3, #1
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2d2:	f001 fa97 	bl	800c804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2de:	68f9      	ldr	r1, [r7, #12]
 800b2e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2e2:	fb01 f303 	mul.w	r3, r1, r3
 800b2e6:	441a      	add	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	3b01      	subs	r3, #1
 800b304:	68f9      	ldr	r1, [r7, #12]
 800b306:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b308:	fb01 f303 	mul.w	r3, r1, r3
 800b30c:	441a      	add	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	22ff      	movs	r2, #255	; 0xff
 800b316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	22ff      	movs	r2, #255	; 0xff
 800b31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d01a      	beq.n	800b366 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3310      	adds	r3, #16
 800b334:	4618      	mov	r0, r3
 800b336:	f000 ff8f 	bl	800c258 <xTaskRemoveFromEventList>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d012      	beq.n	800b366 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b340:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <xQueueGenericReset+0xcc>)
 800b342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b346:	601a      	str	r2, [r3, #0]
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	e009      	b.n	800b366 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3310      	adds	r3, #16
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff fef2 	bl	800b140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3324      	adds	r3, #36	; 0x24
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff feed 	bl	800b140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b366:	f001 fa7d 	bl	800c864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b36a:	2301      	movs	r3, #1
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4613      	mov	r3, r2
 800b384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	613b      	str	r3, [r7, #16]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	fb02 f303 	mul.w	r3, r2, r3
 800b3aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	3348      	adds	r3, #72	; 0x48
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f001 fb09 	bl	800c9c8 <pvPortMalloc>
 800b3b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00d      	beq.n	800b3da <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	3348      	adds	r3, #72	; 0x48
 800b3c6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3c8:	79fa      	ldrb	r2, [r7, #7]
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f805 	bl	800b3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3da:	69bb      	ldr	r3, [r7, #24]
	}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3720      	adds	r7, #32
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d103      	bne.n	800b400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e002      	b.n	800b406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b412:	2101      	movs	r1, #1
 800b414:	69b8      	ldr	r0, [r7, #24]
 800b416:	f7ff ff47 	bl	800b2a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08c      	sub	sp, #48	; 0x30
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b432:	2300      	movs	r3, #0
 800b434:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10a      	bne.n	800b456 <xQueueGenericSend+0x32>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	623b      	str	r3, [r7, #32]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <xQueueGenericSend+0x40>
 800b45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <xQueueGenericSend+0x44>
 800b464:	2301      	movs	r3, #1
 800b466:	e000      	b.n	800b46a <xQueueGenericSend+0x46>
 800b468:	2300      	movs	r3, #0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <xQueueGenericSend+0x60>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	61fb      	str	r3, [r7, #28]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d103      	bne.n	800b492 <xQueueGenericSend+0x6e>
 800b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d101      	bne.n	800b496 <xQueueGenericSend+0x72>
 800b492:	2301      	movs	r3, #1
 800b494:	e000      	b.n	800b498 <xQueueGenericSend+0x74>
 800b496:	2300      	movs	r3, #0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	61bb      	str	r3, [r7, #24]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xQueueGenericSend+0x8c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4b2:	f001 f9a7 	bl	800c804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d302      	bcc.n	800b4c8 <xQueueGenericSend+0xa4>
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d129      	bne.n	800b51c <xQueueGenericSend+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ce:	f000 fa11 	bl	800b8f4 <prvCopyDataToQueue>
 800b4d2:	6278      	str	r0, [r7, #36]	; 0x24

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d010      	beq.n	800b4fe <xQueueGenericSend+0xda>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	3324      	adds	r3, #36	; 0x24
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 feb9 	bl	800c258 <xTaskRemoveFromEventList>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d013      	beq.n	800b514 <xQueueGenericSend+0xf0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4ec:	4b3f      	ldr	r3, [pc, #252]	; (800b5ec <xQueueGenericSend+0x1c8>)
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	e00a      	b.n	800b514 <xQueueGenericSend+0xf0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	2b00      	cmp	r3, #0
 800b502:	d007      	beq.n	800b514 <xQueueGenericSend+0xf0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b504:	4b39      	ldr	r3, [pc, #228]	; (800b5ec <xQueueGenericSend+0x1c8>)
 800b506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b514:	f001 f9a6 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800b518:	2301      	movs	r3, #1
 800b51a:	e063      	b.n	800b5e4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d103      	bne.n	800b52a <xQueueGenericSend+0x106>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b522:	f001 f99f 	bl	800c864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b526:	2300      	movs	r3, #0
 800b528:	e05c      	b.n	800b5e4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <xQueueGenericSend+0x11a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b530:	f107 0310 	add.w	r3, r7, #16
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fef1 	bl	800c31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53a:	2301      	movs	r3, #1
 800b53c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b53e:	f001 f991 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b542:	f000 fca1 	bl	800be88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b546:	f001 f95d 	bl	800c804 <vPortEnterCritical>
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b550:	b25b      	sxtb	r3, r3
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d103      	bne.n	800b560 <xQueueGenericSend+0x13c>
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b566:	b25b      	sxtb	r3, r3
 800b568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56c:	d103      	bne.n	800b576 <xQueueGenericSend+0x152>
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b576:	f001 f975 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57a:	1d3a      	adds	r2, r7, #4
 800b57c:	f107 0310 	add.w	r3, r7, #16
 800b580:	4611      	mov	r1, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fee0 	bl	800c348 <xTaskCheckForTimeOut>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d124      	bne.n	800b5d8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b590:	f000 fa9a 	bl	800bac8 <prvIsQueueFull>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d018      	beq.n	800b5cc <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	3310      	adds	r3, #16
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fe34 	bl	800c210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5aa:	f000 fa25 	bl	800b9f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5ae:	f000 fc79 	bl	800bea4 <xTaskResumeAll>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f47f af7c 	bne.w	800b4b2 <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
 800b5ba:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <xQueueGenericSend+0x1c8>)
 800b5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	e772      	b.n	800b4b2 <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ce:	f000 fa13 	bl	800b9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d2:	f000 fc67 	bl	800bea4 <xTaskResumeAll>
 800b5d6:	e76c      	b.n	800b4b2 <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5da:	f000 fa0d 	bl	800b9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5de:	f000 fc61 	bl	800bea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3730      	adds	r7, #48	; 0x30
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	e000ed04 	.word	0xe000ed04

0800b5f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08c      	sub	sp, #48	; 0x30
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <xQueueReceive+0x30>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	623b      	str	r3, [r7, #32]
}
 800b61c:	bf00      	nop
 800b61e:	e7fe      	b.n	800b61e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d103      	bne.n	800b62e <xQueueReceive+0x3e>
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <xQueueReceive+0x42>
 800b62e:	2301      	movs	r3, #1
 800b630:	e000      	b.n	800b634 <xQueueReceive+0x44>
 800b632:	2300      	movs	r3, #0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <xQueueReceive+0x5e>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	61fb      	str	r3, [r7, #28]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b64e:	f001 f8d9 	bl	800c804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b656:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01f      	beq.n	800b69e <xQueueReceive+0xae>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b662:	f000 f9a3 	bl	800b9ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	1e5a      	subs	r2, r3, #1
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00f      	beq.n	800b696 <xQueueReceive+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	3310      	adds	r3, #16
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fdec 	bl	800c258 <xTaskRemoveFromEventList>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d007      	beq.n	800b696 <xQueueReceive+0xa6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b686:	4b3d      	ldr	r3, [pc, #244]	; (800b77c <xQueueReceive+0x18c>)
 800b688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b696:	f001 f8e5 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e069      	b.n	800b772 <xQueueReceive+0x182>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d103      	bne.n	800b6ac <xQueueReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6a4:	f001 f8de 	bl	800c864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e062      	b.n	800b772 <xQueueReceive+0x182>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <xQueueReceive+0xd0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6b2:	f107 0314 	add.w	r3, r7, #20
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fe30 	bl	800c31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6c0:	f001 f8d0 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6c4:	f000 fbe0 	bl	800be88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6c8:	f001 f89c 	bl	800c804 <vPortEnterCritical>
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6d2:	b25b      	sxtb	r3, r3
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d103      	bne.n	800b6e2 <xQueueReceive+0xf2>
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6e8:	b25b      	sxtb	r3, r3
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ee:	d103      	bne.n	800b6f8 <xQueueReceive+0x108>
 800b6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6f8:	f001 f8b4 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6fc:	1d3a      	adds	r2, r7, #4
 800b6fe:	f107 0314 	add.w	r3, r7, #20
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f000 fe1f 	bl	800c348 <xTaskCheckForTimeOut>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d123      	bne.n	800b758 <xQueueReceive+0x168>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b712:	f000 f9c3 	bl	800ba9c <prvIsQueueEmpty>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d017      	beq.n	800b74c <xQueueReceive+0x15c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	3324      	adds	r3, #36	; 0x24
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	4611      	mov	r1, r2
 800b724:	4618      	mov	r0, r3
 800b726:	f000 fd73 	bl	800c210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b72c:	f000 f964 	bl	800b9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b730:	f000 fbb8 	bl	800bea4 <xTaskResumeAll>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d189      	bne.n	800b64e <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800b73a:	4b10      	ldr	r3, [pc, #64]	; (800b77c <xQueueReceive+0x18c>)
 800b73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	e780      	b.n	800b64e <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b74e:	f000 f953 	bl	800b9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b752:	f000 fba7 	bl	800bea4 <xTaskResumeAll>
 800b756:	e77a      	b.n	800b64e <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b75a:	f000 f94d 	bl	800b9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b75e:	f000 fba1 	bl	800bea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b764:	f000 f99a 	bl	800ba9c <prvIsQueueEmpty>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f43f af6f 	beq.w	800b64e <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b770:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b772:	4618      	mov	r0, r3
 800b774:	3730      	adds	r7, #48	; 0x30
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	e000ed04 	.word	0xe000ed04

0800b780 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b78a:	2300      	movs	r3, #0
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	623b      	str	r3, [r7, #32]
#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xQueueSemaphoreTake+0x2e>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	61bb      	str	r3, [r7, #24]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xQueueSemaphoreTake+0x2c>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <xQueueSemaphoreTake+0x4c>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	617b      	str	r3, [r7, #20]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7cc:	f001 f81a 	bl	800c804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d01b      	beq.n	800b814 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	1e5a      	subs	r2, r3, #1
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00f      	beq.n	800b80c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	3310      	adds	r3, #16
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f000 fd31 	bl	800c258 <xTaskRemoveFromEventList>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d007      	beq.n	800b80c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7fc:	4b3c      	ldr	r3, [pc, #240]	; (800b8f0 <xQueueSemaphoreTake+0x170>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b80c:	f001 f82a 	bl	800c864 <vPortExitCritical>
				return pdPASS;
 800b810:	2301      	movs	r3, #1
 800b812:	e069      	b.n	800b8e8 <xQueueSemaphoreTake+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d103      	bne.n	800b822 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b81a:	f001 f823 	bl	800c864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b81e:	2300      	movs	r3, #0
 800b820:	e062      	b.n	800b8e8 <xQueueSemaphoreTake+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	2b00      	cmp	r3, #0
 800b826:	d106      	bne.n	800b836 <xQueueSemaphoreTake+0xb6>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b828:	f107 030c 	add.w	r3, r7, #12
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fd75 	bl	800c31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b832:	2301      	movs	r3, #1
 800b834:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b836:	f001 f815 	bl	800c864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b83a:	f000 fb25 	bl	800be88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b83e:	f000 ffe1 	bl	800c804 <vPortEnterCritical>
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b848:	b25b      	sxtb	r3, r3
 800b84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84e:	d103      	bne.n	800b858 <xQueueSemaphoreTake+0xd8>
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b85e:	b25b      	sxtb	r3, r3
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b864:	d103      	bne.n	800b86e <xQueueSemaphoreTake+0xee>
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b86e:	f000 fff9 	bl	800c864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b872:	463a      	mov	r2, r7
 800b874:	f107 030c 	add.w	r3, r7, #12
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fd64 	bl	800c348 <xTaskCheckForTimeOut>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d123      	bne.n	800b8ce <xQueueSemaphoreTake+0x14e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b886:	6a38      	ldr	r0, [r7, #32]
 800b888:	f000 f908 	bl	800ba9c <prvIsQueueEmpty>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d017      	beq.n	800b8c2 <xQueueSemaphoreTake+0x142>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	3324      	adds	r3, #36	; 0x24
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fcb8 	bl	800c210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8a0:	6a38      	ldr	r0, [r7, #32]
 800b8a2:	f000 f8a9 	bl	800b9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8a6:	f000 fafd 	bl	800bea4 <xTaskResumeAll>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d18d      	bne.n	800b7cc <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	; (800b8f0 <xQueueSemaphoreTake+0x170>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	e784      	b.n	800b7cc <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b8c2:	6a38      	ldr	r0, [r7, #32]
 800b8c4:	f000 f898 	bl	800b9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8c8:	f000 faec 	bl	800bea4 <xTaskResumeAll>
 800b8cc:	e77e      	b.n	800b7cc <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b8ce:	6a38      	ldr	r0, [r7, #32]
 800b8d0:	f000 f892 	bl	800b9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8d4:	f000 fae6 	bl	800bea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d8:	6a38      	ldr	r0, [r7, #32]
 800b8da:	f000 f8df 	bl	800ba9c <prvIsQueueEmpty>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f43f af73 	beq.w	800b7cc <xQueueSemaphoreTake+0x4c>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3728      	adds	r7, #40	; 0x28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	e000ed04 	.word	0xe000ed04

0800b8f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d043      	beq.n	800b99a <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d119      	bne.n	800b94c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6858      	ldr	r0, [r3, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b920:	461a      	mov	r2, r3
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	f001 ffc4 	bl	800d8b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d32b      	bcc.n	800b99a <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	605a      	str	r2, [r3, #4]
 800b94a:	e026      	b.n	800b99a <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	68d8      	ldr	r0, [r3, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b954:	461a      	mov	r2, r3
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	f001 ffaa 	bl	800d8b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	68da      	ldr	r2, [r3, #12]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b964:	425b      	negs	r3, r3
 800b966:	441a      	add	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	429a      	cmp	r2, r3
 800b976:	d207      	bcs.n	800b988 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b980:	425b      	negs	r3, r3
 800b982:	441a      	add	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d105      	bne.n	800b99a <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	3b01      	subs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b9a2:	693b      	ldr	r3, [r7, #16]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d018      	beq.n	800b9f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68da      	ldr	r2, [r3, #12]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c6:	441a      	add	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d303      	bcc.n	800b9e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68d9      	ldr	r1, [r3, #12]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	6838      	ldr	r0, [r7, #0]
 800b9ec:	f001 ff60 	bl	800d8b0 <memcpy>
	}
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba00:	f000 ff00 	bl	800c804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba0c:	e011      	b.n	800ba32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d012      	beq.n	800ba3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3324      	adds	r3, #36	; 0x24
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fc1c 	bl	800c258 <xTaskRemoveFromEventList>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba26:	f000 fce9 	bl	800c3fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dce9      	bgt.n	800ba0e <prvUnlockQueue+0x16>
 800ba3a:	e000      	b.n	800ba3e <prvUnlockQueue+0x46>
					break;
 800ba3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	22ff      	movs	r2, #255	; 0xff
 800ba42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba46:	f000 ff0d 	bl	800c864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba4a:	f000 fedb 	bl	800c804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba56:	e011      	b.n	800ba7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d012      	beq.n	800ba86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3310      	adds	r3, #16
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fbf7 	bl	800c258 <xTaskRemoveFromEventList>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba70:	f000 fcc4 	bl	800c3fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dce9      	bgt.n	800ba58 <prvUnlockQueue+0x60>
 800ba84:	e000      	b.n	800ba88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	22ff      	movs	r2, #255	; 0xff
 800ba8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba90:	f000 fee8 	bl	800c864 <vPortExitCritical>
}
 800ba94:	bf00      	nop
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800baa4:	f000 feae 	bl	800c804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baac:	2b00      	cmp	r3, #0
 800baae:	d102      	bne.n	800bab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bab0:	2301      	movs	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	e001      	b.n	800baba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bab6:	2300      	movs	r3, #0
 800bab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baba:	f000 fed3 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800babe:	68fb      	ldr	r3, [r7, #12]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bad0:	f000 fe98 	bl	800c804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800badc:	429a      	cmp	r2, r3
 800bade:	d102      	bne.n	800bae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bae0:	2301      	movs	r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	e001      	b.n	800baea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baea:	f000 febb 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800baee:	68fb      	ldr	r3, [r7, #12]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08c      	sub	sp, #48	; 0x30
 800bafc:	af04      	add	r7, sp, #16
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	4613      	mov	r3, r2
 800bb06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 ff5b 	bl	800c9c8 <pvPortMalloc>
 800bb12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00e      	beq.n	800bb38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb1a:	20a8      	movs	r0, #168	; 0xa8
 800bb1c:	f000 ff54 	bl	800c9c8 <pvPortMalloc>
 800bb20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	631a      	str	r2, [r3, #48]	; 0x30
 800bb2e:	e005      	b.n	800bb3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	f001 f815 	bl	800cb60 <vPortFree>
 800bb36:	e001      	b.n	800bb3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d013      	beq.n	800bb6a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb42:	88fa      	ldrh	r2, [r7, #6]
 800bb44:	2300      	movs	r3, #0
 800bb46:	9303      	str	r3, [sp, #12]
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 f80f 	bl	800bb7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb5e:	69f8      	ldr	r0, [r7, #28]
 800bb60:	f000 f8a4 	bl	800bcac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb64:	2301      	movs	r3, #1
 800bb66:	61bb      	str	r3, [r7, #24]
 800bb68:	e002      	b.n	800bb70 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb70:	69bb      	ldr	r3, [r7, #24]
	}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3720      	adds	r7, #32
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bb94:	440b      	add	r3, r1
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	f023 0307 	bic.w	r3, r3, #7
 800bba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00a      	beq.n	800bbc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	617b      	str	r3, [r7, #20]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d01f      	beq.n	800bc0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
 800bbce:	e012      	b.n	800bbf6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	7819      	ldrb	r1, [r3, #0]
 800bbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	4413      	add	r3, r2
 800bbde:	3334      	adds	r3, #52	; 0x34
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	4413      	add	r3, r2
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d006      	beq.n	800bbfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	2b09      	cmp	r3, #9
 800bbfa:	d9e9      	bls.n	800bbd0 <prvInitialiseNewTask+0x54>
 800bbfc:	e000      	b.n	800bc00 <prvInitialiseNewTask+0x84>
			{
				break;
 800bbfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bc08:	e003      	b.n	800bc12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d901      	bls.n	800bc1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	3304      	adds	r3, #4
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff faaa 	bl	800b180 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	3318      	adds	r3, #24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff faa5 	bl	800b180 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	f1c3 0202 	rsb	r2, r3, #2
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	3340      	adds	r3, #64	; 0x40
 800bc60:	2260      	movs	r2, #96	; 0x60
 800bc62:	2100      	movs	r1, #0
 800bc64:	4618      	mov	r0, r3
 800bc66:	f001 fe31 	bl	800d8cc <memset>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	4a0c      	ldr	r2, [pc, #48]	; (800bca0 <prvInitialiseNewTask+0x124>)
 800bc6e:	645a      	str	r2, [r3, #68]	; 0x44
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	4a0c      	ldr	r2, [pc, #48]	; (800bca4 <prvInitialiseNewTask+0x128>)
 800bc74:	649a      	str	r2, [r3, #72]	; 0x48
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	4a0b      	ldr	r2, [pc, #44]	; (800bca8 <prvInitialiseNewTask+0x12c>)
 800bc7a:	64da      	str	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	69b8      	ldr	r0, [r7, #24]
 800bc82:	f000 fc91 	bl	800c5a8 <pxPortInitialiseStack>
 800bc86:	4602      	mov	r2, r0
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc98:	bf00      	nop
 800bc9a:	3720      	adds	r7, #32
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	0800d9bc 	.word	0x0800d9bc
 800bca4:	0800d9dc 	.word	0x0800d9dc
 800bca8:	0800d99c 	.word	0x0800d99c

0800bcac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bcb4:	f000 fda6 	bl	800c804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bcb8:	4b2a      	ldr	r3, [pc, #168]	; (800bd64 <prvAddNewTaskToReadyList+0xb8>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a29      	ldr	r2, [pc, #164]	; (800bd64 <prvAddNewTaskToReadyList+0xb8>)
 800bcc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcc2:	4b29      	ldr	r3, [pc, #164]	; (800bd68 <prvAddNewTaskToReadyList+0xbc>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcca:	4a27      	ldr	r2, [pc, #156]	; (800bd68 <prvAddNewTaskToReadyList+0xbc>)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcd0:	4b24      	ldr	r3, [pc, #144]	; (800bd64 <prvAddNewTaskToReadyList+0xb8>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d110      	bne.n	800bcfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bcd8:	f000 fbb4 	bl	800c444 <prvInitialiseTaskLists>
 800bcdc:	e00d      	b.n	800bcfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bcde:	4b23      	ldr	r3, [pc, #140]	; (800bd6c <prvAddNewTaskToReadyList+0xc0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d109      	bne.n	800bcfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bce6:	4b20      	ldr	r3, [pc, #128]	; (800bd68 <prvAddNewTaskToReadyList+0xbc>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d802      	bhi.n	800bcfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bcf4:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <prvAddNewTaskToReadyList+0xbc>)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bcfa:	4b1d      	ldr	r3, [pc, #116]	; (800bd70 <prvAddNewTaskToReadyList+0xc4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	4a1b      	ldr	r2, [pc, #108]	; (800bd70 <prvAddNewTaskToReadyList+0xc4>)
 800bd02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	2201      	movs	r2, #1
 800bd0a:	409a      	lsls	r2, r3
 800bd0c:	4b19      	ldr	r3, [pc, #100]	; (800bd74 <prvAddNewTaskToReadyList+0xc8>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	4a18      	ldr	r2, [pc, #96]	; (800bd74 <prvAddNewTaskToReadyList+0xc8>)
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4a15      	ldr	r2, [pc, #84]	; (800bd78 <prvAddNewTaskToReadyList+0xcc>)
 800bd24:	441a      	add	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7ff fa34 	bl	800b19a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd32:	f000 fd97 	bl	800c864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <prvAddNewTaskToReadyList+0xc0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00e      	beq.n	800bd5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <prvAddNewTaskToReadyList+0xbc>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d207      	bcs.n	800bd5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd4c:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <prvAddNewTaskToReadyList+0xd0>)
 800bd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd5c:	bf00      	nop
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	24000280 	.word	0x24000280
 800bd68:	24000210 	.word	0x24000210
 800bd6c:	2400028c 	.word	0x2400028c
 800bd70:	2400029c 	.word	0x2400029c
 800bd74:	24000288 	.word	0x24000288
 800bd78:	24000214 	.word	0x24000214
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d017      	beq.n	800bdc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd92:	4b13      	ldr	r3, [pc, #76]	; (800bde0 <vTaskDelay+0x60>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00a      	beq.n	800bdb0 <vTaskDelay+0x30>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	60bb      	str	r3, [r7, #8]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bdb0:	f000 f86a 	bl	800be88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fba2 	bl	800c500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdbc:	f000 f872 	bl	800bea4 <xTaskResumeAll>
 800bdc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d107      	bne.n	800bdd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <vTaskDelay+0x64>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdd8:	bf00      	nop
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	240002a8 	.word	0x240002a8
 800bde4:	e000ed04 	.word	0xe000ed04

0800bde8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800bdee:	4b1e      	ldr	r3, [pc, #120]	; (800be68 <vTaskStartScheduler+0x80>)
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2280      	movs	r2, #128	; 0x80
 800bdfa:	491c      	ldr	r1, [pc, #112]	; (800be6c <vTaskStartScheduler+0x84>)
 800bdfc:	481c      	ldr	r0, [pc, #112]	; (800be70 <vTaskStartScheduler+0x88>)
 800bdfe:	f7ff fe7b 	bl	800baf8 <xTaskCreate>
 800be02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d11b      	bne.n	800be42 <vTaskStartScheduler+0x5a>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	60bb      	str	r3, [r7, #8]
}
 800be1c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be1e:	4b15      	ldr	r3, [pc, #84]	; (800be74 <vTaskStartScheduler+0x8c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3340      	adds	r3, #64	; 0x40
 800be24:	4a14      	ldr	r2, [pc, #80]	; (800be78 <vTaskStartScheduler+0x90>)
 800be26:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <vTaskStartScheduler+0x94>)
 800be2a:	f04f 32ff 	mov.w	r2, #4294967295
 800be2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be30:	4b13      	ldr	r3, [pc, #76]	; (800be80 <vTaskStartScheduler+0x98>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be36:	4b13      	ldr	r3, [pc, #76]	; (800be84 <vTaskStartScheduler+0x9c>)
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be3c:	f000 fc40 	bl	800c6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be40:	e00e      	b.n	800be60 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be48:	d10a      	bne.n	800be60 <vTaskStartScheduler+0x78>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	607b      	str	r3, [r7, #4]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vTaskStartScheduler+0x76>
}
 800be60:	bf00      	nop
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	240002a4 	.word	0x240002a4
 800be6c:	0800d930 	.word	0x0800d930
 800be70:	0800c415 	.word	0x0800c415
 800be74:	24000210 	.word	0x24000210
 800be78:	24000188 	.word	0x24000188
 800be7c:	240002a0 	.word	0x240002a0
 800be80:	2400028c 	.word	0x2400028c
 800be84:	24000284 	.word	0x24000284

0800be88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be88:	b480      	push	{r7}
 800be8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be8c:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <vTaskSuspendAll+0x18>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3301      	adds	r3, #1
 800be92:	4a03      	ldr	r2, [pc, #12]	; (800bea0 <vTaskSuspendAll+0x18>)
 800be94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be96:	bf00      	nop
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	240002a8 	.word	0x240002a8

0800bea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800beae:	2300      	movs	r3, #0
 800beb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800beb2:	4b41      	ldr	r3, [pc, #260]	; (800bfb8 <xTaskResumeAll+0x114>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10a      	bne.n	800bed0 <xTaskResumeAll+0x2c>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	603b      	str	r3, [r7, #0]
}
 800becc:	bf00      	nop
 800bece:	e7fe      	b.n	800bece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bed0:	f000 fc98 	bl	800c804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bed4:	4b38      	ldr	r3, [pc, #224]	; (800bfb8 <xTaskResumeAll+0x114>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3b01      	subs	r3, #1
 800beda:	4a37      	ldr	r2, [pc, #220]	; (800bfb8 <xTaskResumeAll+0x114>)
 800bedc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bede:	4b36      	ldr	r3, [pc, #216]	; (800bfb8 <xTaskResumeAll+0x114>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d161      	bne.n	800bfaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bee6:	4b35      	ldr	r3, [pc, #212]	; (800bfbc <xTaskResumeAll+0x118>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d05d      	beq.n	800bfaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800beee:	e02e      	b.n	800bf4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef0:	4b33      	ldr	r3, [pc, #204]	; (800bfc0 <xTaskResumeAll+0x11c>)
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	3318      	adds	r3, #24
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff f9a9 	bl	800b254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3304      	adds	r3, #4
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff f9a4 	bl	800b254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	2201      	movs	r2, #1
 800bf12:	409a      	lsls	r2, r3
 800bf14:	4b2b      	ldr	r3, [pc, #172]	; (800bfc4 <xTaskResumeAll+0x120>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	4a2a      	ldr	r2, [pc, #168]	; (800bfc4 <xTaskResumeAll+0x120>)
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4a27      	ldr	r2, [pc, #156]	; (800bfc8 <xTaskResumeAll+0x124>)
 800bf2c:	441a      	add	r2, r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4619      	mov	r1, r3
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7ff f930 	bl	800b19a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3e:	4b23      	ldr	r3, [pc, #140]	; (800bfcc <xTaskResumeAll+0x128>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d302      	bcc.n	800bf4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bf48:	4b21      	ldr	r3, [pc, #132]	; (800bfd0 <xTaskResumeAll+0x12c>)
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf4e:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <xTaskResumeAll+0x11c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1cc      	bne.n	800bef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf5c:	f000 fab0 	bl	800c4c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf60:	4b1c      	ldr	r3, [pc, #112]	; (800bfd4 <xTaskResumeAll+0x130>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d010      	beq.n	800bf8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf6c:	f000 f836 	bl	800bfdc <xTaskIncrementTick>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d002      	beq.n	800bf7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bf76:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <xTaskResumeAll+0x12c>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1f1      	bne.n	800bf6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bf88:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <xTaskResumeAll+0x130>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf8e:	4b10      	ldr	r3, [pc, #64]	; (800bfd0 <xTaskResumeAll+0x12c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d009      	beq.n	800bfaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf96:	2301      	movs	r3, #1
 800bf98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf9a:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <xTaskResumeAll+0x134>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfaa:	f000 fc5b 	bl	800c864 <vPortExitCritical>

	return xAlreadyYielded;
 800bfae:	68bb      	ldr	r3, [r7, #8]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	240002a8 	.word	0x240002a8
 800bfbc:	24000280 	.word	0x24000280
 800bfc0:	2400026c 	.word	0x2400026c
 800bfc4:	24000288 	.word	0x24000288
 800bfc8:	24000214 	.word	0x24000214
 800bfcc:	24000210 	.word	0x24000210
 800bfd0:	24000294 	.word	0x24000294
 800bfd4:	24000290 	.word	0x24000290
 800bfd8:	e000ed04 	.word	0xe000ed04

0800bfdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfe6:	4b4e      	ldr	r3, [pc, #312]	; (800c120 <xTaskIncrementTick+0x144>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f040 808e 	bne.w	800c10c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bff0:	4b4c      	ldr	r3, [pc, #304]	; (800c124 <xTaskIncrementTick+0x148>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bff8:	4a4a      	ldr	r2, [pc, #296]	; (800c124 <xTaskIncrementTick+0x148>)
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d120      	bne.n	800c046 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c004:	4b48      	ldr	r3, [pc, #288]	; (800c128 <xTaskIncrementTick+0x14c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00a      	beq.n	800c024 <xTaskIncrementTick+0x48>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	603b      	str	r3, [r7, #0]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <xTaskIncrementTick+0x46>
 800c024:	4b40      	ldr	r3, [pc, #256]	; (800c128 <xTaskIncrementTick+0x14c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	4b40      	ldr	r3, [pc, #256]	; (800c12c <xTaskIncrementTick+0x150>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a3e      	ldr	r2, [pc, #248]	; (800c128 <xTaskIncrementTick+0x14c>)
 800c030:	6013      	str	r3, [r2, #0]
 800c032:	4a3e      	ldr	r2, [pc, #248]	; (800c12c <xTaskIncrementTick+0x150>)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6013      	str	r3, [r2, #0]
 800c038:	4b3d      	ldr	r3, [pc, #244]	; (800c130 <xTaskIncrementTick+0x154>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3301      	adds	r3, #1
 800c03e:	4a3c      	ldr	r2, [pc, #240]	; (800c130 <xTaskIncrementTick+0x154>)
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	f000 fa3d 	bl	800c4c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c046:	4b3b      	ldr	r3, [pc, #236]	; (800c134 <xTaskIncrementTick+0x158>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d348      	bcc.n	800c0e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c050:	4b35      	ldr	r3, [pc, #212]	; (800c128 <xTaskIncrementTick+0x14c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d104      	bne.n	800c064 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05a:	4b36      	ldr	r3, [pc, #216]	; (800c134 <xTaskIncrementTick+0x158>)
 800c05c:	f04f 32ff 	mov.w	r2, #4294967295
 800c060:	601a      	str	r2, [r3, #0]
					break;
 800c062:	e03e      	b.n	800c0e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c064:	4b30      	ldr	r3, [pc, #192]	; (800c128 <xTaskIncrementTick+0x14c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c074:	693a      	ldr	r2, [r7, #16]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d203      	bcs.n	800c084 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c07c:	4a2d      	ldr	r2, [pc, #180]	; (800c134 <xTaskIncrementTick+0x158>)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c082:	e02e      	b.n	800c0e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff f8e3 	bl	800b254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	2b00      	cmp	r3, #0
 800c094:	d004      	beq.n	800c0a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	3318      	adds	r3, #24
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff f8da 	bl	800b254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	409a      	lsls	r2, r3
 800c0a8:	4b23      	ldr	r3, [pc, #140]	; (800c138 <xTaskIncrementTick+0x15c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	4a22      	ldr	r2, [pc, #136]	; (800c138 <xTaskIncrementTick+0x15c>)
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4a1f      	ldr	r2, [pc, #124]	; (800c13c <xTaskIncrementTick+0x160>)
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	f7ff f866 	bl	800b19a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d2:	4b1b      	ldr	r3, [pc, #108]	; (800c140 <xTaskIncrementTick+0x164>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d3b9      	bcc.n	800c050 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0e0:	e7b6      	b.n	800c050 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0e2:	4b17      	ldr	r3, [pc, #92]	; (800c140 <xTaskIncrementTick+0x164>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	4914      	ldr	r1, [pc, #80]	; (800c13c <xTaskIncrementTick+0x160>)
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d901      	bls.n	800c0fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0fe:	4b11      	ldr	r3, [pc, #68]	; (800c144 <xTaskIncrementTick+0x168>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d007      	beq.n	800c116 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c106:	2301      	movs	r3, #1
 800c108:	617b      	str	r3, [r7, #20]
 800c10a:	e004      	b.n	800c116 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c10c:	4b0e      	ldr	r3, [pc, #56]	; (800c148 <xTaskIncrementTick+0x16c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	4a0d      	ldr	r2, [pc, #52]	; (800c148 <xTaskIncrementTick+0x16c>)
 800c114:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c116:	697b      	ldr	r3, [r7, #20]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	240002a8 	.word	0x240002a8
 800c124:	24000284 	.word	0x24000284
 800c128:	24000264 	.word	0x24000264
 800c12c:	24000268 	.word	0x24000268
 800c130:	24000298 	.word	0x24000298
 800c134:	240002a0 	.word	0x240002a0
 800c138:	24000288 	.word	0x24000288
 800c13c:	24000214 	.word	0x24000214
 800c140:	24000210 	.word	0x24000210
 800c144:	24000294 	.word	0x24000294
 800c148:	24000290 	.word	0x24000290

0800c14c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	b087      	sub	sp, #28
 800c150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c152:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <vTaskSwitchContext+0xac>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c15a:	4b28      	ldr	r3, [pc, #160]	; (800c1fc <vTaskSwitchContext+0xb0>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c160:	e044      	b.n	800c1ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c162:	4b26      	ldr	r3, [pc, #152]	; (800c1fc <vTaskSwitchContext+0xb0>)
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c168:	4b25      	ldr	r3, [pc, #148]	; (800c200 <vTaskSwitchContext+0xb4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	fab3 f383 	clz	r3, r3
 800c174:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	f1c3 031f 	rsb	r3, r3, #31
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	4921      	ldr	r1, [pc, #132]	; (800c204 <vTaskSwitchContext+0xb8>)
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	440b      	add	r3, r1
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	607b      	str	r3, [r7, #4]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <vTaskSwitchContext+0x5a>
 800c1a8:	697a      	ldr	r2, [r7, #20]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a14      	ldr	r2, [pc, #80]	; (800c204 <vTaskSwitchContext+0xb8>)
 800c1b4:	4413      	add	r3, r2
 800c1b6:	613b      	str	r3, [r7, #16]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	605a      	str	r2, [r3, #4]
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d104      	bne.n	800c1d8 <vTaskSwitchContext+0x8c>
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	605a      	str	r2, [r3, #4]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	4a0a      	ldr	r2, [pc, #40]	; (800c208 <vTaskSwitchContext+0xbc>)
 800c1e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <vTaskSwitchContext+0xbc>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3340      	adds	r3, #64	; 0x40
 800c1e8:	4a08      	ldr	r2, [pc, #32]	; (800c20c <vTaskSwitchContext+0xc0>)
 800c1ea:	6013      	str	r3, [r2, #0]
}
 800c1ec:	bf00      	nop
 800c1ee:	371c      	adds	r7, #28
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	240002a8 	.word	0x240002a8
 800c1fc:	24000294 	.word	0x24000294
 800c200:	24000288 	.word	0x24000288
 800c204:	24000214 	.word	0x24000214
 800c208:	24000210 	.word	0x24000210
 800c20c:	24000188 	.word	0x24000188

0800c210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	60fb      	str	r3, [r7, #12]
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c236:	4b07      	ldr	r3, [pc, #28]	; (800c254 <vTaskPlaceOnEventList+0x44>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3318      	adds	r3, #24
 800c23c:	4619      	mov	r1, r3
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7fe ffcf 	bl	800b1e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c244:	2101      	movs	r1, #1
 800c246:	6838      	ldr	r0, [r7, #0]
 800c248:	f000 f95a 	bl	800c500 <prvAddCurrentTaskToDelayedList>
}
 800c24c:	bf00      	nop
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	24000210 	.word	0x24000210

0800c258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10a      	bne.n	800c284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c272:	f383 8811 	msr	BASEPRI, r3
 800c276:	f3bf 8f6f 	isb	sy
 800c27a:	f3bf 8f4f 	dsb	sy
 800c27e:	60fb      	str	r3, [r7, #12]
}
 800c280:	bf00      	nop
 800c282:	e7fe      	b.n	800c282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3318      	adds	r3, #24
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe ffe3 	bl	800b254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c28e:	4b1d      	ldr	r3, [pc, #116]	; (800c304 <xTaskRemoveFromEventList+0xac>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d11c      	bne.n	800c2d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	3304      	adds	r3, #4
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe ffda 	bl	800b254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	409a      	lsls	r2, r3
 800c2a8:	4b17      	ldr	r3, [pc, #92]	; (800c308 <xTaskRemoveFromEventList+0xb0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	4a16      	ldr	r2, [pc, #88]	; (800c308 <xTaskRemoveFromEventList+0xb0>)
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4a13      	ldr	r2, [pc, #76]	; (800c30c <xTaskRemoveFromEventList+0xb4>)
 800c2c0:	441a      	add	r2, r3
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fe ff66 	bl	800b19a <vListInsertEnd>
 800c2ce:	e005      	b.n	800c2dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3318      	adds	r3, #24
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	480e      	ldr	r0, [pc, #56]	; (800c310 <xTaskRemoveFromEventList+0xb8>)
 800c2d8:	f7fe ff5f 	bl	800b19a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e0:	4b0c      	ldr	r3, [pc, #48]	; (800c314 <xTaskRemoveFromEventList+0xbc>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d905      	bls.n	800c2f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2ee:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <xTaskRemoveFromEventList+0xc0>)
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	e001      	b.n	800c2fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2fa:	697b      	ldr	r3, [r7, #20]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	240002a8 	.word	0x240002a8
 800c308:	24000288 	.word	0x24000288
 800c30c:	24000214 	.word	0x24000214
 800c310:	2400026c 	.word	0x2400026c
 800c314:	24000210 	.word	0x24000210
 800c318:	24000294 	.word	0x24000294

0800c31c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <vTaskInternalSetTimeOutState+0x24>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <vTaskInternalSetTimeOutState+0x28>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	605a      	str	r2, [r3, #4]
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	24000298 	.word	0x24000298
 800c344:	24000284 	.word	0x24000284

0800c348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	613b      	str	r3, [r7, #16]
}
 800c36a:	bf00      	nop
 800c36c:	e7fe      	b.n	800c36c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	60fb      	str	r3, [r7, #12]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c38a:	f000 fa3b 	bl	800c804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c38e:	4b19      	ldr	r3, [pc, #100]	; (800c3f4 <xTaskCheckForTimeOut+0xac>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <xTaskCheckForTimeOut+0xb0>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d007      	beq.n	800c3ba <xTaskCheckForTimeOut+0x72>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	69ba      	ldr	r2, [r7, #24]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d302      	bcc.n	800c3ba <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	61fb      	str	r3, [r7, #28]
 800c3b8:	e015      	b.n	800c3e6 <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d20b      	bcs.n	800c3dc <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	1ad2      	subs	r2, r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff ffa3 	bl	800c31c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	61fb      	str	r3, [r7, #28]
 800c3da:	e004      	b.n	800c3e6 <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3e6:	f000 fa3d 	bl	800c864 <vPortExitCritical>

	return xReturn;
 800c3ea:	69fb      	ldr	r3, [r7, #28]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3720      	adds	r7, #32
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	24000284 	.word	0x24000284
 800c3f8:	24000298 	.word	0x24000298

0800c3fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c400:	4b03      	ldr	r3, [pc, #12]	; (800c410 <vTaskMissedYield+0x14>)
 800c402:	2201      	movs	r2, #1
 800c404:	601a      	str	r2, [r3, #0]
}
 800c406:	bf00      	nop
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	24000294 	.word	0x24000294

0800c414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c41c:	f000 f848 	bl	800c4b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <prvIdleTask+0x28>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d9f9      	bls.n	800c41c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c428:	4b05      	ldr	r3, [pc, #20]	; (800c440 <prvIdleTask+0x2c>)
 800c42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c42e:	601a      	str	r2, [r3, #0]
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c438:	e7f0      	b.n	800c41c <prvIdleTask+0x8>
 800c43a:	bf00      	nop
 800c43c:	24000214 	.word	0x24000214
 800c440:	e000ed04 	.word	0xe000ed04

0800c444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c44a:	2300      	movs	r3, #0
 800c44c:	607b      	str	r3, [r7, #4]
 800c44e:	e00c      	b.n	800c46a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4613      	mov	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	4a0f      	ldr	r2, [pc, #60]	; (800c498 <prvInitialiseTaskLists+0x54>)
 800c45c:	4413      	add	r3, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fe6e 	bl	800b140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3301      	adds	r3, #1
 800c468:	607b      	str	r3, [r7, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d9ef      	bls.n	800c450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c470:	480a      	ldr	r0, [pc, #40]	; (800c49c <prvInitialiseTaskLists+0x58>)
 800c472:	f7fe fe65 	bl	800b140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c476:	480a      	ldr	r0, [pc, #40]	; (800c4a0 <prvInitialiseTaskLists+0x5c>)
 800c478:	f7fe fe62 	bl	800b140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c47c:	4809      	ldr	r0, [pc, #36]	; (800c4a4 <prvInitialiseTaskLists+0x60>)
 800c47e:	f7fe fe5f 	bl	800b140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c482:	4b09      	ldr	r3, [pc, #36]	; (800c4a8 <prvInitialiseTaskLists+0x64>)
 800c484:	4a05      	ldr	r2, [pc, #20]	; (800c49c <prvInitialiseTaskLists+0x58>)
 800c486:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c488:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <prvInitialiseTaskLists+0x68>)
 800c48a:	4a05      	ldr	r2, [pc, #20]	; (800c4a0 <prvInitialiseTaskLists+0x5c>)
 800c48c:	601a      	str	r2, [r3, #0]
}
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	24000214 	.word	0x24000214
 800c49c:	2400023c 	.word	0x2400023c
 800c4a0:	24000250 	.word	0x24000250
 800c4a4:	2400026c 	.word	0x2400026c
 800c4a8:	24000264 	.word	0x24000264
 800c4ac:	24000268 	.word	0x24000268

0800c4b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4b4:	bf00      	nop
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4c6:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <prvResetNextTaskUnblockTime+0x38>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4d0:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <prvResetNextTaskUnblockTime+0x3c>)
 800c4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4d8:	e008      	b.n	800c4ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <prvResetNextTaskUnblockTime+0x38>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	4a04      	ldr	r2, [pc, #16]	; (800c4fc <prvResetNextTaskUnblockTime+0x3c>)
 800c4ea:	6013      	str	r3, [r2, #0]
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	24000264 	.word	0x24000264
 800c4fc:	240002a0 	.word	0x240002a0

0800c500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c50a:	4b21      	ldr	r3, [pc, #132]	; (800c590 <prvAddCurrentTaskToDelayedList+0x90>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c510:	4b20      	ldr	r3, [pc, #128]	; (800c594 <prvAddCurrentTaskToDelayedList+0x94>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fe9c 	bl	800b254 <uxListRemove>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <prvAddCurrentTaskToDelayedList+0x94>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	2201      	movs	r2, #1
 800c52a:	fa02 f303 	lsl.w	r3, r2, r3
 800c52e:	43da      	mvns	r2, r3
 800c530:	4b19      	ldr	r3, [pc, #100]	; (800c598 <prvAddCurrentTaskToDelayedList+0x98>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4013      	ands	r3, r2
 800c536:	4a18      	ldr	r2, [pc, #96]	; (800c598 <prvAddCurrentTaskToDelayedList+0x98>)
 800c538:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c542:	4b14      	ldr	r3, [pc, #80]	; (800c594 <prvAddCurrentTaskToDelayedList+0x94>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d209      	bcs.n	800c566 <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c552:	4b12      	ldr	r3, [pc, #72]	; (800c59c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	4b0f      	ldr	r3, [pc, #60]	; (800c594 <prvAddCurrentTaskToDelayedList+0x94>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4619      	mov	r1, r3
 800c55e:	4610      	mov	r0, r2
 800c560:	f7fe fe3f 	bl	800b1e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c564:	e010      	b.n	800c588 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c566:	4b0e      	ldr	r3, [pc, #56]	; (800c5a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <prvAddCurrentTaskToDelayedList+0x94>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3304      	adds	r3, #4
 800c570:	4619      	mov	r1, r3
 800c572:	4610      	mov	r0, r2
 800c574:	f7fe fe35 	bl	800b1e2 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 800c578:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d202      	bcs.n	800c588 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 800c582:	4a08      	ldr	r2, [pc, #32]	; (800c5a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	6013      	str	r3, [r2, #0]
}
 800c588:	bf00      	nop
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	24000284 	.word	0x24000284
 800c594:	24000210 	.word	0x24000210
 800c598:	24000288 	.word	0x24000288
 800c59c:	24000268 	.word	0x24000268
 800c5a0:	24000264 	.word	0x24000264
 800c5a4:	240002a0 	.word	0x240002a0

0800c5a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	3b04      	subs	r3, #4
 800c5b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3b04      	subs	r3, #4
 800c5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f023 0201 	bic.w	r2, r3, #1
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5d8:	4a0c      	ldr	r2, [pc, #48]	; (800c60c <pxPortInitialiseStack+0x64>)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3b14      	subs	r3, #20
 800c5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3b04      	subs	r3, #4
 800c5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f06f 0202 	mvn.w	r2, #2
 800c5f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3b20      	subs	r3, #32
 800c5fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3714      	adds	r7, #20
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	0800c611 	.word	0x0800c611

0800c610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c61a:	4b12      	ldr	r3, [pc, #72]	; (800c664 <prvTaskExitError+0x54>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c622:	d00a      	beq.n	800c63a <prvTaskExitError+0x2a>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	60fb      	str	r3, [r7, #12]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <prvTaskExitError+0x28>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	60bb      	str	r3, [r7, #8]
}
 800c64c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c64e:	bf00      	nop
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0fc      	beq.n	800c650 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr
 800c664:	24000120 	.word	0x24000120
	...

0800c670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c670:	4b07      	ldr	r3, [pc, #28]	; (800c690 <pxCurrentTCBConst2>)
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	6808      	ldr	r0, [r1, #0]
 800c676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	f380 8809 	msr	PSP, r0
 800c67e:	f3bf 8f6f 	isb	sy
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f380 8811 	msr	BASEPRI, r0
 800c68a:	4770      	bx	lr
 800c68c:	f3af 8000 	nop.w

0800c690 <pxCurrentTCBConst2>:
 800c690:	24000210 	.word	0x24000210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop

0800c698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c698:	4808      	ldr	r0, [pc, #32]	; (800c6bc <prvPortStartFirstTask+0x24>)
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	6800      	ldr	r0, [r0, #0]
 800c69e:	f380 8808 	msr	MSP, r0
 800c6a2:	f04f 0000 	mov.w	r0, #0
 800c6a6:	f380 8814 	msr	CONTROL, r0
 800c6aa:	b662      	cpsie	i
 800c6ac:	b661      	cpsie	f
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	df00      	svc	0
 800c6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ba:	bf00      	nop
 800c6bc:	e000ed08 	.word	0xe000ed08

0800c6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6c6:	4b46      	ldr	r3, [pc, #280]	; (800c7e0 <xPortStartScheduler+0x120>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a46      	ldr	r2, [pc, #280]	; (800c7e4 <xPortStartScheduler+0x124>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d10a      	bne.n	800c6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	613b      	str	r3, [r7, #16]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6e6:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <xPortStartScheduler+0x120>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a3f      	ldr	r2, [pc, #252]	; (800c7e8 <xPortStartScheduler+0x128>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d10a      	bne.n	800c706 <xPortStartScheduler+0x46>
	__asm volatile
 800c6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	60fb      	str	r3, [r7, #12]
}
 800c702:	bf00      	nop
 800c704:	e7fe      	b.n	800c704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c706:	4b39      	ldr	r3, [pc, #228]	; (800c7ec <xPortStartScheduler+0x12c>)
 800c708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	22ff      	movs	r2, #255	; 0xff
 800c716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	4b31      	ldr	r3, [pc, #196]	; (800c7f0 <xPortStartScheduler+0x130>)
 800c72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c72e:	4b31      	ldr	r3, [pc, #196]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c730:	2207      	movs	r2, #7
 800c732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c734:	e009      	b.n	800c74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c736:	4b2f      	ldr	r3, [pc, #188]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3b01      	subs	r3, #1
 800c73c:	4a2d      	ldr	r2, [pc, #180]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c74a:	78fb      	ldrb	r3, [r7, #3]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c752:	2b80      	cmp	r3, #128	; 0x80
 800c754:	d0ef      	beq.n	800c736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c756:	4b27      	ldr	r3, [pc, #156]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f1c3 0307 	rsb	r3, r3, #7
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d00a      	beq.n	800c778 <xPortStartScheduler+0xb8>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	60bb      	str	r3, [r7, #8]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c778:	4b1e      	ldr	r3, [pc, #120]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c782:	4b1c      	ldr	r3, [pc, #112]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c78a:	4a1a      	ldr	r2, [pc, #104]	; (800c7f4 <xPortStartScheduler+0x134>)
 800c78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	b2da      	uxtb	r2, r3
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c796:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a17      	ldr	r2, [pc, #92]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7a2:	4b15      	ldr	r3, [pc, #84]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a14      	ldr	r2, [pc, #80]	; (800c7f8 <xPortStartScheduler+0x138>)
 800c7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7ae:	f000 f8dd 	bl	800c96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7b2:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <xPortStartScheduler+0x13c>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7b8:	f000 f8fc 	bl	800c9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7bc:	4b10      	ldr	r3, [pc, #64]	; (800c800 <xPortStartScheduler+0x140>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0f      	ldr	r2, [pc, #60]	; (800c800 <xPortStartScheduler+0x140>)
 800c7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7c8:	f7ff ff66 	bl	800c698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7cc:	f7ff fcbe 	bl	800c14c <vTaskSwitchContext>
	prvTaskExitError();
 800c7d0:	f7ff ff1e 	bl	800c610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3718      	adds	r7, #24
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	e000ed00 	.word	0xe000ed00
 800c7e4:	410fc271 	.word	0x410fc271
 800c7e8:	410fc270 	.word	0x410fc270
 800c7ec:	e000e400 	.word	0xe000e400
 800c7f0:	240002ac 	.word	0x240002ac
 800c7f4:	240002b0 	.word	0x240002b0
 800c7f8:	e000ed20 	.word	0xe000ed20
 800c7fc:	24000120 	.word	0x24000120
 800c800:	e000ef34 	.word	0xe000ef34

0800c804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	607b      	str	r3, [r7, #4]
}
 800c81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c81e:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <vPortEnterCritical+0x58>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3301      	adds	r3, #1
 800c824:	4a0d      	ldr	r2, [pc, #52]	; (800c85c <vPortEnterCritical+0x58>)
 800c826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c828:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <vPortEnterCritical+0x58>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d10f      	bne.n	800c850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c830:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <vPortEnterCritical+0x5c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <vPortEnterCritical+0x4c>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	603b      	str	r3, [r7, #0]
}
 800c84c:	bf00      	nop
 800c84e:	e7fe      	b.n	800c84e <vPortEnterCritical+0x4a>
	}
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	24000120 	.word	0x24000120
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c86a:	4b12      	ldr	r3, [pc, #72]	; (800c8b4 <vPortExitCritical+0x50>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <vPortExitCritical+0x24>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	607b      	str	r3, [r7, #4]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <vPortExitCritical+0x50>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	4a09      	ldr	r2, [pc, #36]	; (800c8b4 <vPortExitCritical+0x50>)
 800c890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <vPortExitCritical+0x50>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d105      	bne.n	800c8a6 <vPortExitCritical+0x42>
 800c89a:	2300      	movs	r3, #0
 800c89c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	24000120 	.word	0x24000120
	...

0800c8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8c0:	f3ef 8009 	mrs	r0, PSP
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	4b15      	ldr	r3, [pc, #84]	; (800c920 <pxCurrentTCBConst>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	f01e 0f10 	tst.w	lr, #16
 800c8d0:	bf08      	it	eq
 800c8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8da:	6010      	str	r0, [r2, #0]
 800c8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8e4:	f380 8811 	msr	BASEPRI, r0
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f7ff fc2c 	bl	800c14c <vTaskSwitchContext>
 800c8f4:	f04f 0000 	mov.w	r0, #0
 800c8f8:	f380 8811 	msr	BASEPRI, r0
 800c8fc:	bc09      	pop	{r0, r3}
 800c8fe:	6819      	ldr	r1, [r3, #0]
 800c900:	6808      	ldr	r0, [r1, #0]
 800c902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c906:	f01e 0f10 	tst.w	lr, #16
 800c90a:	bf08      	it	eq
 800c90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c910:	f380 8809 	msr	PSP, r0
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	f3af 8000 	nop.w

0800c920 <pxCurrentTCBConst>:
 800c920:	24000210 	.word	0x24000210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop

0800c928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c942:	f7ff fb4b 	bl	800bfdc <xTaskIncrementTick>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <SysTick_Handler+0x40>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	f383 8811 	msr	BASEPRI, r3
}
 800c95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c970:	4b0b      	ldr	r3, [pc, #44]	; (800c9a0 <vPortSetupTimerInterrupt+0x34>)
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c976:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <vPortSetupTimerInterrupt+0x38>)
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <vPortSetupTimerInterrupt+0x3c>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a0a      	ldr	r2, [pc, #40]	; (800c9ac <vPortSetupTimerInterrupt+0x40>)
 800c982:	fba2 2303 	umull	r2, r3, r2, r3
 800c986:	099b      	lsrs	r3, r3, #6
 800c988:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <vPortSetupTimerInterrupt+0x44>)
 800c98a:	3b01      	subs	r3, #1
 800c98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c98e:	4b04      	ldr	r3, [pc, #16]	; (800c9a0 <vPortSetupTimerInterrupt+0x34>)
 800c990:	2207      	movs	r2, #7
 800c992:	601a      	str	r2, [r3, #0]
}
 800c994:	bf00      	nop
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	e000e010 	.word	0xe000e010
 800c9a4:	e000e018 	.word	0xe000e018
 800c9a8:	24000000 	.word	0x24000000
 800c9ac:	10624dd3 	.word	0x10624dd3
 800c9b0:	e000e014 	.word	0xe000e014

0800c9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9c4 <vPortEnableVFP+0x10>
 800c9b8:	6801      	ldr	r1, [r0, #0]
 800c9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9be:	6001      	str	r1, [r0, #0]
 800c9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9c2:	bf00      	nop
 800c9c4:	e000ed88 	.word	0xe000ed88

0800c9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08a      	sub	sp, #40	; 0x28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9d4:	f7ff fa58 	bl	800be88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9d8:	4b5b      	ldr	r3, [pc, #364]	; (800cb48 <pvPortMalloc+0x180>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9e0:	f000 f920 	bl	800cc24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9e4:	4b59      	ldr	r3, [pc, #356]	; (800cb4c <pvPortMalloc+0x184>)
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 8093 	bne.w	800cb18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d01d      	beq.n	800ca34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d014      	beq.n	800ca34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	3308      	adds	r3, #8
 800ca12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00a      	beq.n	800ca34 <pvPortMalloc+0x6c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	617b      	str	r3, [r7, #20]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d06e      	beq.n	800cb18 <pvPortMalloc+0x150>
 800ca3a:	4b45      	ldr	r3, [pc, #276]	; (800cb50 <pvPortMalloc+0x188>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d869      	bhi.n	800cb18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca44:	4b43      	ldr	r3, [pc, #268]	; (800cb54 <pvPortMalloc+0x18c>)
 800ca46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca48:	4b42      	ldr	r3, [pc, #264]	; (800cb54 <pvPortMalloc+0x18c>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca4e:	e004      	b.n	800ca5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d903      	bls.n	800ca6c <pvPortMalloc+0xa4>
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1f1      	bne.n	800ca50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca6c:	4b36      	ldr	r3, [pc, #216]	; (800cb48 <pvPortMalloc+0x180>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d050      	beq.n	800cb18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	4413      	add	r3, r2
 800ca7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	2308      	movs	r3, #8
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d91f      	bls.n	800cad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <pvPortMalloc+0xf8>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	613b      	str	r3, [r7, #16]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	1ad2      	subs	r2, r2, r3
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cad2:	69b8      	ldr	r0, [r7, #24]
 800cad4:	f000 f908 	bl	800cce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cad8:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <pvPortMalloc+0x188>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <pvPortMalloc+0x188>)
 800cae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cae6:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <pvPortMalloc+0x188>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <pvPortMalloc+0x190>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d203      	bcs.n	800cafa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caf2:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <pvPortMalloc+0x188>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a18      	ldr	r2, [pc, #96]	; (800cb58 <pvPortMalloc+0x190>)
 800caf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	4b13      	ldr	r3, [pc, #76]	; (800cb4c <pvPortMalloc+0x184>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	431a      	orrs	r2, r3
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb0e:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <pvPortMalloc+0x194>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3301      	adds	r3, #1
 800cb14:	4a11      	ldr	r2, [pc, #68]	; (800cb5c <pvPortMalloc+0x194>)
 800cb16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb18:	f7ff f9c4 	bl	800bea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <pvPortMalloc+0x174>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	60fb      	str	r3, [r7, #12]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <pvPortMalloc+0x172>
	return pvReturn;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3728      	adds	r7, #40	; 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	24003ebc 	.word	0x24003ebc
 800cb4c:	24003ed0 	.word	0x24003ed0
 800cb50:	24003ec0 	.word	0x24003ec0
 800cb54:	24003eb4 	.word	0x24003eb4
 800cb58:	24003ec4 	.word	0x24003ec4
 800cb5c:	24003ec8 	.word	0x24003ec8

0800cb60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d04d      	beq.n	800cc0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb72:	2308      	movs	r3, #8
 800cb74:	425b      	negs	r3, r3
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4413      	add	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	4b24      	ldr	r3, [pc, #144]	; (800cc18 <vPortFree+0xb8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10a      	bne.n	800cba4 <vPortFree+0x44>
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	60fb      	str	r3, [r7, #12]
}
 800cba0:	bf00      	nop
 800cba2:	e7fe      	b.n	800cba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00a      	beq.n	800cbc2 <vPortFree+0x62>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60bb      	str	r3, [r7, #8]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <vPortFree+0xb8>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01e      	beq.n	800cc0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d11a      	bne.n	800cc0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	4b0e      	ldr	r3, [pc, #56]	; (800cc18 <vPortFree+0xb8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	43db      	mvns	r3, r3
 800cbe2:	401a      	ands	r2, r3
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbe8:	f7ff f94e 	bl	800be88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <vPortFree+0xbc>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	4a09      	ldr	r2, [pc, #36]	; (800cc1c <vPortFree+0xbc>)
 800cbf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbfa:	6938      	ldr	r0, [r7, #16]
 800cbfc:	f000 f874 	bl	800cce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc00:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <vPortFree+0xc0>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3301      	adds	r3, #1
 800cc06:	4a06      	ldr	r2, [pc, #24]	; (800cc20 <vPortFree+0xc0>)
 800cc08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc0a:	f7ff f94b 	bl	800bea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc0e:	bf00      	nop
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	24003ed0 	.word	0x24003ed0
 800cc1c:	24003ec0 	.word	0x24003ec0
 800cc20:	24003ecc 	.word	0x24003ecc

0800cc24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc30:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <prvHeapInit+0xac>)
 800cc32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00c      	beq.n	800cc58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3307      	adds	r3, #7
 800cc42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0307 	bic.w	r3, r3, #7
 800cc4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	4a1f      	ldr	r2, [pc, #124]	; (800ccd0 <prvHeapInit+0xac>)
 800cc54:	4413      	add	r3, r2
 800cc56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc5c:	4a1d      	ldr	r2, [pc, #116]	; (800ccd4 <prvHeapInit+0xb0>)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc62:	4b1c      	ldr	r3, [pc, #112]	; (800ccd4 <prvHeapInit+0xb0>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc70:	2208      	movs	r2, #8
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	1a9b      	subs	r3, r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0307 	bic.w	r3, r3, #7
 800cc7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4a15      	ldr	r2, [pc, #84]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc86:	4b14      	ldr	r3, [pc, #80]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc8e:	4b12      	ldr	r3, [pc, #72]	; (800ccd8 <prvHeapInit+0xb4>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2200      	movs	r2, #0
 800cc94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	1ad2      	subs	r2, r2, r3
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cca4:	4b0c      	ldr	r3, [pc, #48]	; (800ccd8 <prvHeapInit+0xb4>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	4a0a      	ldr	r2, [pc, #40]	; (800ccdc <prvHeapInit+0xb8>)
 800ccb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	4a09      	ldr	r2, [pc, #36]	; (800cce0 <prvHeapInit+0xbc>)
 800ccba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccbc:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <prvHeapInit+0xc0>)
 800ccbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ccc2:	601a      	str	r2, [r3, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr
 800ccd0:	240002b4 	.word	0x240002b4
 800ccd4:	24003eb4 	.word	0x24003eb4
 800ccd8:	24003ebc 	.word	0x24003ebc
 800ccdc:	24003ec4 	.word	0x24003ec4
 800cce0:	24003ec0 	.word	0x24003ec0
 800cce4:	24003ed0 	.word	0x24003ed0

0800cce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccf0:	4b28      	ldr	r3, [pc, #160]	; (800cd94 <prvInsertBlockIntoFreeList+0xac>)
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e002      	b.n	800ccfc <prvInsertBlockIntoFreeList+0x14>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d8f7      	bhi.n	800ccf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	4413      	add	r3, r2
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d108      	bne.n	800cd2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	441a      	add	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	441a      	add	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d118      	bne.n	800cd70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <prvInsertBlockIntoFreeList+0xb0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d00d      	beq.n	800cd66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	441a      	add	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	e008      	b.n	800cd78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <prvInsertBlockIntoFreeList+0xb0>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	e003      	b.n	800cd78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d002      	beq.n	800cd86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	24003eb4 	.word	0x24003eb4
 800cd98:	24003ebc 	.word	0x24003ebc

0800cd9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800cda0:	2201      	movs	r2, #1
 800cda2:	4913      	ldr	r1, [pc, #76]	; (800cdf0 <MX_USB_DEVICE_Init+0x54>)
 800cda4:	4813      	ldr	r0, [pc, #76]	; (800cdf4 <MX_USB_DEVICE_Init+0x58>)
 800cda6:	f7fd f80f 	bl	8009dc8 <USBD_Init>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cdb0:	f7f3 fe38 	bl	8000a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800cdb4:	4910      	ldr	r1, [pc, #64]	; (800cdf8 <MX_USB_DEVICE_Init+0x5c>)
 800cdb6:	480f      	ldr	r0, [pc, #60]	; (800cdf4 <MX_USB_DEVICE_Init+0x58>)
 800cdb8:	f7fd f836 	bl	8009e28 <USBD_RegisterClass>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cdc2:	f7f3 fe2f 	bl	8000a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cdc6:	490d      	ldr	r1, [pc, #52]	; (800cdfc <MX_USB_DEVICE_Init+0x60>)
 800cdc8:	480a      	ldr	r0, [pc, #40]	; (800cdf4 <MX_USB_DEVICE_Init+0x58>)
 800cdca:	f7fc ff57 	bl	8009c7c <USBD_CDC_RegisterInterface>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cdd4:	f7f3 fe26 	bl	8000a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800cdd8:	4806      	ldr	r0, [pc, #24]	; (800cdf4 <MX_USB_DEVICE_Init+0x58>)
 800cdda:	f7fd f84c 	bl	8009e76 <USBD_Start>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cde4:	f7f3 fe1e 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cde8:	f7f7 fdba 	bl	8004960 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdec:	bf00      	nop
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	24000138 	.word	0x24000138
 800cdf4:	240042f0 	.word	0x240042f0
 800cdf8:	2400001c 	.word	0x2400001c
 800cdfc:	24000124 	.word	0x24000124

0800ce00 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ce04:	2200      	movs	r2, #0
 800ce06:	4905      	ldr	r1, [pc, #20]	; (800ce1c <CDC_Init_HS+0x1c>)
 800ce08:	4805      	ldr	r0, [pc, #20]	; (800ce20 <CDC_Init_HS+0x20>)
 800ce0a:	f7fc ff4c 	bl	8009ca6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ce0e:	4905      	ldr	r1, [pc, #20]	; (800ce24 <CDC_Init_HS+0x24>)
 800ce10:	4803      	ldr	r0, [pc, #12]	; (800ce20 <CDC_Init_HS+0x20>)
 800ce12:	f7fc ff66 	bl	8009ce2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce16:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	24004dc0 	.word	0x24004dc0
 800ce20:	240042f0 	.word	0x240042f0
 800ce24:	240045c0 	.word	0x240045c0

0800ce28 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ce2c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	71fb      	strb	r3, [r7, #7]
 800ce44:	4613      	mov	r3, r2
 800ce46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ce48:	79fb      	ldrb	r3, [r7, #7]
 800ce4a:	2b23      	cmp	r3, #35	; 0x23
 800ce4c:	d84a      	bhi.n	800cee4 <CDC_Control_HS+0xac>
 800ce4e:	a201      	add	r2, pc, #4	; (adr r2, 800ce54 <CDC_Control_HS+0x1c>)
 800ce50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce54:	0800cee5 	.word	0x0800cee5
 800ce58:	0800cee5 	.word	0x0800cee5
 800ce5c:	0800cee5 	.word	0x0800cee5
 800ce60:	0800cee5 	.word	0x0800cee5
 800ce64:	0800cee5 	.word	0x0800cee5
 800ce68:	0800cee5 	.word	0x0800cee5
 800ce6c:	0800cee5 	.word	0x0800cee5
 800ce70:	0800cee5 	.word	0x0800cee5
 800ce74:	0800cee5 	.word	0x0800cee5
 800ce78:	0800cee5 	.word	0x0800cee5
 800ce7c:	0800cee5 	.word	0x0800cee5
 800ce80:	0800cee5 	.word	0x0800cee5
 800ce84:	0800cee5 	.word	0x0800cee5
 800ce88:	0800cee5 	.word	0x0800cee5
 800ce8c:	0800cee5 	.word	0x0800cee5
 800ce90:	0800cee5 	.word	0x0800cee5
 800ce94:	0800cee5 	.word	0x0800cee5
 800ce98:	0800cee5 	.word	0x0800cee5
 800ce9c:	0800cee5 	.word	0x0800cee5
 800cea0:	0800cee5 	.word	0x0800cee5
 800cea4:	0800cee5 	.word	0x0800cee5
 800cea8:	0800cee5 	.word	0x0800cee5
 800ceac:	0800cee5 	.word	0x0800cee5
 800ceb0:	0800cee5 	.word	0x0800cee5
 800ceb4:	0800cee5 	.word	0x0800cee5
 800ceb8:	0800cee5 	.word	0x0800cee5
 800cebc:	0800cee5 	.word	0x0800cee5
 800cec0:	0800cee5 	.word	0x0800cee5
 800cec4:	0800cee5 	.word	0x0800cee5
 800cec8:	0800cee5 	.word	0x0800cee5
 800cecc:	0800cee5 	.word	0x0800cee5
 800ced0:	0800cee5 	.word	0x0800cee5
 800ced4:	0800cee5 	.word	0x0800cee5
 800ced8:	0800cee5 	.word	0x0800cee5
 800cedc:	0800cee5 	.word	0x0800cee5
 800cee0:	0800cee5 	.word	0x0800cee5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cee4:	bf00      	nop
  }

  return (USBD_OK);
 800cee6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	extern xQueueHandle ADC_Queue;

uint8_t str[4] = "C\n\r";
 800cefe:	4b15      	ldr	r3, [pc, #84]	; (800cf54 <CDC_Receive_HS+0x60>)
 800cf00:	60fb      	str	r3, [r7, #12]

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	4814      	ldr	r0, [pc, #80]	; (800cf58 <CDC_Receive_HS+0x64>)
 800cf06:	f7fc feec 	bl	8009ce2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800cf0a:	4813      	ldr	r0, [pc, #76]	; (800cf58 <CDC_Receive_HS+0x64>)
 800cf0c:	f7fc ff32 	bl	8009d74 <USBD_CDC_ReceivePacket>

   if(*Buf > 47 && *Buf < 123) str[0] = *Buf;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2b2f      	cmp	r3, #47	; 0x2f
 800cf16:	d907      	bls.n	800cf28 <CDC_Receive_HS+0x34>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b7a      	cmp	r3, #122	; 0x7a
 800cf1e:	d803      	bhi.n	800cf28 <CDC_Receive_HS+0x34>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	733b      	strb	r3, [r7, #12]
 800cf26:	e001      	b.n	800cf2c <CDC_Receive_HS+0x38>
   else str[0] = '?';
 800cf28:	233f      	movs	r3, #63	; 0x3f
 800cf2a:	733b      	strb	r3, [r7, #12]
   CDC_Transmit_HS(str,3);
 800cf2c:	f107 030c 	add.w	r3, r7, #12
 800cf30:	2103      	movs	r1, #3
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 f814 	bl	800cf60 <CDC_Transmit_HS>
   xQueueSendToFront(ADC_Queue, &str[0], 5);
 800cf38:	4b08      	ldr	r3, [pc, #32]	; (800cf5c <CDC_Receive_HS+0x68>)
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	f107 010c 	add.w	r1, r7, #12
 800cf40:	2301      	movs	r3, #1
 800cf42:	2205      	movs	r2, #5
 800cf44:	f7fe fa6e 	bl	800b424 <xQueueGenericSend>


  return (USBD_OK);
 800cf48:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	000d0a43 	.word	0x000d0a43
 800cf58:	240042f0 	.word	0x240042f0
 800cf5c:	240042e8 	.word	0x240042e8

0800cf60 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800cf70:	4b0d      	ldr	r3, [pc, #52]	; (800cfa8 <CDC_Transmit_HS+0x48>)
 800cf72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e00b      	b.n	800cf9e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800cf86:	887b      	ldrh	r3, [r7, #2]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	4806      	ldr	r0, [pc, #24]	; (800cfa8 <CDC_Transmit_HS+0x48>)
 800cf8e:	f7fc fe8a 	bl	8009ca6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800cf92:	4805      	ldr	r0, [pc, #20]	; (800cfa8 <CDC_Transmit_HS+0x48>)
 800cf94:	f7fc febe 	bl	8009d14 <USBD_CDC_TransmitPacket>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	240042f0 	.word	0x240042f0

0800cfac <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800cfbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2212      	movs	r2, #18
 800cfe0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr
 800cff0:	24000154 	.word	0x24000154

0800cff4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2204      	movs	r2, #4
 800d004:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d006:	4b03      	ldr	r3, [pc, #12]	; (800d014 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	24000168 	.word	0x24000168

0800d018 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	6039      	str	r1, [r7, #0]
 800d022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	4907      	ldr	r1, [pc, #28]	; (800d04c <USBD_HS_ProductStrDescriptor+0x34>)
 800d02e:	4808      	ldr	r0, [pc, #32]	; (800d050 <USBD_HS_ProductStrDescriptor+0x38>)
 800d030:	f7fd ff53 	bl	800aeda <USBD_GetString>
 800d034:	e004      	b.n	800d040 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	4904      	ldr	r1, [pc, #16]	; (800d04c <USBD_HS_ProductStrDescriptor+0x34>)
 800d03a:	4805      	ldr	r0, [pc, #20]	; (800d050 <USBD_HS_ProductStrDescriptor+0x38>)
 800d03c:	f7fd ff4d 	bl	800aeda <USBD_GetString>
  }
  return USBD_StrDesc;
 800d040:	4b02      	ldr	r3, [pc, #8]	; (800d04c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	240055c0 	.word	0x240055c0
 800d050:	0800d938 	.word	0x0800d938

0800d054 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	4904      	ldr	r1, [pc, #16]	; (800d074 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d064:	4804      	ldr	r0, [pc, #16]	; (800d078 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d066:	f7fd ff38 	bl	800aeda <USBD_GetString>
  return USBD_StrDesc;
 800d06a:	4b02      	ldr	r3, [pc, #8]	; (800d074 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	240055c0 	.word	0x240055c0
 800d078:	0800d950 	.word	0x0800d950

0800d07c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	221a      	movs	r2, #26
 800d08c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d08e:	f000 f843 	bl	800d118 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d092:	4b02      	ldr	r3, [pc, #8]	; (800d09c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d094:	4618      	mov	r0, r3
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	2400016c 	.word	0x2400016c

0800d0a0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	6039      	str	r1, [r7, #0]
 800d0aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d105      	bne.n	800d0be <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	4907      	ldr	r1, [pc, #28]	; (800d0d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d0b6:	4808      	ldr	r0, [pc, #32]	; (800d0d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d0b8:	f7fd ff0f 	bl	800aeda <USBD_GetString>
 800d0bc:	e004      	b.n	800d0c8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	4904      	ldr	r1, [pc, #16]	; (800d0d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d0c2:	4805      	ldr	r0, [pc, #20]	; (800d0d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d0c4:	f7fd ff09 	bl	800aeda <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	240055c0 	.word	0x240055c0
 800d0d8:	0800d964 	.word	0x0800d964

0800d0dc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	6039      	str	r1, [r7, #0]
 800d0e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d105      	bne.n	800d0fa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4907      	ldr	r1, [pc, #28]	; (800d110 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d0f2:	4808      	ldr	r0, [pc, #32]	; (800d114 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d0f4:	f7fd fef1 	bl	800aeda <USBD_GetString>
 800d0f8:	e004      	b.n	800d104 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	4904      	ldr	r1, [pc, #16]	; (800d110 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d0fe:	4805      	ldr	r0, [pc, #20]	; (800d114 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d100:	f7fd feeb 	bl	800aeda <USBD_GetString>
  }
  return USBD_StrDesc;
 800d104:	4b02      	ldr	r3, [pc, #8]	; (800d110 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	240055c0 	.word	0x240055c0
 800d114:	0800d970 	.word	0x0800d970

0800d118 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d11e:	4b0f      	ldr	r3, [pc, #60]	; (800d15c <Get_SerialNum+0x44>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d124:	4b0e      	ldr	r3, [pc, #56]	; (800d160 <Get_SerialNum+0x48>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d12a:	4b0e      	ldr	r3, [pc, #56]	; (800d164 <Get_SerialNum+0x4c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d13e:	2208      	movs	r2, #8
 800d140:	4909      	ldr	r1, [pc, #36]	; (800d168 <Get_SerialNum+0x50>)
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 f814 	bl	800d170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d148:	2204      	movs	r2, #4
 800d14a:	4908      	ldr	r1, [pc, #32]	; (800d16c <Get_SerialNum+0x54>)
 800d14c:	68b8      	ldr	r0, [r7, #8]
 800d14e:	f000 f80f 	bl	800d170 <IntToUnicode>
  }
}
 800d152:	bf00      	nop
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	1ff1e800 	.word	0x1ff1e800
 800d160:	1ff1e804 	.word	0x1ff1e804
 800d164:	1ff1e808 	.word	0x1ff1e808
 800d168:	2400016e 	.word	0x2400016e
 800d16c:	2400017e 	.word	0x2400017e

0800d170 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
 800d186:	e027      	b.n	800d1d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	0f1b      	lsrs	r3, r3, #28
 800d18c:	2b09      	cmp	r3, #9
 800d18e:	d80b      	bhi.n	800d1a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0f1b      	lsrs	r3, r3, #28
 800d194:	b2da      	uxtb	r2, r3
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4619      	mov	r1, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	440b      	add	r3, r1
 800d1a0:	3230      	adds	r2, #48	; 0x30
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
 800d1a6:	e00a      	b.n	800d1be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	0f1b      	lsrs	r3, r3, #28
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3237      	adds	r2, #55	; 0x37
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	75fb      	strb	r3, [r7, #23]
 800d1d8:	7dfa      	ldrb	r2, [r7, #23]
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d3d3      	bcc.n	800d188 <IntToUnicode+0x18>
  }
}
 800d1e0:	bf00      	nop
 800d1e2:	bf00      	nop
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b0b6      	sub	sp, #216	; 0xd8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	605a      	str	r2, [r3, #4]
 800d202:	609a      	str	r2, [r3, #8]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d208:	f107 0310 	add.w	r3, r7, #16
 800d20c:	22b4      	movs	r2, #180	; 0xb4
 800d20e:	2100      	movs	r1, #0
 800d210:	4618      	mov	r0, r3
 800d212:	f000 fb5b 	bl	800d8cc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a2b      	ldr	r2, [pc, #172]	; (800d2c8 <HAL_PCD_MspInit+0xd8>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d14e      	bne.n	800d2be <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d220:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d224:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d226:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800d22a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d22e:	f107 0310 	add.w	r3, r7, #16
 800d232:	4618      	mov	r0, r3
 800d234:	f7f8 faea 	bl	800580c <HAL_RCCEx_PeriphCLKConfig>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800d23e:	f7f3 fbf1 	bl	8000a24 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d242:	f7f7 fb8d 	bl	8004960 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d246:	4b21      	ldr	r3, [pc, #132]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d24c:	4a1f      	ldr	r2, [pc, #124]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d24e:	f043 0301 	orr.w	r3, r3, #1
 800d252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d256:	4b1d      	ldr	r3, [pc, #116]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d25c:	f003 0301 	and.w	r3, r3, #1
 800d260:	60fb      	str	r3, [r7, #12]
 800d262:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA10     ------> USB_OTG_HS_ID
    */
    GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800d264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d26c:	2302      	movs	r3, #2
 800d26e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d272:	2300      	movs	r3, #0
 800d274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d278:	2300      	movs	r3, #0
 800d27a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800d27e:	230a      	movs	r3, #10
 800d280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800d284:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800d288:	4619      	mov	r1, r3
 800d28a:	4811      	ldr	r0, [pc, #68]	; (800d2d0 <HAL_PCD_MspInit+0xe0>)
 800d28c:	f7f5 ff92 	bl	80031b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d290:	4b0e      	ldr	r3, [pc, #56]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d296:	4a0d      	ldr	r2, [pc, #52]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d298:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d29c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <HAL_PCD_MspInit+0xdc>)
 800d2a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d2a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2aa:	60bb      	str	r3, [r7, #8]
 800d2ac:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2105      	movs	r1, #5
 800d2b2:	204d      	movs	r0, #77	; 0x4d
 800d2b4:	f7f5 ff56 	bl	8003164 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d2b8:	204d      	movs	r0, #77	; 0x4d
 800d2ba:	f7f5 ff6d 	bl	8003198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d2be:	bf00      	nop
 800d2c0:	37d8      	adds	r7, #216	; 0xd8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	40040000 	.word	0x40040000
 800d2cc:	58024400 	.word	0x58024400
 800d2d0:	58020000 	.word	0x58020000

0800d2d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	f7fc fe0e 	bl	8009f0c <USBD_LL_SetupStage>
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	460b      	mov	r3, r1
 800d302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d30a:	78fa      	ldrb	r2, [r7, #3]
 800d30c:	6879      	ldr	r1, [r7, #4]
 800d30e:	4613      	mov	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	440b      	add	r3, r1
 800d318:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	78fb      	ldrb	r3, [r7, #3]
 800d320:	4619      	mov	r1, r3
 800d322:	f7fc fe48 	bl	8009fb6 <USBD_LL_DataOutStage>
}
 800d326:	bf00      	nop
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	4613      	mov	r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	1a9b      	subs	r3, r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	3348      	adds	r3, #72	; 0x48
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	4619      	mov	r1, r3
 800d356:	f7fc fe91 	bl	800a07c <USBD_LL_DataInStage>
}
 800d35a:	bf00      	nop
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d370:	4618      	mov	r0, r3
 800d372:	f7fc ffa5 	bl	800a2c0 <USBD_LL_SOF>
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d386:	2301      	movs	r3, #1
 800d388:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d102      	bne.n	800d398 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d392:	2300      	movs	r3, #0
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e008      	b.n	800d3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d102      	bne.n	800d3a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	73fb      	strb	r3, [r7, #15]
 800d3a4:	e001      	b.n	800d3aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d3a6:	f7f3 fb3d 	bl	8000a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3b0:	7bfa      	ldrb	r2, [r7, #15]
 800d3b2:	4611      	mov	r1, r2
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fc ff45 	bl	800a244 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fc fef1 	bl	800a1a8 <USBD_LL_Reset>
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
	...

0800d3d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fc ff40 	bl	800a264 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	6812      	ldr	r2, [r2, #0]
 800d3f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a1b      	ldr	r3, [r3, #32]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d005      	beq.n	800d410 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <HAL_PCD_SuspendCallback+0x48>)
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	4a03      	ldr	r2, [pc, #12]	; (800d418 <HAL_PCD_SuspendCallback+0x48>)
 800d40a:	f043 0306 	orr.w	r3, r3, #6
 800d40e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	e000ed00 	.word	0xe000ed00

0800d41c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fc ff30 	bl	800a290 <USBD_LL_Resume>
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	460b      	mov	r3, r1
 800d442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d44a:	78fa      	ldrb	r2, [r7, #3]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fc ff7e 	bl	800a350 <USBD_LL_IsoOUTIncomplete>
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d46e:	78fa      	ldrb	r2, [r7, #3]
 800d470:	4611      	mov	r1, r2
 800d472:	4618      	mov	r0, r3
 800d474:	f7fc ff46 	bl	800a304 <USBD_LL_IsoINIncomplete>
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fc ff84 	bl	800a39c <USBD_LL_DevConnected>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fc ff81 	bl	800a3b2 <USBD_LL_DevDisconnected>
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d143      	bne.n	800d550 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d4c8:	4a24      	ldr	r2, [pc, #144]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a22      	ldr	r2, [pc, #136]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d4d8:	4b20      	ldr	r3, [pc, #128]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4da:	4a21      	ldr	r2, [pc, #132]	; (800d560 <USBD_LL_Init+0xa8>)
 800d4dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800d4de:	4b1f      	ldr	r3, [pc, #124]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4e0:	2209      	movs	r2, #9
 800d4e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d4e4:	4b1d      	ldr	r3, [pc, #116]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d4ea:	4b1c      	ldr	r3, [pc, #112]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d4f0:	4b1a      	ldr	r3, [pc, #104]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d4f6:	4b19      	ldr	r3, [pc, #100]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d4fc:	4b17      	ldr	r3, [pc, #92]	; (800d55c <USBD_LL_Init+0xa4>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d502:	4b16      	ldr	r3, [pc, #88]	; (800d55c <USBD_LL_Init+0xa4>)
 800d504:	2200      	movs	r2, #0
 800d506:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800d508:	4b14      	ldr	r3, [pc, #80]	; (800d55c <USBD_LL_Init+0xa4>)
 800d50a:	2201      	movs	r2, #1
 800d50c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <USBD_LL_Init+0xa4>)
 800d510:	2200      	movs	r2, #0
 800d512:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d514:	4b11      	ldr	r3, [pc, #68]	; (800d55c <USBD_LL_Init+0xa4>)
 800d516:	2200      	movs	r2, #0
 800d518:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d51a:	4b10      	ldr	r3, [pc, #64]	; (800d55c <USBD_LL_Init+0xa4>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d520:	480e      	ldr	r0, [pc, #56]	; (800d55c <USBD_LL_Init+0xa4>)
 800d522:	f7f6 f808 	bl	8003536 <HAL_PCD_Init>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 800d52c:	f7f3 fa7a 	bl	8000a24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d530:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d534:	4809      	ldr	r0, [pc, #36]	; (800d55c <USBD_LL_Init+0xa4>)
 800d536:	f7f7 f998 	bl	800486a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d53a:	2280      	movs	r2, #128	; 0x80
 800d53c:	2100      	movs	r1, #0
 800d53e:	4807      	ldr	r0, [pc, #28]	; (800d55c <USBD_LL_Init+0xa4>)
 800d540:	f7f7 f94c 	bl	80047dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d544:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800d548:	2101      	movs	r1, #1
 800d54a:	4804      	ldr	r0, [pc, #16]	; (800d55c <USBD_LL_Init+0xa4>)
 800d54c:	f7f7 f946 	bl	80047dc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	240057c0 	.word	0x240057c0
 800d560:	40040000 	.word	0x40040000

0800d564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f6 f8ff 	bl	800377e <HAL_PCD_Start>
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d584:	7bfb      	ldrb	r3, [r7, #15]
 800d586:	4618      	mov	r0, r3
 800d588:	f000 f942 	bl	800d810 <USBD_Get_USB_Status>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d590:	7bbb      	ldrb	r3, [r7, #14]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	4608      	mov	r0, r1
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	70fb      	strb	r3, [r7, #3]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70bb      	strb	r3, [r7, #2]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5c2:	78bb      	ldrb	r3, [r7, #2]
 800d5c4:	883a      	ldrh	r2, [r7, #0]
 800d5c6:	78f9      	ldrb	r1, [r7, #3]
 800d5c8:	f7f6 fd10 	bl	8003fec <HAL_PCD_EP_Open>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f91c 	bl	800d810 <USBD_Get_USB_Status>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d600:	78fa      	ldrb	r2, [r7, #3]
 800d602:	4611      	mov	r1, r2
 800d604:	4618      	mov	r0, r3
 800d606:	f7f6 fd59 	bl	80040bc <HAL_PCD_EP_Close>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
 800d610:	4618      	mov	r0, r3
 800d612:	f000 f8fd 	bl	800d810 <USBD_Get_USB_Status>
 800d616:	4603      	mov	r3, r0
 800d618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d63e:	78fa      	ldrb	r2, [r7, #3]
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7f6 fe31 	bl	80042aa <HAL_PCD_EP_SetStall>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 f8de 	bl	800d810 <USBD_Get_USB_Status>
 800d654:	4603      	mov	r3, r0
 800d656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d658:	7bbb      	ldrb	r3, [r7, #14]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d67c:	78fa      	ldrb	r2, [r7, #3]
 800d67e:	4611      	mov	r1, r2
 800d680:	4618      	mov	r0, r3
 800d682:	f7f6 fe76 	bl	8004372 <HAL_PCD_EP_ClrStall>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f8bf 	bl	800d810 <USBD_Get_USB_Status>
 800d692:	4603      	mov	r3, r0
 800d694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d696:	7bbb      	ldrb	r3, [r7, #14]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	da0b      	bge.n	800d6d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6c2:	68f9      	ldr	r1, [r7, #12]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	1a9b      	subs	r3, r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	440b      	add	r3, r1
 800d6ce:	333e      	adds	r3, #62	; 0x3e
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	e00b      	b.n	800d6ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6da:	68f9      	ldr	r1, [r7, #12]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	440b      	add	r3, r1
 800d6e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d712:	78fa      	ldrb	r2, [r7, #3]
 800d714:	4611      	mov	r1, r2
 800d716:	4618      	mov	r0, r3
 800d718:	f7f6 fc43 	bl	8003fa2 <HAL_PCD_SetAddress>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f874 	bl	800d810 <USBD_Get_USB_Status>
 800d728:	4603      	mov	r3, r0
 800d72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d736:	b580      	push	{r7, lr}
 800d738:	b086      	sub	sp, #24
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	60f8      	str	r0, [r7, #12]
 800d73e:	607a      	str	r2, [r7, #4]
 800d740:	603b      	str	r3, [r7, #0]
 800d742:	460b      	mov	r3, r1
 800d744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d754:	7af9      	ldrb	r1, [r7, #11]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	f7f6 fd5c 	bl	8004216 <HAL_PCD_EP_Transmit>
 800d75e:	4603      	mov	r3, r0
 800d760:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	4618      	mov	r0, r3
 800d766:	f000 f853 	bl	800d810 <USBD_Get_USB_Status>
 800d76a:	4603      	mov	r3, r0
 800d76c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d76e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	607a      	str	r2, [r7, #4]
 800d782:	603b      	str	r3, [r7, #0]
 800d784:	460b      	mov	r3, r1
 800d786:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d796:	7af9      	ldrb	r1, [r7, #11]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	f7f6 fcd8 	bl	8004150 <HAL_PCD_EP_Receive>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7a4:	7dfb      	ldrb	r3, [r7, #23]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 f832 	bl	800d810 <USBD_Get_USB_Status>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3718      	adds	r7, #24
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d7cc:	78fa      	ldrb	r2, [r7, #3]
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7f6 fd08 	bl	80041e6 <HAL_PCD_EP_GetRxCount>
 800d7d6:	4603      	mov	r3, r0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7e8:	4b03      	ldr	r3, [pc, #12]	; (800d7f8 <USBD_static_malloc+0x18>)
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	24003ed4 	.word	0x24003ed4

0800d7fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]

}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d81a:	2300      	movs	r3, #0
 800d81c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	2b03      	cmp	r3, #3
 800d822:	d817      	bhi.n	800d854 <USBD_Get_USB_Status+0x44>
 800d824:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <USBD_Get_USB_Status+0x1c>)
 800d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d83d 	.word	0x0800d83d
 800d830:	0800d843 	.word	0x0800d843
 800d834:	0800d849 	.word	0x0800d849
 800d838:	0800d84f 	.word	0x0800d84f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]
    break;
 800d840:	e00b      	b.n	800d85a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d842:	2303      	movs	r3, #3
 800d844:	73fb      	strb	r3, [r7, #15]
    break;
 800d846:	e008      	b.n	800d85a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d848:	2301      	movs	r3, #1
 800d84a:	73fb      	strb	r3, [r7, #15]
    break;
 800d84c:	e005      	b.n	800d85a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d84e:	2303      	movs	r3, #3
 800d850:	73fb      	strb	r3, [r7, #15]
    break;
 800d852:	e002      	b.n	800d85a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d854:	2303      	movs	r3, #3
 800d856:	73fb      	strb	r3, [r7, #15]
    break;
 800d858:	bf00      	nop
  }
  return usb_status;
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <__libc_init_array>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	4d0d      	ldr	r5, [pc, #52]	; (800d8a0 <__libc_init_array+0x38>)
 800d86c:	4c0d      	ldr	r4, [pc, #52]	; (800d8a4 <__libc_init_array+0x3c>)
 800d86e:	1b64      	subs	r4, r4, r5
 800d870:	10a4      	asrs	r4, r4, #2
 800d872:	2600      	movs	r6, #0
 800d874:	42a6      	cmp	r6, r4
 800d876:	d109      	bne.n	800d88c <__libc_init_array+0x24>
 800d878:	4d0b      	ldr	r5, [pc, #44]	; (800d8a8 <__libc_init_array+0x40>)
 800d87a:	4c0c      	ldr	r4, [pc, #48]	; (800d8ac <__libc_init_array+0x44>)
 800d87c:	f000 f82e 	bl	800d8dc <_init>
 800d880:	1b64      	subs	r4, r4, r5
 800d882:	10a4      	asrs	r4, r4, #2
 800d884:	2600      	movs	r6, #0
 800d886:	42a6      	cmp	r6, r4
 800d888:	d105      	bne.n	800d896 <__libc_init_array+0x2e>
 800d88a:	bd70      	pop	{r4, r5, r6, pc}
 800d88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d890:	4798      	blx	r3
 800d892:	3601      	adds	r6, #1
 800d894:	e7ee      	b.n	800d874 <__libc_init_array+0xc>
 800d896:	f855 3b04 	ldr.w	r3, [r5], #4
 800d89a:	4798      	blx	r3
 800d89c:	3601      	adds	r6, #1
 800d89e:	e7f2      	b.n	800d886 <__libc_init_array+0x1e>
 800d8a0:	0800d9fc 	.word	0x0800d9fc
 800d8a4:	0800d9fc 	.word	0x0800d9fc
 800d8a8:	0800d9fc 	.word	0x0800d9fc
 800d8ac:	0800da00 	.word	0x0800da00

0800d8b0 <memcpy>:
 800d8b0:	440a      	add	r2, r1
 800d8b2:	4291      	cmp	r1, r2
 800d8b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8b8:	d100      	bne.n	800d8bc <memcpy+0xc>
 800d8ba:	4770      	bx	lr
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8c6:	4291      	cmp	r1, r2
 800d8c8:	d1f9      	bne.n	800d8be <memcpy+0xe>
 800d8ca:	bd10      	pop	{r4, pc}

0800d8cc <memset>:
 800d8cc:	4402      	add	r2, r0
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d100      	bne.n	800d8d6 <memset+0xa>
 800d8d4:	4770      	bx	lr
 800d8d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8da:	e7f9      	b.n	800d8d0 <memset+0x4>

0800d8dc <_init>:
 800d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8de:	bf00      	nop
 800d8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8e2:	bc08      	pop	{r3}
 800d8e4:	469e      	mov	lr, r3
 800d8e6:	4770      	bx	lr

0800d8e8 <_fini>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr
